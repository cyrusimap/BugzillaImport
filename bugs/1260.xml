<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>1260</bug_id>
          
          <creation_ts>2002-05-14 13:06 EDT</creation_ts>
          <short_desc>External debugger command hook</short_desc>
          <delta_ts>2010-10-18 12:42:57 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>IMAP</component>
          <version>2.1.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Henrique de Moraes Holschuh">hmh@debian.org</reporter>
          <assigned_to name="Rob Siemborski">rjs3@andrew.cmu.edu</assigned_to>
          <cc>hmh@debian.org</cc>
          

      

      

      
          <long_desc isprivate="0">
            <who name="Henrique de Moraes Holschuh">hmh@debian.org</who>
            <bug_when>2002-05-14 13:06:49 EDT</bug_when>
            <thetext>The current process of setting CYRUS_VERBOSE to a value higher than 30 and then
racing to syslog to attach the debugger to the process ID in the 15s pause is
very awkward.

I have written a patch that adds a debug_command option that can be set to any
_shell_ command that should be run at the start of a service, and a command line
option (-D) to enable said command for a given service.  Such hook can be used
to get even less knowledgeable users to provide straces, ltraces and backtraces
of a malfunctioning service.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Henrique de Moraes Holschuh">hmh@debian.org</who>
            <bug_when>2002-05-14 13:08:31 EDT</bug_when>
            <thetext>Created an attachment (id=34)
Add debug_command imapd.conf option and -D command line option
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Henrique de Moraes Holschuh">hmh@debian.org</who>
            <bug_when>2002-05-14 13:09:39 EDT</bug_when>
            <thetext>The submitted patch does not include a debug hook for the threaded version of
service.c yet, since I am not very well acquinted with posix threads.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2002-06-03 14:24:07 EDT</bug_when>
            <thetext>patch committed (with similar stuff for service-thread.c)</thetext>
          </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>34</attachid>
            <date>2002-05-14 13:08 EDT</date>
            <desc>Add debug_command imapd.conf option and -D command line option</desc>
            <filename>debughook_full.patch</filename>
            <type>text/plain</type>
            <size>11366</size>
            <attacher>hmh@debian.org</attacher>
            
              <data encoding="base64">SW5kZXg6IGltYXAvZnVkLmMKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpSQ1MgZmlsZTogL2hvbWUvY3ZzL2RlYmlhbi9j
eXJ1czIxLWltYXBkL2ltYXAvZnVkLmMsdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMS4xLjQKcmV0
cmlldmluZyByZXZpc2lvbiAxLjIKZGlmZiAtdSAtcjEuMS4xLjQgLXIxLjIKLS0tIGltYXAvZnVk
LmMJMjIgRmViIDIwMDIgMTc6MjU6MjYgLTAwMDAJMS4xLjEuNAorKysgaW1hcC9mdWQuYwkxNCBN
YXkgMjAwMiAxMzoxODoyNSAtMDAwMAkxLjIKQEAgLTE2NCw5ICsxNjQsMTEgQEAKIAogICAgIHNl
dHByb2N0aXRsZV9pbml0KGFyZ2MsIGFyZ3YsIGVudnApOwogCi0gICAgd2hpbGUgKChvcHQgPSBn
ZXRvcHQoYXJnYywgYXJndiwgIkM6IikpICE9IEVPRikgeworICAgIHdoaWxlICgob3B0ID0gZ2V0
b3B0KGFyZ2MsIGFyZ3YsICJDOkQiKSkgIT0gRU9GKSB7CiAJc3dpdGNoIChvcHQpIHsKIAljYXNl
ICdDJzogLyogYWx0IGNvbmZpZyBmaWxlIC0gaGFuZGxlZCBieSBzZXJ2aWNlOjptYWluKCkgKi8K
KwkgICAgYnJlYWs7CisJY2FzZSAnRCc6IC8qIGV4dGVybmFsIGRlYnVnZ2VyIC0gaGFuZGxlZCBi
eSBzZXJ2aWNlOjptYWluKCkgKi8KIAkgICAgYnJlYWs7CiAJZGVmYXVsdDoKIAkgICAgYnJlYWs7
CkluZGV4OiBpbWFwL2ltYXBkLmMKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpSQ1MgZmlsZTogL2hvbWUvY3ZzL2RlYmlh
bi9jeXJ1czIxLWltYXBkL2ltYXAvaW1hcGQuYyx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4xMQpy
ZXRyaWV2aW5nIHJldmlzaW9uIDEuMTIKZGlmZiAtdSAtcjEuMTEgLXIxLjEyCi0tLSBpbWFwL2lt
YXBkLmMJMjkgQXByIDIwMDIgMTI6MTc6NTEgLTAwMDAJMS4xMQorKysgaW1hcC9pbWFwZC5jCTE0
IE1heSAyMDAyIDEzOjE4OjI1IC0wMDAwCTEuMTIKQEAgLTUzMyw5ICs1MzMsMTEgQEAKICAgICBz
bm1wX2Nvbm5lY3QoKTsgLyogaWdub3JlIHJldHVybiBjb2RlICovCiAgICAgc25tcF9zZXRfc3Ry
KFNFUlZFUl9OQU1FX1ZFUlNJT04sQ1lSVVNfVkVSU0lPTik7CiAKLSAgICB3aGlsZSAoKG9wdCA9
IGdldG9wdChhcmdjLCBhcmd2LCAiQzpzcDoiKSkgIT0gRU9GKSB7CisgICAgd2hpbGUgKChvcHQg
PSBnZXRvcHQoYXJnYywgYXJndiwgIkM6RHNwOiIpKSAhPSBFT0YpIHsKIAlzd2l0Y2ggKG9wdCkg
ewogCWNhc2UgJ0MnOiAvKiBhbHQgY29uZmlnIGZpbGUgLSBoYW5kbGVkIGJ5IHNlcnZpY2U6Om1h
aW4oKSAqLworCSAgICBicmVhazsKKwljYXNlICdEJzogLyogZXh0ZXJuYWwgZGVidWdnZXIgLSBo
YW5kbGVkIGJ5IHNlcnZpY2U6Om1haW4oKSAqLwogCSAgICBicmVhazsKIAljYXNlICdzJzogLyog
aW1hcHMgKGRvIHN0YXJ0dGxzIHJpZ2h0IGF3YXkpICovCiAJICAgIGltYXBzID0gMTsKSW5kZXg6
IGltYXAvbG10cGQuYwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvaG9tZS9jdnMvZGViaWFuL2N5cnVz
MjEtaW1hcGQvaW1hcC9sbXRwZC5jLHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjEwCnJldHJpZXZp
bmcgcmV2aXNpb24gMS4xMQpkaWZmIC11IC1yMS4xMCAtcjEuMTEKLS0tIGltYXAvbG10cGQuYwkx
NiBBcHIgMjAwMiAyMDoxMjo0MiAtMDAwMAkxLjEwCisrKyBpbWFwL2xtdHBkLmMJMTQgTWF5IDIw
MDIgMTM6MTg6MjUgLTAwMDAJMS4xMQpAQCAtMzEzLDkgKzMxMywxMSBAQAogICAgIHByb3Rfc2V0
Zmx1c2hvbnJlYWQoZGVsaXZlcl9pbiwgZGVsaXZlcl9vdXQpOwogICAgIHByb3Rfc2V0dGltZW91
dChkZWxpdmVyX2luLCAzNjApOwogCi0gICAgd2hpbGUgKChvcHQgPSBnZXRvcHQoYXJnYywgYXJn
diwgIkM6YSIpKSAhPSBFT0YpIHsKKyAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdjLCBhcmd2
LCAiQzpEYSIpKSAhPSBFT0YpIHsKIAlzd2l0Y2gob3B0KSB7CiAJY2FzZSAnQyc6IC8qIGFsdCBj
b25maWcgZmlsZSAtIGhhbmRsZWQgYnkgc2VydmljZTo6bWFpbigpICovCisJICAgIGJyZWFrOwor
CWNhc2UgJ0QnOiAvKiBleHQuIGRlYnVnZ2VyIC0gaGFuZGxlZCBieSBzZXJ2aWNlOjptYWluKCkg
Ki8KIAkgICAgYnJlYWs7CiAKIAljYXNlICdhJzoKSW5kZXg6IGltYXAvbG10cHByb3h5ZC5jCj09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT0KUkNTIGZpbGU6IC9ob21lL2N2cy9kZWJpYW4vY3lydXMyMS1pbWFwZC9pbWFwL2xt
dHBwcm94eWQuYyx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS45CnJldHJpZXZpbmcgcmV2aXNpb24g
MS4xMApkaWZmIC11IC1yMS45IC1yMS4xMAotLS0gaW1hcC9sbXRwcHJveHlkLmMJMzAgQXByIDIw
MDIgMTk6MTQ6MzkgLTAwMDAJMS45CisrKyBpbWFwL2xtdHBwcm94eWQuYwkxNCBNYXkgMjAwMiAx
MzoxODoyNSAtMDAwMAkxLjEwCkBAIC0yNzksOSArMjc5LDExIEBACiAgICAgcHJvdF9zZXRmbHVz
aG9ucmVhZChkZWxpdmVyX2luLCBkZWxpdmVyX291dCk7CiAgICAgcHJvdF9zZXR0aW1lb3V0KGRl
bGl2ZXJfaW4sIDMwMCk7CiAKLSAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdjLCBhcmd2LCAi
QzpxIikpICE9IEVPRikgeworICAgIHdoaWxlICgob3B0ID0gZ2V0b3B0KGFyZ2MsIGFyZ3YsICJD
OkRxIikpICE9IEVPRikgewogCXN3aXRjaChvcHQpIHsKIAljYXNlICdDJzogLyogYWx0IGNvbmZp
ZyBmaWxlIC0gaGFuZGxlZCBieSBzZXJ2aWNlOjptYWluKCkgKi8KKwkgICAgYnJlYWs7CisJY2Fz
ZSAnRCc6IC8qIGV4dCBkZWJ1Z2dlciAtIGhhbmRsZWQgYnkgc2VydmljZTo6bWFpbigpICovCiAJ
ICAgIGJyZWFrOwogCiAJY2FzZSAncSc6CkluZGV4OiBpbWFwL211cGRhdGUuYwo9PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
ClJDUyBmaWxlOiAvaG9tZS9jdnMvZGViaWFuL2N5cnVzMjEtaW1hcGQvaW1hcC9tdXBkYXRlLmMs
dgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMS4xLjEwCnJldHJpZXZpbmcgcmV2aXNpb24gMS4yCmRp
ZmYgLXUgLXIxLjEuMS4xMCAtcjEuMgotLS0gaW1hcC9tdXBkYXRlLmMJMTEgQXByIDIwMDIgMTY6
MDU6MDAgLTAwMDAJMS4xLjEuMTAKKysrIGltYXAvbXVwZGF0ZS5jCTE0IE1heSAyMDAyIDEzOjE4
OjI1IC0wMDAwCTEuMgpAQCAtMzUyLDkgKzM1MiwxMSBAQAogICAgIH0KIAogICAgIC8qIHNlZSBp
ZiB3ZSdyZSB0aGUgbWFzdGVyIG9yIGEgc2xhdmUgKi8KLSAgICB3aGlsZSAoKG9wdCA9IGdldG9w
dChhcmdjLCBhcmd2LCAiQzptIikpICE9IEVPRikgeworICAgIHdoaWxlICgob3B0ID0gZ2V0b3B0
KGFyZ2MsIGFyZ3YsICJDOkRtIikpICE9IEVPRikgewogCXN3aXRjaCAob3B0KSB7CiAJY2FzZSAn
Qyc6CisJICAgIGJyZWFrOworCWNhc2UgJ0QnOiAvKiBleHQgZGVidWdnZXIgKi8KIAkgICAgYnJl
YWs7CiAJY2FzZSAnbSc6CiAJICAgIG1hc3RlcnAgPSAxOwpJbmRleDogaW1hcC9wb3AzZC5jCj09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT0KUkNTIGZpbGU6IC9ob21lL2N2cy9kZWJpYW4vY3lydXMyMS1pbWFwZC9pbWFwL3Bv
cDNkLmMsdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMS4xLjcKcmV0cmlldmluZyByZXZpc2lvbiAx
LjIKZGlmZiAtdSAtcjEuMS4xLjcgLXIxLjIKLS0tIGltYXAvcG9wM2QuYwkxMCBBcHIgMjAwMiAx
ODowMjo0MiAtMDAwMAkxLjEuMS43CisrKyBpbWFwL3BvcDNkLmMJMTQgTWF5IDIwMDIgMTM6MTg6
MjUgLTAwMDAJMS4yCkBAIC0zMzcsOSArMzM3LDExIEBACiAJZmF0YWwoZXJyb3JfbWVzc2FnZShy
KSwgRUNfQ09ORklHKTsKICAgICB9CiAKLSAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdjLCBh
cmd2LCAiQzpzayIpKSAhPSBFT0YpIHsKKyAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdjLCBh
cmd2LCAiQzpEc2siKSkgIT0gRU9GKSB7CiAJc3dpdGNoKG9wdCkgewogCWNhc2UgJ0MnOiAvKiBh
bHQgY29uZmlnIGZpbGUgLSBoYW5kbGVkIGJ5IHNlcnZpY2U6Om1haW4oKSAqLworCSAgICBicmVh
azsKKwljYXNlICdEJzogLyogZXh0ZXJuYWwgZGVidWdnZXIgLSBoYW5kbGVkIGJ5IHNlcnZpY2U6
Om1haW4oKSAqLwogCSAgICBicmVhazsKIAogCWNhc2UgJ3MnOiAvKiBwb3AzcyAoZG8gc3RhcnR0
bHMgcmlnaHQgYXdheSkgKi8KSW5kZXg6IGltYXAvcG9wM3Byb3h5ZC5jCj09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNT
IGZpbGU6IC9ob21lL2N2cy9kZWJpYW4vY3lydXMyMS1pbWFwZC9pbWFwL3BvcDNwcm94eWQuYyx2
CnJldHJpZXZpbmcgcmV2aXNpb24gMS4xLjEuOApyZXRyaWV2aW5nIHJldmlzaW9uIDEuMgpkaWZm
IC11IC1yMS4xLjEuOCAtcjEuMgotLS0gaW1hcC9wb3AzcHJveHlkLmMJMjMgQXByIDIwMDIgMTg6
NDE6MzMgLTAwMDAJMS4xLjEuOAorKysgaW1hcC9wb3AzcHJveHlkLmMJMTQgTWF5IDIwMDIgMTM6
MTg6MjUgLTAwMDAJMS4yCkBAIC0yMjEsOSArMjIxLDExIEBACiAgICAgcG9wZF9pbiA9IHByb3Rf
bmV3KDAsIDApOwogICAgIHBvcGRfb3V0ID0gcHJvdF9uZXcoMSwgMSk7CiAKLSAgICB3aGlsZSAo
KG9wdCA9IGdldG9wdChhcmdjLCBhcmd2LCAiQzpzayIpKSAhPSBFT0YpIHsKKyAgICB3aGlsZSAo
KG9wdCA9IGdldG9wdChhcmdjLCBhcmd2LCAiQzpEc2siKSkgIT0gRU9GKSB7CiAJc3dpdGNoKG9w
dCkgewogCWNhc2UgJ0MnOiAvKiBhbHQgY29uZmlnIGZpbGUgLSBoYW5kbGVkIGJ5IHNlcnZpY2U6
Om1haW4oKSAqLworCSAgICBicmVhazsKKwljYXNlICdEJzogLyogZXh0LiBkZWJ1Z2dlciAtIGhh
bmRsZWQgYnkgc2VydmljZTo6bWFpbigpICovCiAJICAgIGJyZWFrOwogCiAJY2FzZSAncyc6IC8q
IHBvcDNzIChkbyBzdGFydHRscyByaWdodCBhd2F5KSAqLwpJbmRleDogaW1hcC9wcm94eWQuYwo9
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09ClJDUyBmaWxlOiAvaG9tZS9jdnMvZGViaWFuL2N5cnVzMjEtaW1hcGQvaW1hcC9w
cm94eWQuYyx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4xLjEuMTUKcmV0cmlldmluZyByZXZpc2lv
biAxLjIKZGlmZiAtdSAtcjEuMS4xLjE1IC1yMS4yCi0tLSBpbWFwL3Byb3h5ZC5jCTI4IEFwciAy
MDAyIDE4OjEyOjUwIC0wMDAwCTEuMS4xLjE1CisrKyBpbWFwL3Byb3h5ZC5jCTE0IE1heSAyMDAy
IDEzOjE4OjI1IC0wMDAwCTEuMgpAQCAtOTI3LDkgKzkyNywxMSBAQAogICAgIG1ib3hsaXN0X2lu
aXQoMCk7CiAgICAgbWJveGxpc3Rfb3BlbihOVUxMKTsKIAotICAgIHdoaWxlICgob3B0ID0gZ2V0
b3B0KGFyZ2MsIGFyZ3YsICJDOnNwOiIpKSAhPSBFT0YpIHsKKyAgICB3aGlsZSAoKG9wdCA9IGdl
dG9wdChhcmdjLCBhcmd2LCAiQzpEc3A6IikpICE9IEVPRikgewogCXN3aXRjaCAob3B0KSB7CiAJ
Y2FzZSAnQyc6IC8qIGFsdCBjb25maWcgZmlsZSAtIGhhbmRsZWQgYnkgc2VydmljZTo6bWFpbigp
ICovCisJICAgIGJyZWFrOworCWNhc2UgJ0QnOiAvKiBleHQuIGRlYnVnZ2VyIC0gaGFuZGxlZCBi
eSBzZXJ2aWNlOjptYWluKCkgKi8KIAkgICAgYnJlYWs7CiAJY2FzZSAncyc6IC8qIGltYXBzIChk
byBzdGFydHRscyByaWdodCBhd2F5KSAqLwogCSAgICBpbWFwcyA9IDE7CkluZGV4OiBtYW4vZnVk
LjgKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PQpSQ1MgZmlsZTogL2hvbWUvY3ZzL2RlYmlhbi9jeXJ1czIxLWltYXBkL21h
bi9mdWQuOCx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4yCnJldHJpZXZpbmcgcmV2aXNpb24gMS4z
CmRpZmYgLXUgLXIxLjIgLXIxLjMKLS0tIG1hbi9mdWQuOAkyMSBBcHIgMjAwMiAxNTozNToyMSAt
MDAwMAkxLjIKKysrIG1hbi9mdWQuOAkxNCBNYXkgMjAwMiAxMzoxODoyNSAtMDAwMAkxLjMKQEAg
LTQ3LDYgKzQ3LDkgQEAKIC5CIFwtQwogLkkgY29uZmlnLWZpbGUKIF0KK1sKKy5CIFwtRAorXQog
LlNIIERFU0NSSVBUSU9OCiAuQiBGVUQKIGlzIGEgbG9uZyBsaXZlZCBkYXRhZ3JhbSBkYWVtb24g
c3RhcnRlZCBmcm9tIGN5cm1hc3RlciB0aGF0IHByb3ZpZGVzCkBAIC03MCw2ICs3Myw5IEBACiAu
VFAKIC5CSSBcLUMgIiBjb25maWctZmlsZSIKIFJlYWQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZy
b20gXGZJY29uZmlnLWZpbGVcZlIuCisuVFAKKy5CSSBcLUQKK1J1biBleHRlcm5hbCBkZWJ1Z2dl
ciBzcGVjaWZpZWQgaW4gZGVidWdfY29tbWFuZC4KIC5TSCBGSUxFUwogLlRQCiAuQiAvZXRjL2lt
YXBkLmNvbmYKSW5kZXg6IG1hbi9pbWFwZC44Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9ob21lL2N2
cy9kZWJpYW4vY3lydXMyMS1pbWFwZC9tYW4vaW1hcGQuOCx2CnJldHJpZXZpbmcgcmV2aXNpb24g
MS4yCnJldHJpZXZpbmcgcmV2aXNpb24gMS4zCmRpZmYgLXUgLXIxLjIgLXIxLjMKLS0tIG1hbi9p
bWFwZC44CTI1IE5vdiAyMDAxIDE4OjI0OjI3IC0wMDAwCTEuMgorKysgbWFuL2ltYXBkLjgJMTQg
TWF5IDIwMDIgMTM6MTg6MjUgLTAwMDAJMS4zCkBAIC00OCw2ICs0OCw5IEBACiAuSSBjb25maWct
ZmlsZQogXQogWworLkIgXC1ECitdCitbCiAuQiBcLXMKIF0KIFsKQEAgLTEwNiw2ICsxMDksOSBA
QAogLlRQCiAuQkkgXC1DICIgY29uZmlnLWZpbGUiCiBSZWFkIGNvbmZpZ3VyYXRpb24gb3B0aW9u
cyBmcm9tIFxmSWNvbmZpZy1maWxlXGZSLgorLlRQCisuQkkgXC1ECitSdW4gZXh0ZXJuYWwgZGVi
dWdnZXIgc3BlY2lmaWVkIGluIGRlYnVnX2NvbW1hbmQuCiAuVFAKIC5CSSBcLXMKIFNlcnZlIElN
QVAgb3ZlciBTU0wgKGltYXBzKS4gIEFsbCBkYXRhIHRvIGFuZCBmcm9tCkluZGV4OiBtYW4vbG10
cGQuOAo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvaG9tZS9jdnMvZGViaWFuL2N5cnVzMjEtaW1hcGQv
bWFuL2xtdHBkLjgsdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMgpyZXRyaWV2aW5nIHJldmlzaW9u
IDEuMwpkaWZmIC11IC1yMS4yIC1yMS4zCi0tLSBtYW4vbG10cGQuOAkyNSBOb3YgMjAwMSAxODoy
NDoyNyAtMDAwMAkxLjIKKysrIG1hbi9sbXRwZC44CTE0IE1heSAyMDAyIDEzOjE4OjI1IC0wMDAw
CTEuMwpAQCAtNDgsNiArNDgsOSBAQAogLkkgY29uZmlnLWZpbGUKIF0KIFsKKy5CIFwtRAorXQor
WwogLkIgXC1hCiBdCiAuU0ggREVTQ1JJUFRJT04KQEAgLTY2LDYgKzY5LDkgQEAKIC5UUAogLkJJ
IFwtQyAiIGNvbmZpZy1maWxlIgogUmVhZCBjb25maWd1cmF0aW9uIG9wdGlvbnMgZnJvbSBcZklj
b25maWctZmlsZVxmUi4KKy5UUAorLkJJIFwtRAorUnVuIGV4dGVybmFsIGRlYnVnZ2VyIHNwZWNp
ZmllZCBpbiBkZWJ1Z19jb21tYW5kLgogLlRQCiAuQkkgXC1hCiBQcmVhdXRob3JpemUgY29ubmVj
dGlvbnMgaW5pdGlhdGVkIG9uIGFuIGludGVybmV0IHNvY2tldCwgaW5zdGVhZCBvZgpJbmRleDog
bWFuL25vdGlmeWQuOAo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvaG9tZS9jdnMvZGViaWFuL2N5cnVz
MjEtaW1hcGQvbWFuL25vdGlmeWQuOCx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4yCnJldHJpZXZp
bmcgcmV2aXNpb24gMS4zCmRpZmYgLXUgLXIxLjIgLXIxLjMKLS0tIG1hbi9ub3RpZnlkLjgJMjEg
QXByIDIwMDIgMTU6MzU6MjEgLTAwMDAJMS4yCisrKyBtYW4vbm90aWZ5ZC44CTE0IE1heSAyMDAy
IDEzOjE4OjI1IC0wMDAwCTEuMwpAQCAtNDcsNiArNDcsOSBAQAogLkIgXC1DCiAuSSBjb25maWct
ZmlsZQogXQorWworLkIgXC1ECitdCiAuU0ggREVTQ1JJUFRJT04KIC5CIE5vdGlmeWQKIGlzIGEg
ZGFlbW9uIHN0YXJ0ZWQgZnJvbSBjeXJtYXN0ZXIoOCkgdGhhdCBoYW5kbGVzIG5vdGlmaWNhdGlv
biByZXF1ZXN0cyBvbgpAQCAtNzIsNiArNzUsOSBAQAogLlRQCiAuQkkgXC1DICIgY29uZmlnLWZp
bGUiCiBSZWFkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmcm9tIFxmSWNvbmZpZy1maWxlXGZSLgor
LlRQCisuQkkgXC1ECitSdW4gZXh0ZXJuYWwgZGVidWdnZXIgc3BlY2lmaWVkIGluIGRlYnVnX2Nv
bW1hbmQuCiAuU0ggTk9USUZJQ0FUSU9OIE1FVEhPRFMKIC5UUAogLkIgbnVsbApJbmRleDogbWFu
L3BvcDNkLjgKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PQpSQ1MgZmlsZTogL2hvbWUvY3ZzL2RlYmlhbi9jeXJ1czIxLWlt
YXBkL21hbi9wb3AzZC44LHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjIKcmV0cmlldmluZyByZXZp
c2lvbiAxLjMKZGlmZiAtdSAtcjEuMiAtcjEuMwotLS0gbWFuL3BvcDNkLjgJMjUgTm92IDIwMDEg
MTg6MjQ6MjcgLTAwMDAJMS4yCisrKyBtYW4vcG9wM2QuOAkxNCBNYXkgMjAwMiAxMzoxODoyNSAt
MDAwMAkxLjMKQEAgLTQ4LDYgKzQ4LDkgQEAKIC5JIGNvbmZpZy1maWxlCiBdCiBbCisuQiBcLUQK
K10KK1sKIC5CIFwtcwogXQogWwpAQCAtODMsNiArODYsOSBAQAogLlRQCiAuQkkgXC1DICIgY29u
ZmlnLWZpbGUiCiBSZWFkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmcm9tIFxmSWNvbmZpZy1maWxl
XGZSLgorLlRQCisuQkkgXC1ECitSdW4gZXh0ZXJuYWwgZGVidWdnZXIgc3BlY2lmaWVkIGluIGRl
YnVnX2NvbW1hbmQuCiAuVFAKIC5CSSBcLXMKIFNlcnZlIFBPUDMgb3ZlciBTU0wgKHBvcDNzKS4g
IEFsbCBkYXRhIHRvIGFuZCBmcm9tCkluZGV4OiBtYXN0ZXIvc2VydmljZS5jCj09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K
UkNTIGZpbGU6IC9ob21lL2N2cy9kZWJpYW4vY3lydXMyMS1pbWFwZC9tYXN0ZXIvc2VydmljZS5j
LHYKcmV0cmlldmluZyByZXZpc2lvbiAxLjEuMS41CnJldHJpZXZpbmcgcmV2aXNpb24gMS4yCmRp
ZmYgLXUgLXIxLjEuMS41IC1yMS4yCi0tLSBtYXN0ZXIvc2VydmljZS5jCTggTWFyIDIwMDIgMTk6
MjY6MTcgLTAwMDAJMS4xLjEuNQorKysgbWFzdGVyL3NlcnZpY2UuYwkxNCBNYXkgMjAwMiAxMzox
ODoyNSAtMDAwMAkxLjIKQEAgLTEzOCw2ICsxMzgsNyBAQAogI2VuZGlmCiAKIGV4dGVybiB2b2lk
IGNvbmZpZ19pbml0KGNvbnN0IGNoYXIgKiwgY29uc3QgY2hhciAqKTsKK2V4dGVybiBjb25zdCBj
aGFyICpjb25maWdfZ2V0c3RyaW5nKGNvbnN0IGNoYXIgKmtleSwgY29uc3QgY2hhciAqZGVmKTsK
IGV4dGVybiBjb25zdCBjaGFyICpjb25maWdfZGlyOwogCiBzdGF0aWMgaW50IGdldGxvY2tmZChj
aGFyICpzZXJ2aWNlKQpAQCAtMjU3LDE0ICsyNTgsMTggQEAKICAgICBzdHJ1Y3QgcmVxdWVzdF9p
bmZvIHJlcXVlc3Q7CiAgICAgaW50IG9wdDsKICAgICBjaGFyICphbHRfY29uZmlnID0gTlVMTDsK
KyAgICBpbnQgY2FsbF9kZWJ1Z2dlciA9IDA7CiAgICAgaW50IHNvY3R5cGU7CiAgICAgaW50IHR5
cGVsZW4gPSBzaXplb2Yoc29jdHlwZSk7CiAKLSAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdj
LCBhcmd2LCAiQzoiKSkgIT0gRU9GKSB7CisgICAgd2hpbGUgKChvcHQgPSBnZXRvcHQoYXJnYywg
YXJndiwgIkM6RCIpKSAhPSBFT0YpIHsKIAlzd2l0Y2ggKG9wdCkgewogCWNhc2UgJ0MnOiAvKiBh
bHQgY29uZmlnIGZpbGUgKi8KIAkgICAgYWx0X2NvbmZpZyA9IG9wdGFyZzsKIAkgICAgYnJlYWs7
CisJY2FzZSAnRCc6IC8qIGFjdGl2YXRlIGV4dGVybmFsIGRlYnVnZ2VyICovCisJICAgIGNhbGxf
ZGVidWdnZXIgPSAxOworCSAgICBicmVhazsKIAlkZWZhdWx0OgogCSAgICBicmVhazsKIAl9CkBA
IC0yOTEsNiArMjk2LDE4IEBACiAgICAgfQogICAgIGNvbmZpZ19pbml0KGFsdF9jb25maWcsIHNl
cnZpY2UpOwogCisgICAgaWYgKGNhbGxfZGVidWdnZXIpIHsKKwljaGFyIGRlYnVnYnVmWzEwMjRd
OworCWludCByZXQ7CisJY29uc3QgY2hhciAqZGVidWdnZXIgPSBjb25maWdfZ2V0c3RyaW5nKCJk
ZWJ1Z19jb21tYW5kIiwgKGNoYXIgKikgMCk7CisJaWYgKGRlYnVnZ2VyKSB7CisJICAgIHNucHJp
bnRmKGRlYnVnYnVmLCBzaXplb2YoZGVidWdidWYpLCBkZWJ1Z2dlciwgCisJCSAgICAgYXJndlsw
XSwgZ2V0cGlkKCksIHNlcnZpY2UpOworCSAgICBzeXNsb2coTE9HX0RFQlVHLCAicnVubmluZyBl
eHRlcm5hbCBkZWJ1Z2dlcjogJXMiLCBkZWJ1Z2J1Zik7CisJICAgIHJldCA9IHN5c3RlbShkZWJ1
Z2J1Zik7IC8qIHJ1biBkZWJ1Z2dlciAqLworCSAgICBzeXNsb2coTE9HX0RFQlVHLCAiZGVidWdn
ZXIgcmV0dXJuZWQgZXhpdCBzdGF0dXM6ICVkIiwgcmV0KTsKKwl9CisgICAgfQogICAgIHN5c2xv
ZyhMT0dfREVCVUcsICJleGVjdXRlZCIpOwogCiAgICAgLyogc2V0IGNsb3NlIG9uIGV4ZWMgKi8K
SW5kZXg6IG5vdGlmeWQvbm90aWZ5ZC5jCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9ob21lL2N2cy9k
ZWJpYW4vY3lydXMyMS1pbWFwZC9ub3RpZnlkL25vdGlmeWQuYyx2CnJldHJpZXZpbmcgcmV2aXNp
b24gMS4xLjEuNgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMgpkaWZmIC11IC1yMS4xLjEuNiAtcjEu
MgotLS0gbm90aWZ5ZC9ub3RpZnlkLmMJOCBBcHIgMjAwMiAyMDo0OToyNiAtMDAwMAkxLjEuMS42
CisrKyBub3RpZnlkL25vdGlmeWQuYwkxNCBNYXkgMjAwMiAxMzoxODoyNSAtMDAwMAkxLjIKQEAg
LTIxNSw5ICsyMTUsMTEgQEAKICAgICBjb25maWdfY2hhbmdlaWRlbnQoIm5vdGlmeWQiKTsKICAg
ICBpZiAoZ2V0ZXVpZCgpID09IDApIGZhdGFsKCJtdXN0IHJ1biBhcyB0aGUgQ3lydXMgdXNlciIs
IEVDX1VTQUdFKTsKIAotICAgIHdoaWxlICgob3B0ID0gZ2V0b3B0KGFyZ2MsIGFyZ3YsICJDOm06
IikpICE9IEVPRikgeworICAgIHdoaWxlICgob3B0ID0gZ2V0b3B0KGFyZ2MsIGFyZ3YsICJDOkRt
OiIpKSAhPSBFT0YpIHsKIAlzd2l0Y2gob3B0KSB7CiAJY2FzZSAnQyc6IC8qIGFsdCBjb25maWcg
ZmlsZSAtIGhhbmRsZWQgYnkgc2VydmljZTo6bWFpbigpICovCisJICAgIGJyZWFrOworCWNhc2Ug
J0QnOiAvKiBleHQgZGVidWdnZXIgLSBoYW5kbGVkIGJ5IHNlcnZpY2U6Om1haW4oKSAqLwogCSAg
ICBicmVhazsKIAogCWNhc2UgJ20nOgo=
</data>        

          </attachment>
      

    </bug>

</bugzilla>