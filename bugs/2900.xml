<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>2900</bug_id>
          
          <creation_ts>2006-12-14 05:58 EDT</creation_ts>
          <short_desc>postgresql auth mechanism</short_desc>
          <delta_ts>2008-01-23 16:35:31 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus SASL</product>
          <component>saslauthd</component>
          <version>2.1.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>other</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Kwiatek">kwiatek@kwiatek.eu.org</reporter>
          <assigned_to name="Ken Murchison">murch@andrew.cmu.edu</assigned_to>
          
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Kwiatek">kwiatek@kwiatek.eu.org</who>
            <bug_when>2006-12-14 05:58:27 EDT</bug_when>
            <thetext>This two files provides pgsql auth mechanism for saslauthd:
They need to be putted in saslauthd directory, and require manual changes in
Makefile, saslauthd.c files.

auth_pgsql.h

#ifndef __AUTH_PGSQL_H
#define __AUTH_PGSQL_H

char *auth_pgsql(const char *, const char *, const char *, const char *);
int auth_pgsql_init(void);

#include &lt;libpq-fe.h&gt;


#define PGSQL_OK 0
#define PGSQL_FAIL -1
#define PGSQL_NOMEM -2
#define PGSQL_RETRY -3
#define PGSQL_NOT_GROUP_MEMBER -4
#define PGSQL_INVALID_PASSWORD -5
#define PGSQL_USER_NOT_FOUND -6
#define PGSQL_BIND_FAIL -7
#define PGSQL_CONNECT_FAIL -8


#define PGSQL_NOT_CONNECT 1
#define PGSQL_CONNECT 2

#define PGSQL_BUF_LEN 256

typedef struct pgsql_conf {
        char    dbhost[PGSQL_BUF_LEN];
        char    dbport[PGSQL_BUF_LEN];
        char    dbuser[PGSQL_BUF_LEN];
        char    dbpass[PGSQL_BUF_LEN];
        char    database[PGSQL_BUF_LEN];
        char    select[PGSQL_BUF_LEN];
        int     verbose;
} PGSQL_CONF;


typedef struct pgsql {
        PGconn          *ld;
        char            status;
        PGSQL_CONF      *conf;
} PGSQL;


#endif


auth_pgsql.c:

#ifdef __GNUC__
#ident &quot;$Id: auth_pgsql.c &quot;
#endif

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;syslog.h&gt;
#include &lt;ctype.h&gt;
#include &quot;mechanisms.h&quot;

#ifdef HAVE_UNISTD_H
#include &lt;unistd.h&gt;
#endif

#ifdef HAVE_CRYPT_H
#include &lt;crypt.h&gt;
#endif

#ifdef HAVE_OPENSSL
#include &lt;openssl/evp.h&gt;
#include &lt;openssl/des.h&gt;
#endif

#ifdef HAVE_PGSQL
#include &quot;auth_pgsql.h&quot;
#endif

typedef struct pgsql_hash_rock {
        const char *mda;
        int salted;
} PGSQL_HASH_ROCK;

typedef struct pgsql_password_scheme {
        char *hash;
        int (*check) (const char *cred, const char *passwd, void *rock);
        void *rock;
} PGSQL_PASSWORD_SCHEME;

static int pgsql_check_hashed(const char *hash, const char *passwd, void *rock);
static int pgsql_check_crypt(const char *hash,const char *passwd,void *rock
__attribute__((unused)));
int pgsql_init(const char *configfile, PGSQL **ret);
static int pgsql_config(const char *configfile,PGSQL_CONF **ret);
static int pgsql_config_read(PGSQL_CONF *conf, const char *configfile);
static int pgsql_check_password( const char *hash,const char *passwd,void *rock
__attribute__((unused)));
static int pgsql_verify_password(PGSQL *pgsql, const char *user,const char
*service,const char *realm,const char *password);

static PGSQL_HASH_ROCK hash_rock[] = {
#ifdef HAVE_OPENSSL
        { &quot;md5&quot;, 0 },
        { &quot;md5&quot;, 1 },
        { &quot;sha&quot;, 0 },
        { &quot;sha&quot;, 1 },
        { &quot;sha1&quot;, 0 },
        { &quot;sha1&quot;, 1 }
#endif
};

static PGSQL_PASSWORD_SCHEME password_scheme[] = {
        { &quot;{CRYPT}&quot;, pgsql_check_crypt, NULL },
        { &quot;{UNIX}&quot;, pgsql_check_crypt, NULL },
#ifdef HAVE_OPENSSL
        { &quot;{MD5}&quot;, pgsql_check_hashed, &amp;hash_rock[0] },
        { &quot;{SMD5}&quot;, pgsql_check_hashed, &amp;hash_rock[1] },
        { &quot;{SHA}&quot;, pgsql_check_hashed, &amp;hash_rock[2] },
        { &quot;{SSHA}&quot;, pgsql_check_hashed, &amp;hash_rock[3] },
        { &quot;{SHA1}&quot;, pgsql_check_hashed, &amp;hash_rock[4] },
        { &quot;{SSH1A}&quot;, pgsql_check_hashed, &amp;hash_rock[5] },
#endif
        { NULL, NULL, NULL }
};



/* FUNCTION: auth_ldap */

#ifdef AUTH_PGSQL

#define ISSET(x)  ((x != NULL) &amp;&amp; (*(x) != &apos;\0&apos;))
#define EMPTY(x)  ((x == NULL) || (*(x) == &apos;\0&apos;))

#include &quot;globals.h&quot;

const char *SASLAUTHD_CONF_FILE = SASLAUTHD_CONF_FILE_DEFAULT;

int pgsql_init(const char *configfile, PGSQL **ret) {
PGSQL   *pgsql;
int     rc;

pgsql=*ret;

if (pgsql!=NULL) { return PGSQL_OK; };

pgsql=(PGSQL *)malloc(sizeof(PGSQL));
if (pgsql==NULL) return PGSQL_NOMEM;

pgsql-&gt;status=PGSQL_NOT_CONNECT;
pgsql-&gt;ld=NULL;
rc = pgsql_config(configfile,&amp;pgsql-&gt;conf);
if (rc!=0) {
        free(pgsql);
        return rc;
        };
#ifdef HAVE_OPENSSL
        OpenSSL_add_all_digests();
#endif

*ret=pgsql;
return PGSQL_OK;
};

static int pgsql_config(const char *configfile,PGSQL_CONF **ret)
{
PGSQL_CONF      *conf;
int             rc=0;

conf=malloc(sizeof(PGSQL_CONF));
if (conf==NULL) { return PGSQL_NOMEM; };

memset(conf,0,sizeof(PGSQL_CONF));
strlcpy(conf-&gt;dbhost,&quot;localhost&quot;,PGSQL_BUF_LEN);
strlcpy(conf-&gt;select,&quot;select password from users where uid=&apos;%s&apos;&quot;,PGSQL_BUF_LEN);
conf-&gt;verbose=0;


rc = pgsql_config_read(conf, configfile);
if (rc!=0) {
        if (conf!=NULL)
                {
                memset(conf,0,sizeof(PGSQL_CONF));
                free(conf);
                }
        return rc;
        };
*ret=conf;
return PGSQL_OK;
};

static int pgsql_config_read(PGSQL_CONF *conf, const char *configfile)
{
FILE    *in;
int     lineno=0;
char    buf[2048];
char    *p,*key;

static int pgsql_config_int(const char *val)
{
    if (!val) return 0;
    if (!isdigit((int) *val) &amp;&amp; (*val != &apos;-&apos; || !isdigit((int) val[1]))) return 0;
    return atoi(val);
}

in = fopen(configfile, &quot;r&quot;);
if (!in) {
        syslog(LOG_ERR|LOG_LOCAL5,&quot;Could not open saslauthd config file: %s
(%m)&quot;,configfile);
        return -1;
        };

while (fgets(buf, sizeof(buf), in)) {
        lineno++;

        if (buf[strlen(buf)-1] == &apos;\n&apos;) buf[strlen(buf)-1] = &apos;\0&apos;;
        for (p = buf; *p &amp;&amp; isspace((int) *p); p++);
                if (!*p || *p == &apos;#&apos;)  continue;

        key=p;
        while (*p &amp;&amp; (isalnum((int) *p) || *p == &apos;-&apos; || *p == &apos;_&apos;)) {
                if (isupper((int) *p))
                        *p = tolower(*p);
                p++; };

        if (*p!=&apos;:&apos;) return -1;
        *p++ = &apos;\0&apos;;

        while (*p &amp;&amp; isspace((int) *p)) p++;
        if (!*p) return -1;

        if (!strcasecmp(key, &quot;pgsql_server&quot;))
                strlcpy(conf-&gt;dbhost, p, PGSQL_BUF_LEN);
        else if (!strcasecmp(key, &quot;pgsql_port&quot;))
                strlcpy(conf-&gt;dbport, p, PGSQL_BUF_LEN);
        else if (!strcasecmp(key, &quot;pgsql_username&quot;))
                strlcpy(conf-&gt;dbuser, p, PGSQL_BUF_LEN);
        else if (!strcasecmp(key, &quot;pgsql_password&quot;))
                strlcpy(conf-&gt;dbpass, p, PGSQL_BUF_LEN);
        else if (!strcasecmp(key, &quot;pgsql_database&quot;))
                strlcpy(conf-&gt;database, p, PGSQL_BUF_LEN);
        else if (!strcasecmp(key, &quot;pgsql_select&quot;))
                strlcpy(conf-&gt;select, p, PGSQL_BUF_LEN);
        else if (!strcasecmp(key, &quot;pgsql_verbose&quot;))
                conf-&gt;verbose=pgsql_config_int(p);
        };
fclose(in);

return PGSQL_OK;
};

char *pgsql_error(
    const int errno)
{

    switch (errno) {
        case PGSQL_OK:
            return &quot;Success&quot;;
        case PGSQL_FAIL:
            return &quot;Generic error&quot;;
        case PGSQL_NOMEM:
            return &quot;Out of memory&quot;;
        case PGSQL_RETRY:
            return &quot;Retry condition (pgsql server connection reset or broken)&quot;;
        case PGSQL_NOT_GROUP_MEMBER:
            return &quot;Group member check failed&quot;;
        case PGSQL_INVALID_PASSWORD:
            return &quot;Invalid password&quot;;
        case PGSQL_USER_NOT_FOUND:
            return &quot;User not found&quot;;
        case PGSQL_CONNECT_FAIL:
            return &quot;Cannot connect to pgsql server (configuration error)&quot;;
        default:
            return &quot;Unknow error&quot;;
    }
}

static int pgsql_check_crypt(const char *hash,const char *passwd,void *rock
__attribute__((unused)))
{
char *cred;

if (strlen(hash) &lt; 2 ) return PGSQL_INVALID_PASSWORD;

cred = crypt(passwd, hash);
if (EMPTY(cred)) return PGSQL_INVALID_PASSWORD;
return strcmp(hash, cred) ? PGSQL_INVALID_PASSWORD : PGSQL_OK;
}

#ifdef HAVE_OPENSSL

static int pgsql_check_hashed(const char *hash, const char *passwd, void *rock)
{
int             rc, dlen;
PGSQL_HASH_ROCK *hrock = (PGSQL_HASH_ROCK *) rock;
EVP_MD_CTX      mdctx;
const EVP_MD    *md;
unsigned char   digest[EVP_MAX_MD_SIZE];
char            dg[256];
char           
ch[16]={&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos; };
int             i;

md = EVP_get_digestbyname(hrock-&gt;mda);
if (!md) {
        syslog(LOG_ERR|LOG_LOCAL5,&quot;unknown digest type[%s]&quot;, hrock-&gt;mda);
        return PGSQL_FAIL;
        };

EVP_MD_CTX_init(&amp;mdctx);
EVP_DigestInit_ex(&amp;mdctx, md, NULL);
EVP_DigestUpdate(&amp;mdctx,passwd,strlen(passwd));
EVP_DigestFinal_ex(&amp;mdctx, digest, &amp;dlen);
EVP_MD_CTX_cleanup(&amp;mdctx);

rc=0;
for(i = 0; i &lt; dlen; i++)
        {
        dg[rc]=ch[(digest[i] &amp; 0xf0)&gt;&gt;4]; rc ++;
        dg[rc]=ch[(digest[i] &amp; 0xf)]; rc ++;
        };
dg[rc]=&apos;\0&apos;;

rc = strncmp(dg, (char *)hash, rc);
return rc ? PGSQL_INVALID_PASSWORD : PGSQL_OK;
}

#endif


static int pgsql_verify_password(PGSQL *pgsql, const char *user,const char
*service,const char *realm,const char *password)
{
int             i, hlen;
PGresult        *res;
char            select[2048];
char            *getp;

if (EMPTY(password)) return PGSQL_INVALID_PASSWORD;

snprintf(select,2048,pgsql-&gt;conf-&gt;select,user);

res=PQexec(pgsql-&gt;ld,select);
if (!res || PQresultStatus(res)!=PGRES_TUPLES_OK) {
        syslog(LOG_ERR|LOG_LOCAL5,&quot;cant exec pgsql select:
%s&quot;,PQerrorMessage(pgsql-&gt;ld));
        PQclear(res);
        return PGSQL_FAIL;
        };

if (PQntuples(res)!=1) {
        syslog(LOG_ERR|LOG_LOCAL5,&quot;no single entry for user [%s]&quot;,user);
        PQclear(res);
        return PGSQL_USER_NOT_FOUND;
        };
getp=PQgetvalue(res,0,0);

i=pgsql_check_password(getp,password,NULL);
PQclear(res);
return i;
}


static int pgsql_check_password( const char *hash,const char *passwd,void *rock
__attribute__((unused)))
{
int     i,hlen;

if (EMPTY(hash))
        return PGSQL_INVALID_PASSWORD;

if (EMPTY(passwd))
        return PGSQL_INVALID_PASSWORD;

for (i = 0; password_scheme[i].hash != NULL; i++) {
        hlen = strlen(password_scheme[i].hash);
        if (!strncasecmp(password_scheme[i].hash, hash, hlen)) {
                if (password_scheme[i].check) {
                        return (password_scheme[i].check)(hash+hlen, passwd,
password_scheme[i].rock);
                        }
                return PGSQL_FAIL;
                }
        }
        return strcmp(hash, passwd) ? PGSQL_INVALID_PASSWORD : PGSQL_OK;
};

PGconn *pgsql_connect(PGSQL *pgsql)
{
PGconn  *cn;

cn=PQsetdbLogin(
pgsql-&gt;conf-&gt;dbhost!=NULL?pgsql-&gt;conf-&gt;dbhost:NULL,
pgsql-&gt;conf-&gt;dbport!=NULL?pgsql-&gt;conf-&gt;dbport:NULL,
NULL,NULL,
pgsql-&gt;conf-&gt;database!=NULL?pgsql-&gt;conf-&gt;database:NULL,
pgsql-&gt;conf-&gt;dbuser!=NULL?pgsql-&gt;conf-&gt;dbuser:NULL,
pgsql-&gt;conf-&gt;dbpass!=NULL?pgsql-&gt;conf-&gt;dbpass:NULL );

if (PQstatus(cn)==CONNECTION_BAD)
        {
        PQfinish(cn);
        return NULL;
        };
return cn;
};

int pgsql_authenticate(PGSQL *pgsql,const char *user,const char *service,const
char *realm,const char *password) {
int     i,rc;
int     retry=2;


if (pgsql==NULL) {
        syslog(LOG_ERR|LOG_LOCAL5,&quot;pgsql_init did not run.&quot;);
        return PGSQL_FAIL;
        };


if (pgsql-&gt;ld==NULL) {
        PGconn  *conn;
        conn=pgsql_connect(pgsql);
        pgsql-&gt;ld=conn;
        pgsql-&gt;status=PGSQL_CONNECT;
        };

if (pgsql-&gt;ld==NULL) {
        syslog(LOG_ERR|LOG_LOCAL5,&quot;Cant connect to psql server&quot;);
        return PGSQL_CONNECT_FAIL;
        };

for (;retry &gt; 0; retry--) {
        rc=pgsql_verify_password(pgsql,user,service,realm,password);
        switch(rc)  {
                case 0:
                        return PGSQL_OK;
                case 1:
                        if (retry&gt;1) {
                                syslog(LOG_INFO|LOG_LOCAL5,&quot;Retrying
authentication&quot;);
                                break;
                        }
                default:
                        syslog(LOG_DEBUG|LOG_LOCAL5,
                        &quot;Authentication failed for %s%s%s: %s(%d)&quot;,
                        user,
                        (ISSET(realm) ? &quot;/&quot; : &quot;&quot;),
                        (ISSET(realm) ? realm : &quot;&quot;),
                        pgsql_error(rc),
                        rc);
                        return PGSQL_FAIL;
                };
        };

};

// end of authentication

char *auth_pgsql( const char *login, const char *password, const char
*service,const char *realm )
{

static PGSQL *pgsql = NULL;
int     rc=0;

if (pgsql==NULL) {
        rc=pgsql_init(SASLAUTHD_CONF_FILE, &amp;pgsql);
        if (rc!=0) {
                pgsql=NULL;
                RETURN(&quot;NO&quot;);
                };
        };

rc=pgsql_authenticate(pgsql,login,service,realm,password);
if (rc==0) {
        RETURN(&quot;OK&quot;);
} else {
        RETURN(&quot;NO&quot;);
}

};

int auth_pgsql_init () {
struct addrinfo hints;
int err;
char *c;
if (mech_option != NULL) {
        SASLAUTHD_CONF_FILE = mech_option;
        }
return 0;
}




for proper compile in saslauthd.h need to put:

#define HAVE_PGSQL
#define AUTH_PGSQL


For more questions please ask.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2008-01-23 16:35:31 EDT</bug_when>
            <thetext>Why not just use the existing SQL auxprop plugin?  It supports ALL SASL mechanisms, not just plaintext authentication</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>