<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>2971</bug_id>
          
          <creation_ts>2007-06-26 17:39 EDT</creation_ts>
          <short_desc>et issues</short_desc>
          <delta_ts>2010-10-25 18:46:42 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>Distribution</component>
          <version>2.3.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P5</priority>
          <bug_severity>blocker</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Wes Craig">wes@umich.edu</reporter>
          <assigned_to name="Ken Murchison">murch@andrew.cmu.edu</assigned_to>
          
          

      

      

      
          <long_desc isprivate="0">
            <who name="Wes Craig">wes@umich.edu</who>
            <bug_when>2007-06-26 17:39:17 EDT</bug_when>
            <thetext>There are several problems with the way et is used in cyrus imapd.  First, compiled versions of many .et files (mupdate_err.c for example) are included in the distribution.  It&apos;s not clear which version of compile_et produced these files.  Unless the target platform uses the same version, the build will likely have errors like:

sieve_err.h:19: warning: &quot;struct et_list&quot; declared inside parameter list
sieve_err.h:19: warning: its scope is only this definition or declaration, which is probably not what you want

My solution is to ./configure and then &quot;make distclean&quot;.  Second, &quot;make distclean&quot; doesn&apos;t remove sieve_err.[ch].  My solution is to remove sieve_err.[ch] manually.  Third, if configuring with something which requires com_err (kerberos for example), the combination of -I.. and the included &quot;et&quot; directory produces errors like:

/usr/local/heimdal-k5/include/asn1_err.h:22: warning: &quot;struct et_list&quot; declared inside parameter list
/usr/local/heimdal-k5/include/asn1_err.h:22: warning: its scope is only this definition or declaration, which is probably not what you want

My solution is to rename the included et directory, but distributing the et directory as some other name would be a superior solution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2007-10-10 17:26:00 EDT</bug_when>
            <thetext>I fixed the distclean issue with sieve_err.[ch]</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2007-10-10 18:11:19 EDT</bug_when>
            <thetext>Should we not include any of the *_err.[ch] files in the distro, since we include et/ for systems that don&apos;t already have it?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Wes Craig">wes@umich.edu</who>
            <bug_when>2007-10-10 21:31:26 EDT</bug_when>
            <thetext>We should not include any of the *_err.[ch] files, because if there&apos;s a difference between the included ones and the version of com_err that is installed on the system, there will be compile problem.

I&apos;m open to suggestions on how to fix the -I.. &amp; et issue.  Renaming et seems pretty obvious to me, but maybe there&apos;s an alternative.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2007-10-10 21:42:20 EDT</bug_when>
            <thetext>So, would the plan be to rename it to something other than &quot;et&quot; (such as &quot;_et_&quot;) and if the configure options determine that we need to use the included copy, we rename it back to &quot;et&quot;?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Wes Craig">wes@umich.edu</who>
            <bug_when>2007-10-15 15:21:26 EDT</bug_when>
            <thetext>My inclination would be to move et down a directory and then control whether that directory is searched for include files.  For example, I would move et to comerr/et, and then I would add @COMERRCFLAG@ to the various places CFLAGS are used.

Another option might be to distribute et/com_err.h as et/com_err.h.in (or whatever) and use the configure process to make com_err.h.

The method you describe is completely credible, tho, in my opinion.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2007-10-17 16:10:24 EDT</bug_when>
            <thetext>I moved et/ to com_err/et/ with the associated changes to configure.in and the appropriate Makefile.in and Makefile.PL.  Please test.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>