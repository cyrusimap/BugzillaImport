<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>1272</bug_id>
          
          <creation_ts>2002-06-18 23:08 EDT</creation_ts>
          <short_desc>Not enough GSSAPI error reporting</short_desc>
          <delta_ts>2010-10-25 18:46:29 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus SASL</product>
          <component>gssapi</component>
          <version>2.1.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P2</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ken Hornstein">kenh@cmf.nrl.navy.mil</reporter>
          <assigned_to name="Rob Siemborski">rjs3@andrew.cmu.edu</assigned_to>
          <cc>william.fiveash@sun.com</cc>
          

      

      

      
          <long_desc isprivate="0">
            <who name="Ken Hornstein">kenh@cmf.nrl.navy.mil</who>
            <bug_when>2002-06-18 23:08:04 EDT</bug_when>
            <thetext>During some application work with the gssapi mechanism, I noticed that the
&quot;real&quot; GSSAPI error for gss_accept_sec_context was being hidden, and that was
the point where I was getting an error (but I couldn&apos;t find out what the real
error was).  When I looked back over the ChangeLog, I found this was done on
purpose!

Could the previous behavior please be reinstated?  That would seem to be the
critical call where the &quot;real&quot; Kerberos error is going to happen, and in my
experience that&apos;s where we need the full error reporting.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Will Fiveash">william.fiveash@sun.com</who>
            <bug_when>2003-07-22 20:21:53 EDT</bug_when>
            <thetext>In addition to the problem documented in this bug, a co-worker of mine
discovered that the GSSAPI SASL mech plugin isn&apos;t passing the GSS-API error
token back to the calling server app.  What should happen is that the GSSAPI
mech should pass the GSS-API error token back to the server app which in turn
should send that back to the client so the client can generate a more meaningful
error message.  The client should pass this error token to
gss_client_mech_step() which should pass this error token to
gss_init_sec_context() which will return the proper major and minor status back.
Of course the original bug described in this bug report needs to be fixed to
prevent the minor code from being overwritten before it is properly reported.

Note, the Cyrus SASL sample server program need to be adjusted to pass the error
token back to the sample client.  The same is true for the sample client.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2003-07-22 20:24:40 EDT</bug_when>
            <thetext>I believe what you are describing is a totally sepearate problem/bug, and given
the (your?) post to ietf-sasl today, I&apos;m inclined to wait for the spec to change.

This bug is referring only to the local logging/error detail reporting, not to
anything with regards to what is sent to the network.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Nicolas Williams">Nicolas.Williams@sun.com</who>
            <bug_when>2003-07-22 21:21:31 EDT</bug_when>
            <thetext>The spec specifies when to send output tokens and neither of the two
situations where the spec says that the application should send any
output token involves GSS-API errors.

That said, it is clear that: a) a bug in the spec, b) sending the
error token should not break any peer since the peer would be awaiting
a token. 

NOTE: I know relatively little about SASL; I imagine that it&apos;s
      possible that sending the error token may not be possible
      without additional changes to SASL APIs.  However, looking at
      the stepper functions I do believe the change is compatible.

Other protocols that use the GSS-API have had this &quot;what-error-token?&quot;
problem before: RPCSEC_GSS, SPNEGO, the SSHv2 GSS I-D (earlier versions).
The consensus is that these are all fixed by sending the error token.

All that said, the SASL WG will have to consider this problem and reach
some consensus on the issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2003-07-22 21:24:35 EDT</bug_when>
            <thetext>And its not appropriate for us to address the issue until they do.

As it is, I&apos;m unclear that sending the error token won&apos;t break client
implementations, since SASL relies on the protocol to indicate failure, not any
internal token passing.

I&apos;ll raise the issue on the ietf-sasl list if I can get my thoughts straightened
out.

In any case, this is *not* the appropriate bug to address this issue, nor do I
intend to address it until the spec does.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Will Fiveash">william.fiveash@sun.com</who>
            <bug_when>2003-07-22 21:28:56 EDT</bug_when>
            <thetext>I understand your position regarding error token handling.  Should a new bug be
opened for this?

BTW, I&apos;ve returned this bug&apos;s summary to it&apos;s original wording.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2003-07-22 21:30:02 EDT</bug_when>
            <thetext>Sure.  But, like I said, it&apos;ll sit here until the SASL WG makes a decision on
how to deal with the error tokens.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2003-07-25 16:28:37 EDT</bug_when>
            <thetext>committed changes from will.

I&apos;m going to close this unless there are specific other patches that are needed.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>