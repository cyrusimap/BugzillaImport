<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>390</bug_id>
          
          <creation_ts>2001-01-18 01:53 EDT</creation_ts>
          <short_desc>possible heap corruption in lmtpd</short_desc>
          <delta_ts>2010-10-18 12:42:49 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>IMAP</component>
          <version>2.0.x</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P2</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</reporter>
          <assigned_to name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</assigned_to>
          
          

      

      

      
          <long_desc isprivate="0">
            <who name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</who>
            <bug_when>2001-01-18 01:53:22 EDT</bug_when>
            <thetext>following crash found on mail1, backtrace included below.  this looks like (most
likely) a double free() problem, possible a scribbling out-of-bounds error.
this looks like a bitch to debug without being able to reproduce it. it&apos;s also a
more serious problem the longer we run lmtpd processes.


#0  0xfee45d2c in realfree () from /usr/lib/libc.so.1
#1  0xfee4660c in cleanfree () from /usr/lib/libc.so.1
#2  0xfee45794 in _malloc_unlocked () from /usr/lib/libc.so.1
#3  0xfee4568c in malloc () from /usr/lib/libc.so.1
#4  0x46f90 in xstrdup (
    str=0xffbee762 &quot;&lt;bounce-riddles-9208@riddlesandmore.net&gt; BODY=8BITMIME&quot;)
    at xmalloc.c:56
#5  0x1acec in parseaddr (
    s=0xffbee762 &quot;&lt;bounce-riddles-9208@riddlesandmore.net&gt; BODY=8BITMIME&quot;)
    at lmtpengine.c:456
#6  0x1c7c8 in lmtpmode (func=0xdc240, pin=0xf3238, pout=0xf42a0, fd=-4266152)
    at lmtpengine.c:1242
#7  0x19ff8 in service_main (argc=1, argv=0xffbef904, envp=0xffbef90c)
    at lmtpd.c:333
#8  0x17a64 in main (argc=1, argv=0xffbef904, envp=0xffbef90c) at service.c:230</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">ken@oceana.com</who>
            <bug_when>2001-07-06 21:54:06 EDT</bug_when>
            <thetext>possibly fixed in v1.26 of lmtpengine.c</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</who>
            <bug_when>2001-08-01 16:15:00 EDT</bug_when>
            <thetext>i&apos;m fairly confident that the majority of these cores i was seeing was due to 
illegal string manipulation in the sieve library.

lmtpd&apos;s header cache was being passed into libsieve, which would then change a 
pointer.  lmtpd would later try to free this pointer, with the obvious 
disasterous results.
</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>