<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3678</bug_id>
          
          <creation_ts>2012-04-15 10:48 EDT</creation_ts>
          <short_desc>include perl/ in automake</short_desc>
          <delta_ts>2012-04-23 07:32:34 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>Distribution</component>
          <version>2.5.x (next)</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>2.5-next</target_milestone>
          
          <blocked>3669</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</reporter>
          <assigned_to name="Dilyan Palauzov">dilyan.palauzov@aegee.org</assigned_to>
          <cc>gnb@fastmail.fm</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2012-04-15 10:48:45 EDT</bug_when>
            <thetext>This is the general task of including perl/ into the new automake before this can be merged back in with master (or Jenkins will fail miserably).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Dilyan Palauzov">dilyan.palauzov@aegee.org</who>
            <bug_when>2012-04-15 13:40:35 EDT</bug_when>
            <thetext>I do not get what the problem is.  With autoconf/Makefile.in, the perl/Makefiles generated from perl/sieve/imap/Makefile.pl perl/sieve/imap/Makefile, then it was switched to that directory and make was run.

With Automake, the perl/sieve/imap/Makefile is generated again from perl/sieve/imap/Makefile.PL (at least on my system it works, except when cyrus-imapd is configured in a directory, different from the source directory, however this is problem of perl&apos;s MakeMaker, not Automake).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2012-04-15 18:16:15 EDT</bug_when>
            <thetext>You&apos;re right, there does not seem to be a problem with the perl/ SUBDIR - I logged the ticket to track we wanted to consider changing things up in there, as far as how it is built.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-04-15 20:14:15 EDT</bug_when>
            <thetext>The way in which symbols chosen at configure time are passed down to the Makefiles built from Makefile.PLs is a truly awful hack and I&apos;d be very happy to see it cleaned up.  perl/Makefile.in now passes down *twelve* separate variables through the environment when running the Makefile.PLs.  All of those should expanded once at configure time.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Dilyan Palauzov">dilyan.palauzov@aegee.org</who>
            <bug_when>2012-04-16 03:19:33 EDT</bug_when>
            <thetext>Until commit 3aa0ad0287f029e (8th August 2000), Makefile was built from Makefile.PL at configure time.  Then that commit shifted the work to build-time.

diff --git a/configure.in b/configure.in
index fe8e71f..3ce4f38 100644
--- a/configure.in
+++ b/configure.in

@@ -727,13 +727,13 @@ IMAP_LIBS=&quot;${LIB_SASL} ${LIBS}&quot;
 AC_SUBST(IMAP_COM_ERR_LIBS)
 AC_SUBST(IMAP_LIBS)

-AC_OUTPUT_COMMANDS([
-  if test &quot;$with_perl&quot; != &quot;no&quot;; then
-    (cd perl/sieve/acap; $perl Makefile.PL PREFIX=$prefix)
-    (cd perl/sieve/managesieve; $perl Makefile.PL PREFIX=$prefix)
-    (cd perl/imap; $perl Makefile.PL PREFIX=$prefix)
-  fi
-], perl=$PERL; with_perl=$with_perl; prefix=$prefix; SASL_LIB=&quot;$LIB_SASL&quot;; SASL_INC=&quot;$SASLFLAGS&quot;; export SASL_LIB SASL_INC)
+dnl AC_OUTPUT_COMMANDS([
+dnl   if test &quot;$with_perl&quot; != &quot;no&quot;; then
+dnl     (cd perl/sieve/acap; $perl Makefile.PL PREFIX=$prefix)
+dnl     (cd perl/sieve/managesieve; $perl Makefile.PL PREFIX=$prefix)
+dnl     (cd perl/imap; $perl Makefile.PL PREFIX=$prefix)
+dnl   fi
+dnl ], perl=$PERL; with_perl=$with_perl; prefix=$prefix; SASL_LIB=&quot;$LIB_SASL&quot;; SASL_INC=&quot;$SASLFLAGS&quot;; export SASL_LIB SASL_INC)
 AC_SUBST(PERL_SUBDIRS)

 dnl make sure that Makefile is the last thing output</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Dilyan Palauzov">dilyan.palauzov@aegee.org</who>
            <bug_when>2012-04-16 04:25:00 EDT</bug_when>
            <thetext>Probably the reason to have the generation of Makefile from Makefile.PL during build time, is to be able to handle &quot;make clean&quot; -- it deletes the Makefile .  It the Makefile were generated during configure time, a &quot;make&quot; after &quot;make clean&quot; cannot build anymore in perl/, as there is no Makefile and make cannot create the Makefile from Makefile.PL at build time.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-04-16 05:09:39 EDT</bug_when>
            <thetext>If so, then the &apos;clean&apos; target is broken.  The Makefile should only be deleted for &apos;distclean&apos;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2012-04-16 06:27:00 EDT</bug_when>
            <thetext>(In reply to comment #5)
&gt; Probably the reason to have the generation of Makefile from Makefile.PL during
&gt; build time, is to be able to handle &quot;make clean&quot; -- it deletes the Makefile . 
&gt; It the Makefile were generated during configure time, a &quot;make&quot; after &quot;make
&gt; clean&quot; cannot build anymore in perl/, as there is no Makefile and make cannot
&gt; create the Makefile from Makefile.PL at build time.

How about configure creates a Makefile.PL from a Makefile.PL.in at configure-time?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Dilyan Palauzov">dilyan.palauzov@aegee.org</who>
            <bug_when>2012-04-16 18:16:29 EDT</bug_when>
            <thetext>(In reply to comment #7)
&gt; How about configure creates a Makefile.PL from a Makefile.PL.in at
&gt; configure-time?

I moved Makefile.PL to Makefile.PL.in, and configure now produces Makefile.PL from Makefile.PL.in (commit 2a75588ff738fa12d630020f0878d6f9c5674965).

However this is not working with COVERAGE.  Can somebody check, who knows what COVERAGE is supposed to do?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-04-16 21:00:13 EDT</bug_when>
            <thetext>(In reply to comment #8)
&gt; (In reply to comment #7)
&gt; &gt; How about configure creates a Makefile.PL from a Makefile.PL.in at
&gt; &gt; configure-time?
&gt; 
&gt; I moved Makefile.PL to Makefile.PL.in, and configure now produces Makefile.PL
&gt; from Makefile.PL.in (commit 2a75588ff738fa12d630020f0878d6f9c5674965).

Much better!  One small comment:

+		    &apos;PERL_PREINSTALL&apos; =&gt; &apos;@PERL_PREINSTALL@&apos;,

this line isn&apos;t necessary anymore, you&apos;re using @PERL_PREINSTALL@ directly in the cyradm:cyradm.sh rule now.

&gt; However this is not working with COVERAGE.  Can somebody check, who knows what
&gt; COVERAGE is supposed to do?

$(COVERAGE) is a make variable (*not* a configure variable, so your change to @COVERAGE@ is wrong) which is normally empty but is set to &quot;--coverage&quot; in the top-level coverage_all and coverage_check targets.  It&apos;s purpose is to make sure the C code built from the .xs will link with the library code when the library code has been built with coverage enabled.  I can&apos;t remember why a separate symbol COVERAGE was added instead of $(EXTRACFLAGS) and $(EXTRALDFLAGS), which are used by all the rest of the Makefiles.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-04-16 21:20:08 EDT</bug_when>
            <thetext>And one more comment on commit 2a75588ff738fa12d630020f0878d6f9c5674965.

The Makefile.am now has three rules for building a Makefile from a Makefile.PL.  Two of those will mkdir the build directory if it doesn&apos;t exist, using $MKDIR_P; one doesn&apos;t.  Now that the Makefile.PLs are written by configure, those build directories will already exist when configure finishes and the use of $(MKDIR_P) in Makefile.am is redundant.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Dilyan Palauzov">dilyan.palauzov@aegee.org</who>
            <bug_when>2012-04-17 08:10:16 EDT</bug_when>
            <thetext>I removed the $(MKDIR_P) and 
+            &apos;PERL_PREINSTALL&apos; =&gt; &apos;@PERL_PREINSTALL@&apos;,

I am not going to fix COVERAGE, as I do not get how it works.

In master it is contained only in perl/Makefile.in and perl/sieve/managesieve/Makefile.PL . This means, that COVERAGE is passed to perl/annotaor/Makefile.PL and perl/imap/Makefile.PL but used in perl/sieve/manageiseve/Makefile.PL.  In the former it is passed in the same way, as all other variables (SASL_LIB=&quot;$(SASL_LIB)&quot; SASL_INC=&quot;$(SASL_INC)&quot; CC=&quot;$(CC)&quot; COVERAGE=&quot;$(COVERAGE)&quot; PERL_PREINSTALL=&quot;$(PERL_PREINSTALL)&quot; ...), but perl/sieve/managesieve/Makefile.PL uses all other variables with $ENV in terms of &quot;my $SASL_INC = $ENV{SASL_INC};&quot;, however COVERAGE is used with $(COVERAGE), without having COVERAGE = $ENV{COVERAGE} before that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-04-17 21:53:56 EDT</bug_when>
            <thetext>(In reply to comment #11)
&gt; I am not going to fix COVERAGE, as I do not get how it works.
&gt; [...] COVERAGE is used with
&gt; $(COVERAGE), without having COVERAGE = $ENV{COVERAGE} before that.

It worked through the magic of recursive make.  The toplevel Makefile does

coverage_all:
        $(MAKE) COVERAGE=&quot;--coverage&quot; EXTRACFLAGS=&quot;--coverage&quot; EXTRALDFLAGS=&quot;--c

at which point the value of $(MAKE) is &quot;gmake&quot;.  Any Makefiles below that
which recurse again do something like perl/Makefile.in

all::
        @for d in  $(SUBDIRS); \
        do \
                (cd $$d; echo &quot;### Making&quot; all &quot;in&quot; `pwd`;      \
....
                        $(MAKE) $(MFLAGS) DESTDIR=$(DESTDIR) all) || exit 1; \
        done

where the value of $(MAKE) is now &quot;make COVERAGE=--coverage ...&quot;, i.e. it
contains all the variable settings passed on it&apos;s commandline.  See
&quot;Communicating Variables to a Sub-`make&apos;&quot; in the gmake documentation.

All things considered, it might be a whole lot easier to move the coverage
support from make time to configure time, and add a --enable-coverage option
to configure.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>