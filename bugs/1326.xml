<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>1326</bug_id>
          
          <creation_ts>2002-07-25 14:01 EDT</creation_ts>
          <short_desc>mupdate potentially blocks in prot_flush while holding mailboxes_mutex</short_desc>
          <delta_ts>2010-10-18 12:42:57 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>Murder</component>
          <version>2.1.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P2</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</reporter>
          <assigned_to name="Rob Siemborski">rjs3@andrew.cmu.edu</assigned_to>
          
          

      

      

      
          <long_desc isprivate="0">
            <who name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</who>
            <bug_when>2002-07-25 14:01:12 EDT</bug_when>
            <thetext>mupdate sometimes sends out large amounts of data while holding mailboxes_mutex,
which can cause us to block while holding the lock that prevents us from getting
anything useful done.

the most obvious place for this is in cmd_list() and cmd_startupdate(). it&apos;s not
really clear how to avoid this. it&apos;s also possible in cmd_find() when called
from sendupdates().

cmd_find() is easier to overcome; we can build the string up inside the lock and
only call prot_write() on it after relinquishing the lock.
we&apos;d have to do the equivalent for cmd_list()/cmd_startupdate(), but we&apos;d
probably want to file buffer it or something.

i suppose another plan of attack would be to create an &quot;infinite buffer size
mode&quot; for prot write streams.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2002-08-07 14:54:52 EDT</bug_when>
            <thetext>this is all written now into prot_NONBLOCK for writeable protstreams in 2.2,
resolving this bug.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>