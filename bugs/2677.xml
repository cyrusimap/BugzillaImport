<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>2677</bug_id>
          
          <creation_ts>2005-06-06 10:15 EDT</creation_ts>
          <short_desc>double unlock &amp; math error in mupdate master</short_desc>
          <delta_ts>2010-10-18 12:43:08 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>Murder</component>
          <version>2.2.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          <bug_file_loc>http://umich.edu/~wes/mupdate.c.diff</bug_file_loc>
          
          
          <priority>P2</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Wes Craig">wes@umich.edu</reporter>
          <assigned_to name="Ken Murchison">murch@andrew.cmu.edu</assigned_to>
          
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Wes Craig">wes@umich.edu</who>
            <bug_when>2005-06-06 10:15:55 EDT</bug_when>
            <thetext>In mupdate.c thread_main(), the idle_worker_mutex is unlocked twice in the event that the maximum 
number of workers is reached.  Since this occurs only during high load, the likelihood that another thread 
will be executing the same code is high, thus causing all sorts of bad stuff.

Later in thread_main(), the math for the need_workers calculation is incorrect.  If need_workers + 
worker_count is less than IMAPOPT_MUPDATE_WORKERS_MAX, then too_many will be negative.  
Subtracting negative too_many from need_workers will increase need_workers, causing way too many 
threads to be started, only to be stopped moments later.

These two bugs are related in that when need_works inappropriately starts additional workers, the 
maximum number of workers is much more likely to be reached.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2005-11-01 11:42:33 EDT</bug_when>
            <thetext>Patch applied</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>