<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>1090</bug_id>
          
          <creation_ts>2002-01-17 00:53 EDT</creation_ts>
          <short_desc>mupdate/cyrusdb</short_desc>
          <delta_ts>2010-10-18 12:42:52 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>Murder</component>
          <version>2.1.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P1</priority>
          <bug_severity>blocker</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Rob Siemborski">rjs3@andrew.cmu.edu</reporter>
          <assigned_to name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</assigned_to>
          
          

      

      

      
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2002-01-17 00:53:18 EDT</bug_when>
            <thetext>mupdate needs to be ported to using cyrusdb.

also, as you let me know earlier:

the major challenges with cyrusdb &amp; threads are:
a) berkeley db.  there are certain rules you have to follow.  in general,
we&apos;re following them, but i think we need to switch to a slightly different
memory allocation approach.  this should probably not be hard, though i&apos;m
nervous i&apos;ll have to modify code outside of cyrusdb* to do it.
b) flat file (and skiplist if ever) use file locks.  file locks get very
confusing in the presence of threads:
thread B opens &quot;/tmp/foobar&quot;, gets fd 12.
thread A opens &quot;/tmp/foobar&quot;, gets fd 13.
thread A locks fd 13.
thread B closes fd 12.
thread A&apos;s lock goes away!
this is a pretty easily solvable problem but is damn annoying.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Larry Greenfield">leg+cyrus@andrew.cmu.edu</who>
            <bug_when>2002-02-02 23:53:06 EDT</bug_when>
            <thetext>this is fixed; it now uses cyrusdb.  it is careful to never invoke cyrusdb calls
in two threads simultaneously, thus avoiding the issues.

we should tackle the file locks/threads problem in lib/lock* sometime.
</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>