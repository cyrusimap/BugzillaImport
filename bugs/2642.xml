<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>2642</bug_id>
          
          <creation_ts>2005-04-01 17:57 EDT</creation_ts>
          <short_desc>TLS client authentication: allow optional client certificate</short_desc>
          <delta_ts>2011-04-10 20:09:41 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>IMAP</component>
          <version>2.2.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.5-next</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Goetz Babin-Ebell">goetz@shomitefo.de</reporter>
          <assigned_to name="Ken Murchison">murch@andrew.cmu.edu</assigned_to>
          <cc>dg@duncangibb.com</cc>
    
    <cc>duncan.gibb@siriusit.co.uk</cc>
    
    <cc>Hagedorn@uni-koeln.de</cc>
    
    <cc>vanmeeuwen@kolabsys.com</cc>
    
    <cc>wes@umich.edu</cc>
    
    <cc>zhangweiwu@realss.com</cc>
    
    <cc>zhuzhixin@realss.com</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Goetz Babin-Ebell">goetz@shomitefo.de</who>
            <bug_when>2005-04-01 17:57:48 EDT</bug_when>
            <thetext>I have reworked the way how in imap/tls.c:tls_init_serverengine
the CA certificates are handled:

* I added the new (optional) parameter &quot;tls_server_ca_file&quot; containing
  the CA certificates that build the certificate chain for the server certificate.
  (if it is not set, the certificates are collected from
   tls_ca_file and tls_ca_path)
* now the list of acceptable CA certificates that may issue client certificates
  is generated from the &quot;tls_ca_file&quot;.
  If this file contains no certificates, no client certificates are requested.
* I changed the parameter &quot;tls_require_cert&quot; to accept the 3 values:
  - &quot;off&quot;:      no client certificates are requested, processed
  - &quot;optional&quot;: the client may send a client certificate
  - &quot;require&quot;:  client certificate is required
  Perhaps it is better to create an new parameter and declare the old one
  as deprecated.

Additionally I changed imtest:
* accept parameters to set CA file (-path) for server verification.
* fail if the server verification is wanted but failed
  (this includes fail if the CA certificate for the server is not known)
* generate a better error message if TLS failed
* allow IMAP over SSL with client certificate</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Goetz Babin-Ebell">goetz@shomitefo.de</who>
            <bug_when>2005-04-01 17:59:08 EDT</bug_when>
            <thetext>Created an attachment (id=338)
The patch containing my channges...
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Zhang Weiwu">zhangweiwu@realss.com</who>
            <bug_when>2009-08-04 22:47:43 EDT</bug_when>
            <thetext>Great. Since this patch is created more than four years ago 2005-04-01 is there a chance it gets accepted into the main source tree so I can simply upgrade my cyrus imapd?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Goetz Babin-Ebell">goetz@shomitefo.de</who>
            <bug_when>2009-08-05 10:42:26 EDT</bug_when>
            <thetext>Does it still apply ?

Since Thunderburb didn&apos;t really support client authentication
with the EXTERNAL method the last time I checked,
I somehow lost interest.

If you want to adopt the patch, I would be willing to help...
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Zhu Zhixin">zhuzhixin@realss.com</who>
            <bug_when>2009-08-06 00:40:31 EDT</bug_when>
            <thetext>have a look at .. :-)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Zhu Zhixin">zhuzhixin@realss.com</who>
            <bug_when>2009-08-13 03:51:15 EDT</bug_when>
            <thetext>^_^ your patch seems works.

# ./configure --with-snmp=snmp/
# make
# make install

no error and when i connect to the imap server with icedove/thunderbird, the CA dialog now not appear.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Zhang Weiwu">zhangweiwu@realss.com</who>
            <bug_when>2009-08-13 08:29:54 EDT</bug_when>
            <thetext>Glad to know. Thanks. May I ask which version does this apply to, when you say it applies &quot;now&quot;? I just guess providing this information would be helpful for those coming here from google.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Zhang Weiwu">zhangweiwu@realss.com</who>
            <bug_when>2009-08-13 08:49:27 EDT</bug_when>
            <thetext>&gt; no error and when i connect to the imap server with icedove/thunderbird, the 
&gt; CA dialog now not appear.

He was talking about the case when cyrus mis-behavior it trigger another mis-behavior in thunderbird which is recorded here:

https://bugzilla.mozilla.org/show_bug.cgi?id=437683</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Sebastian Hagedorn">Hagedorn@uni-koeln.de</who>
            <bug_when>2009-09-02 07:14:31 EDT</bug_when>
            <thetext>FWIW, I found a (stupid) workaround for the Thunderbird problem. We switched CAs this morning and began having the issue that TB users with certificates signed by the new CA were prompted for them.
We never had this problem before, because we never used the old CA for personal certificates. So what I did was to set tls_ca_file to the *old* CA! The actual server certificates are from the new one, and that setting is only used for client certificate verification anyway.

So a generic workaround would be to create an empty CA that&apos;s never used and to point tls_ca_file to that ... ugly, but effective.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Zhu Zhixin">zhuzhixin@realss.com</who>
            <bug_when>2009-09-02 22:39:16 EDT</bug_when>
            <thetext>(In reply to comment #6)
&gt; Glad to know. Thanks. May I ask which version does this apply to, when you say
&gt; it applies &quot;now&quot;? I just guess providing this information would be helpful for
&gt; those coming here from google.
&gt; 

$ dpkg -l |grep cyrus-imapd
hi  cyrus-imapd-2.2      2.2.13-14        Cyrus mail system (IMAP support)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2011-04-10 19:10:25 EDT</bug_when>
            <thetext>I&apos;m going to attempt to apply these patches to master, thanks.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2011-04-10 20:09:41 EDT</bug_when>
            <thetext>(In reply to comment #0)
&gt; I have reworked the way how in imap/tls.c:tls_init_serverengine
&gt; the CA certificates are handled:
&gt; 
&gt; * I added the new (optional) parameter &quot;tls_server_ca_file&quot; containing
&gt;   the CA certificates that build the certificate chain for the server certificate.
&gt;   (if it is not set, the certificates are collected from
&gt;    tls_ca_file and tls_ca_path)
&gt; * now the list of acceptable CA certificates that may issue client certificates is generated from the &quot;tls_ca_file&quot;.
&gt;   If this file contains no certificates, no client certificates are requested.

I take it your &quot;tls_server_ca_file&quot; setting is actually supposed to represent the CA certificate (chain) used to issue client certificates with - correct? If so, I&apos;d say client_ca_cert is a more appropriate name.</thetext>
          </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>338</attachid>
            <date>2005-04-01 17:59 EDT</date>
            <desc>The patch containing my channges...</desc>
            <filename>cyrus-imapd-2.2.12.diff</filename>
            <type>text/plain</type>
            <size>10691</size>
            <attacher>goetz@shomitefo.de</attacher>
            
              <data encoding="base64">ZGlmZiAtdXJiIGN5cnVzLWltYXBkLTIuMi4xMi9pbWFwL3Rscy5jIGN5cnVzLWltYXBkLTIuMi4x
Mi1uZXcvaW1hcC90bHMuYwotLS0gY3lydXMtaW1hcGQtMi4yLjEyL2ltYXAvdGxzLmMJMjAwNC0w
NS0wNCAyMTo0NzozNC4wMDAwMDAwMDAgKzAyMDAKKysrIGN5cnVzLWltYXBkLTIuMi4xMi1uZXcv
aW1hcC90bHMuYwkyMDA1LTA0LTAxIDIzOjI1OjExLjcxNzM4MDY3NyArMDIwMApAQCAtNTc4LDEw
ICs1NzgsMTIgQEAKICAgICBjb25zdCBjaGFyICAgKmNpcGhlcl9saXN0OwogICAgIGNvbnN0IGNo
YXIgICAqQ0FwYXRoOwogICAgIGNvbnN0IGNoYXIgICAqQ0FmaWxlOworICAgIGNvbnN0IGNoYXIg
ICAqc19DQV9maWxlOwogICAgIGNvbnN0IGNoYXIgICAqc19jZXJ0X2ZpbGU7CiAgICAgY29uc3Qg
Y2hhciAgICpzX2tleV9maWxlOwotICAgIGludCAgICByZXF1aXJlY2VydDsKKyAgICBlbnVtIGVu
dW1fdmFsdWUgcmVxdWlyZWNlcnQ7CiAgICAgaW50ICAgIHRpbWVvdXQ7CisgICAgaW50ICAgIGFs
bG93Q2xpZW50Q0EgPSAxOwogCiAgICAgaWYgKHRsc19zZXJ2ZXJlbmdpbmUpCiAJcmV0dXJuICgw
KTsJCQkJLyogYWxyZWFkeSBydW5uaW5nICovCkBAIC02NzMsMTEgKzY3NSw0NCBAQAogCSghU1NM
X0NUWF9zZXRfZGVmYXVsdF92ZXJpZnlfcGF0aHMoc19jdHgpKSkgewogCS8qIGp1c3QgYSB3YXJu
aW5nIHNpbmNlIHRoaXMgaXMgb25seSBuZWNlc3NhcnkgZm9yIGNsaWVudCBhdXRoICovCiAJc3lz
bG9nKExPR19OT1RJQ0UsIlRMUyBzZXJ2ZXIgZW5naW5lOiBjYW5ub3QgbG9hZCBDQSBkYXRhIik7
CQorICAgICAgICBhbGxvd0NsaWVudENBID0gMDsgICAgICAvKiBubyBDQSBzZXQsIG5vIGNsaWVu
dCB2ZXJpZnkuLi4gKi8KKyAgICB9CisgICAgZWxzZQorICAgIHsKKyAgICAgICBpZiAoIUNBZmls
ZSkKKyAgICAgICAgICBhbGxvd0NsaWVudENBID0gMDsgICAgICAvKiBubyBDQSBzZXQsIG5vIGNs
aWVudCB2ZXJpZnkuLi4gKi8KICAgICB9CiAKKyAgICBzX0NBX2ZpbGUgICA9IGNvbmZpZ19nZXRz
dHJpbmcoSU1BUE9QVF9UTFNfU0VSVkVSX0NBX0ZJTEUpOwogICAgIHNfY2VydF9maWxlID0gY29u
ZmlnX2dldHN0cmluZyhJTUFQT1BUX1RMU19DRVJUX0ZJTEUpOwogICAgIHNfa2V5X2ZpbGUgPSBj
b25maWdfZ2V0c3RyaW5nKElNQVBPUFRfVExTX0tFWV9GSUxFKTsKIAorICAgIGlmIChzX0NBX2Zp
bGUpCisgICAgeworICAgICAgIFNTTF9DVFhfc2V0X21vZGUoc19jdHgsU1NMX0NUWF9nZXRfbW9k
ZShzX2N0eCkgfCBTU0xfTU9ERV9OT19BVVRPX0NIQUlOKTsKKyAgICAgICBpZiAoc19DQV9maWxl
WzBdICYmIHN0cmNhc2VjbXAoc19DQV9maWxlLCJkaXNhYmxlZCIpKSB7CisgICAgICAgICAgQklP
ICpmaWxlYmlvID0gQklPX25ld19maWxlKHNfQ0FfZmlsZSwiciIpOworICAgICAgICAgIGlmIChm
aWxlYmlvKSB7CisgICAgICAgICAgICAgWDUwOSAqY2FjZXJ0OworICAgICAgICAgICAgIHN5c2xv
ZyhMT0dfREVCVUcsIlRMUyBzZXJ2ZXIgZW5naW5lOiBsb2FkaW5nIHNlcnZlciBDQSBjZXJ0cyBm
cm9tIGZpbGUgJXMiLHNfQ0FfZmlsZSk7CisgICAgICAgICAgICAgd2hpbGUoKGNhY2VydCA9IFBF
TV9yZWFkX2Jpb19YNTA5KGZpbGViaW8sTlVMTCxOVUxMLE5VTEwpKSAhPSBOVUxMKSB7CisgICAg
ICAgICAgICAgICAgY2hhciBidWZbMjU2XTsKKyAgICAgICAgICAgICAgICBYNTA5X05BTUVfb25l
bGluZShYNTA5X2dldF9zdWJqZWN0X25hbWUoY2FjZXJ0KSwgYnVmLCBzaXplb2YoYnVmKSk7Cisg
ICAgICAgICAgICAgICAgaWYgKCFTU0xfQ1RYX2FkZF9leHRyYV9jaGFpbl9jZXJ0KHNfY3R4LGNh
Y2VydCkpIHsKKyAgICAgICAgICAgICAgICAgICBzeXNsb2coTE9HX0VSUiwiVExTIHNlcnZlciBl
bmdpbmU6IGZhaWxlZCB0byBhZGQgQ0EgY2VydCB0byBjaGFpbjogJXMiLGJ1Zik7CisgICAgICAg
ICAgICAgICAgICAgWDUwOV9mcmVlKGNhY2VydCk7CisgICAgICAgICAgICAgICAgfQorICAgICAg
ICAgICAgICAgIGVsc2UgCisgICAgICAgICAgICAgICAgICAgc3lzbG9nKExPR19ERUJVRywiVExT
IHNlcnZlciBlbmdpbmU6IGFkZGVkIENBIGNlcnQgdG8gY2hhaW46ICVzIixidWYpOworICAgICAg
ICAgICAgIH0KKyAgICAgICAgICAgICBCSU9fZnJlZShmaWxlYmlvKTsKKyAgICAgICAgICB9Cisg
ICAgICAgICAgZWxzZSB7CisgICAgICAgICAgICAgc3lzbG9nKExPR19FUlIsIlRMUyBzZXJ2ZXIg
ZW5naW5lOiBjYW5ub3QgbG9hZCBzZXJ2ZXIgQ0EgY2VydHMgZnJvbSBmaWxlICVzIixzX0NBX2Zp
bGUpOworICAgICAgICAgICAgIHJldHVybiAoLTEpOworICAgICAgICAgIH0KKyAgICAgICB9Cisg
ICAgfQogICAgIGlmICghc2V0X2NlcnRfc3R1ZmYoc19jdHgsIHNfY2VydF9maWxlLCBzX2tleV9m
aWxlKSkgewogCXN5c2xvZyhMT0dfRVJSLCJUTFMgc2VydmVyIGVuZ2luZTogY2Fubm90IGxvYWQg
Y2VydC9rZXkgZGF0YSIpOwogCXJldHVybiAoLTEpOwpAQCAtNjg1LDI0ICs3MjAsMzcgQEAKICAg
ICBTU0xfQ1RYX3NldF90bXBfcnNhX2NhbGxiYWNrKHNfY3R4LCB0bXBfcnNhX2NiKTsKIAogICAg
IHZlcmlmeV9kZXB0aCA9IHZlcmlmeWRlcHRoOwotICAgIGlmIChhc2tjZXJ0IT0wKQotCXZlcmlm
eV9mbGFncyB8PSBTU0xfVkVSSUZZX1BFRVIgfCBTU0xfVkVSSUZZX0NMSUVOVF9PTkNFOwogCi0g
ICAgcmVxdWlyZWNlcnQgPSBjb25maWdfZ2V0c3dpdGNoKElNQVBPUFRfVExTX1JFUVVJUkVfQ0VS
VCk7Ci0gICAgaWYgKHJlcXVpcmVjZXJ0KQotCXZlcmlmeV9mbGFncyB8PSBTU0xfVkVSSUZZX1BF
RVIgfCBTU0xfVkVSSUZZX0ZBSUxfSUZfTk9fUEVFUl9DRVJUCi0JICAgIHwgU1NMX1ZFUklGWV9D
TElFTlRfT05DRTsKLSAgICBTU0xfQ1RYX3NldF92ZXJpZnkoc19jdHgsIHZlcmlmeV9mbGFncywg
dmVyaWZ5X2NhbGxiYWNrKTsKKyAgICByZXF1aXJlY2VydCAgPSBjb25maWdfZ2V0ZW51bShJTUFQ
T1BUX1RMU19SRVFVSVJFX0NFUlQpOwogCi0gICAgaWYgKGFza2NlcnQgfHwgcmVxdWlyZWNlcnQp
IHsKLSAgICAgIGlmIChDQWZpbGUgPT0gTlVMTCkgeworICAgIGlmICghYWxsb3dDbGllbnRDQSkg
eworICAgICAgIGlmIChyZXF1aXJlY2VydCE9SU1BUF9FTlVNX1RMU19SRVFVSVJFX0NFUlRfT0ZG
IHx8IGFza2NlcnQpCiAJICBzeXNsb2coTE9HX0VSUiwgCi0JCSAiVExTIHNlcnZlciBlbmdpbmU6
IE5vIENBIGZpbGUgc3BlY2lmaWVkLiAiCisJCSAiVExTIHNlcnZlciBlbmdpbmU6IE5vIGNsaWVu
dCBDQSBmaWxlIHNwZWNpZmllZC4gIgogCQkgIkNsaWVudCBzaWRlIGNlcnRzIG1heSBub3Qgd29y
ayIpOwotICAgICAgfSBlbHNlIHsKLQkgIFNTTF9DVFhfc2V0X2NsaWVudF9DQV9saXN0KHNfY3R4
LCBTU0xfbG9hZF9jbGllbnRfQ0FfZmlsZShDQWZpbGUpKTsKKyAgICB9CisgICAgZWxzZQorICAg
IHsKKyAgICAgICBTVEFDS19PRihYNTA5X05BTUUpICpDQW5hbWVzID0gU1NMX2xvYWRfY2xpZW50
X0NBX2ZpbGUoQ0FmaWxlKTsKKyAgICAgICBpZiAoIUNBbmFtZXMgfHwgc2tfbnVtKENBbmFtZXMp
IDwgMSkgeworCSAgc3lzbG9nKExPR19FUlIsIAorCQkgIlRMUyBzZXJ2ZXIgZW5naW5lOiBObyBj
bGllbnQgQ0EgY2VydHMgc3BlY2lmaWVkLiAiCisJCSAiQ2xpZW50IHNpZGUgY2VydHMgbWF5IG5v
dCB3b3JrIik7CisgICAgICAgfQorICAgICAgIGVsc2UKKyAgICAgICB7CisgICAgICAgICAgaWYg
KGFza2NlcnQgfHwgKHJlcXVpcmVjZXJ0ICE9IElNQVBfRU5VTV9UTFNfUkVRVUlSRV9DRVJUX09G
RikpCisgICAgICAgICAgICAgdmVyaWZ5X2ZsYWdzID0gU1NMX1ZFUklGWV9QRUVSIHwgU1NMX1ZF
UklGWV9DTElFTlRfT05DRTsKKyAgICAgICAgICBpZiAocmVxdWlyZWNlcnQgPT0gSU1BUF9FTlVN
X1RMU19SRVFVSVJFX0NFUlRfUkVRVUlSRSkKKyAgICAgICAgICAgICB2ZXJpZnlfZmxhZ3MgfD0g
U1NMX1ZFUklGWV9GQUlMX0lGX05PX1BFRVJfQ0VSVDsKKyAgICAgICAgICBTU0xfQ1RYX3NldF9j
bGllbnRfQ0FfbGlzdChzX2N0eCwgQ0FuYW1lcyk7CisgICAgICAgICAgc3lzbG9nKExPR19ERUJV
RywgInNldCBjbGllbnQgQ0EgbGlzdDogQ2xpZW50IGNlcnQgJXNyZXF1ZXN0ZWQsIgorICAgICAg
ICAgICAgICAgICAiICVzcmVxdWllZCIsCisgICAgICAgICAgICAgICAgIHZlcmlmeV9mbGFncyAm
IFNTTF9WRVJJRllfUEVFUiA/ICIiIDogIm5vdCAiLAorICAgICAgICAgICAgICAgICB2ZXJpZnlf
ZmxhZ3MgJiBTU0xfVkVSSUZZX0ZBSUxfSUZfTk9fUEVFUl9DRVJUID8gIiI6Im5vdCAiKTsKICAg
ICAgIH0KICAgICB9CisgICAgU1NMX0NUWF9zZXRfdmVyaWZ5KHNfY3R4LCB2ZXJpZnlfZmxhZ3Ms
IHZlcmlmeV9jYWxsYmFjayk7CiAKICAgICB0bHNfc2VydmVyZW5naW5lID0gMTsKICAgICByZXR1
cm4gKDApOwpkaWZmIC11cmIgY3lydXMtaW1hcGQtMi4yLjEyL2ltdGVzdC9pbXRlc3QuYyBjeXJ1
cy1pbWFwZC0yLjIuMTItbmV3L2ltdGVzdC9pbXRlc3QuYwotLS0gY3lydXMtaW1hcGQtMi4yLjEy
L2ltdGVzdC9pbXRlc3QuYwkyMDA0LTEyLTA3IDIwOjI2OjIyLjAwMDAwMDAwMCArMDEwMAorKysg
Y3lydXMtaW1hcGQtMi4yLjEyLW5ldy9pbXRlc3QvaW10ZXN0LmMJMjAwNS0wNC0wMSAyMTozNTox
NC41MjU2NjQ0NjMgKzAyMDAKQEAgLTM3Miw4ICszNzIsOCBAQAogCXByaW50ZigidmVyaWZ5IGVy
cm9yOm51bT0lZDolc1xuIiwgZXJyLAogCSAgICAgICBYNTA5X3ZlcmlmeV9jZXJ0X2Vycm9yX3N0
cmluZyhlcnIpKTsKIAlpZiAodmVyaWZ5X2RlcHRoID49IGRlcHRoKSB7Ci0JICAgIG9rID0gMTsK
LQkgICAgdmVyaWZ5X2Vycm9yID0gWDUwOV9WX09LOworICAgICAgICAgICAvLyAgICAgICAgICAg
b2sgPSAxOworICAgICAgICAgICAvL3ZlcmlmeV9lcnJvciA9IFg1MDlfVl9PSzsKIAl9IGVsc2Ug
ewogCSAgICBvayA9IDA7CiAJICAgIHZlcmlmeV9lcnJvciA9IFg1MDlfVl9FUlJfQ0VSVF9DSEFJ
Tl9UT09fTE9ORzsKQEAgLTQ3OSw3ICs0NzksNyBAQAogc3RhdGljIGludCB0bHNfaW5pdF9jbGll
bnRlbmdpbmUoaW50IHZlcmlmeWRlcHRoLCBjaGFyICp2YXJfdGxzX2NlcnRfZmlsZSwgY2hhciAq
dmFyX3Rsc19rZXlfZmlsZSkKIHsKICAgICBpbnQgICAgIG9mZiA9IDA7Ci0gICAgaW50ICAgICB2
ZXJpZnlfZmxhZ3MgPSBTU0xfVkVSSUZZX05PTkU7CisgICAgaW50ICAgICB2ZXJpZnlfZmxhZ3Mg
PSAvKlNTTF9WRVJJRllfTk9ORSovIFNTTF9WRVJJRllfUEVFUjsKICAgICBjaGFyICAgKkNBcGF0
aDsKICAgICBjaGFyICAgKkNBZmlsZTsKICAgICBjaGFyICAgKmNfY2VydF9maWxlOwpAQCAtNTE1
LDExICs1MTUsMTYgQEAKIAlDQXBhdGggPSB2YXJfdGxzX0NBcGF0aDsKICAgICAKICAgICBpZiAo
Q0FmaWxlIHx8IENBcGF0aCkKKyAgICB7CisgICAgICAgLy9wcmludGYoIlRMUyBlbmdpbmU6IHNl
dCBwZWVyIHZlcmlmeSBkYXRhICVzXG4iLENBZmlsZSk7CiAJaWYgKCghU1NMX0NUWF9sb2FkX3Zl
cmlmeV9sb2NhdGlvbnModGxzX2N0eCwgQ0FmaWxlLCBDQXBhdGgpKSB8fAogCSAgICAoIVNTTF9D
VFhfc2V0X2RlZmF1bHRfdmVyaWZ5X3BhdGhzKHRsc19jdHgpKSkgewogCSAgICBwcmludGYoIlRM
UyBlbmdpbmU6IGNhbm5vdCBsb2FkIENBIGRhdGFcbiIpOwogCSAgICByZXR1cm4gSU1URVNUX0ZB
SUw7CiAJfQorICAgICAgICB2ZXJpZnlfZGVwdGggPSB2ZXJpZnlkZXB0aDsKKyAgICAgICAgU1NM
X0NUWF9zZXRfdmVyaWZ5KHRsc19jdHgsIHZlcmlmeV9mbGFncywgdmVyaWZ5X2NhbGxiYWNrKTsK
KyAgICB9CiAgICAgaWYgKHN0cmxlbih2YXJfdGxzX2NlcnRfZmlsZSkgPT0gMCkKIAljX2NlcnRf
ZmlsZSA9IE5VTEw7CiAgICAgZWxzZQpAQCAtNTM2LDkgKzU0MSw2IEBACiAJfQogICAgIFNTTF9D
VFhfc2V0X3RtcF9yc2FfY2FsbGJhY2sodGxzX2N0eCwgdG1wX3JzYV9jYik7CiAgICAgCi0gICAg
dmVyaWZ5X2RlcHRoID0gdmVyaWZ5ZGVwdGg7Ci0gICAgU1NMX0NUWF9zZXRfdmVyaWZ5KHRsc19j
dHgsIHZlcmlmeV9mbGFncywgdmVyaWZ5X2NhbGxiYWNrKTsKLSAgICAKICAgICByZXR1cm4gSU1U
RVNUX09LOwogfQogCkBAIC02ODQsNyArNjg2LDI1IEBACiAJU1NMX3NldF9zZXNzaW9uKHRsc19j
b25uLCB0bHNfc2Vzcyk7CiAKICAgICBpZiAoKHN0cyA9IFNTTF9jb25uZWN0KHRsc19jb25uKSkg
PD0gMCkgewotCXByaW50ZigiU1NMX2Nvbm5lY3QgZXJyb3IgJWRcbiIsIHN0cyk7CisgICAgICAg
Y29uc3QgY2hhciAqY3BNc2csICpjcE1zZzIgPSAiIjsKKyAgICAgICBzd2l0Y2goU1NMX2dldF9l
cnJvcih0bHNfY29ubixzdHMpKQorICAgICAgIHsKKyAgICAgICBjYXNlIFNTTF9FUlJPUl9OT05F
OiAgICAgICAgY3BNc2cgPSAibm9uZSI7IGJyZWFrOworICAgICAgIGNhc2UgU1NMX0VSUk9SX1pF
Uk9fUkVUVVJOOiBjcE1zZyA9ICJjb25uZWN0aW9uIGNsb3NlZCI7IGJyZWFrOworICAgICAgIGNh
c2UgU1NMX0VSUk9SX1dBTlRfUkVBRDogICBjcE1zZyA9ICJ3YW50IHJlYWQiOyAgIGJyZWFrOwor
ICAgICAgIGNhc2UgU1NMX0VSUk9SX1dBTlRfV1JJVEU6ICBjcE1zZyA9ICJ3YW50IHdyaXRlIjsg
IGJyZWFrOworICAgICAgIGNhc2UgU1NMX0VSUk9SX1dBTlRfQ09OTkVDVDpjcE1zZyA9ICJ3YW50
IHdyaXRlIjsgIGJyZWFrOworICAgICAgIGNhc2UgU1NMX0VSUk9SX1dBTlRfQUNDRVBUOiBjcE1z
ZyA9ICJ3YW50IGFjY2VwdCI7IGJyZWFrOworICAgICAgIGNhc2UgU1NMX0VSUk9SX1dBTlRfWDUw
OV9MT09LVVA6Y3BNc2cgPSAid2FudCBsb29rdXAiOyBicmVhazsKKyAgICAgICBjYXNlIFNTTF9F
UlJPUl9TWVNDQUxMOiAgICAgY3BNc2cgPSAic3lzY2FsbCI7IGJyZWFrOworICAgICAgIGNhc2Ug
U1NMX0VSUk9SX1NTTDogICAgICAgICBjcE1zZyA9ICJTU0wgZXJyb3I6IjsKKyAgICAgICAgICBz
dHMgPSBTU0xfZ2V0X3ZlcmlmeV9yZXN1bHQodGxzX2Nvbm4pOworICAgICAgICAgIGNwTXNnMiA9
IFg1MDlfdmVyaWZ5X2NlcnRfZXJyb3Jfc3RyaW5nKHN0cyk7CisgICAgICAgICAgYnJlYWs7Cisg
ICAgICAgZGVmYXVsdDoKKyAgICAgICAgICBjcE1zZyA9ICI/Pz8gdW5rbm93biBlcnJvciI7IAor
ICAgICAgIH0KKyAgICAgICBwcmludGYoIlNTTF9jb25uZWN0IGVycm9yICVkICVzICVzXG4iLCBz
dHMsY3BNc2csY3BNc2cyKTsKIAl0bHNfc2VzcyA9IFNTTF9nZXRfc2Vzc2lvbih0bHNfY29ubik7
CiAJaWYgKHRsc19zZXNzKSB7CiAJICAgIFNTTF9DVFhfcmVtb3ZlX3Nlc3Npb24odGxzX2N0eCwg
dGxzX3Nlc3MpOwpAQCAtMjE3Nyw2ICsyMTk3LDggQEAKICAgICBpZiAoc3RyY2FzZWNtcChwcm90
LCAibXVwZGF0ZSIpKQogCXByaW50ZigiICAtdCBmaWxlICA6IEVuYWJsZSBUTFMuIGZpbGUgaGFz
IHRoZSBUTFMgcHVibGljIGFuZCBwcml2YXRlIGtleXNcbiIKIAkgICAgICAgIiAgICAgICAgICAg
ICAoc3BlY2lmeSBcIlwiIHRvIG5vdCB1c2UgVExTIGZvciBhdXRoZW50aWNhdGlvbilcbiIpOwor
ICAgIHByaW50ZigiICAtRiBmaWxlICA6IEVuYWJsZSBUTFMuIGZpbGUgaGFzIHRoZSBUTFMgQ0Eg
Y2VydGlmaWNhdGVzXG4iKTsKKyAgICBwcmludGYoIiAgLUMgcGF0aCAgOiBFbmFibGUgVExTLiBw
YXRoIGhhcyB0aGUgVExTIENBIGNlcnRpZmljYXRlc1xuIik7CiAjZW5kaWYgLyogSEFWRV9TU0wg
Ki8KICAgICBwcmludGYoIiAgLWMgICAgICAgOiBlbmFibGUgY2hhbGxlbmdlIHByb21wdCBjYWxs
YmFja3NcbiIKIAkgICAiICAgICAgICAgICAgIChlbnRlciBvbmUtdGltZSBwYXNzd29yZCBpbnN0
ZWFkIG9mIHNlY3JldCBwYXNzLXBocmFzZSlcbiIpOwpAQCAtMjI5NCw3ICsyMzE2LDcgQEAKICAg
ICBwcm9nID0gc3RycmNocihhcmd2WzBdLCAnLycpID8gc3RycmNocihhcmd2WzBdLCAnLycpKzEg
OiBhcmd2WzBdOwogCiAgICAgLyogbG9vayBhdCBhbGwgdGhlIGV4dHJhIGFyZ3MgKi8KLSAgICB3
aGlsZSAoKGMgPSBnZXRvcHQoYXJnYywgYXJndiwgIlA6c2NpenZrOmw6cDp1OmE6bTpmOnI6dDpu
Okk6eDpYOnc6bzo/aCIpKSAhPSBFT0YpCisgICAgd2hpbGUgKChjID0gZ2V0b3B0KGFyZ2MsIGFy
Z3YsICJQOnNjaXp2azpsOnA6dTphOm06ZjpyOnQ6RjpDOm46STp4Olg6dzpvOj9oIikpICE9IEVP
RikKIAlzd2l0Y2ggKGMpIHsKIAljYXNlICdQJzoKIAkgICAgcHJvdCA9IG9wdGFyZzsKQEAgLTIz
NTUsNiArMjM3NywyMiBAQAogCSAgICBpbXRlc3RfZmF0YWwoImltdGVzdCB3YXMgbm90IGNvbXBp
bGVkIHdpdGggU1NML1RMUyBzdXBwb3J0XG4iKTsKICNlbmRpZgogCSAgICBicmVhazsKKwljYXNl
ICdGJzoKKyNpZmRlZiBIQVZFX1NTTAorCSAgICBkb3Rscz0xOworCSAgICB2YXJfdGxzX0NBZmls
ZT1vcHRhcmc7CisjZWxzZQorCSAgICBpbXRlc3RfZmF0YWwoImltdGVzdCB3YXMgbm90IGNvbXBp
bGVkIHdpdGggU1NML1RMUyBzdXBwb3J0XG4iKTsKKyNlbmRpZgorCSAgICBicmVhazsKKwljYXNl
ICdDJzoKKyNpZmRlZiBIQVZFX1NTTAorCSAgICBkb3Rscz0xOworCSAgICB2YXJfdGxzX0NBcGF0
aD1vcHRhcmc7CisjZWxzZQorCSAgICBpbXRlc3RfZmF0YWwoImltdGVzdCB3YXMgbm90IGNvbXBp
bGVkIHdpdGggU1NML1RMUyBzdXBwb3J0XG4iKTsKKyNlbmRpZgorCSAgICBicmVhazsKIAljYXNl
ICduJzoKIAkgICAgcmVhdXRoID0gYXRvaShvcHRhcmcpOwogCSAgICBpZiAocmVhdXRoIDw9IDAp
CkBAIC0yNTAzLDcgKzI1NDEsNyBAQAogCQogI2lmZGVmIEhBVkVfU1NMCiAJaWYgKGRvc3NsPT0x
KSB7Ci0JICAgIGRvX3N0YXJ0dGxzKDEsICIiLCAmZXh0X3NzZik7CisJICAgIGRvX3N0YXJ0dGxz
KDEsIHRsc19rZXlmaWxlLCAmZXh0X3NzZik7CiAJfQogI2VuZGlmIC8qIEhBVkVfU1NMICovCiAK
QEAgLTI1NTAsNyArMjU4OCw3IEBACiAJCQkJCSAgcHJvdG9jb2wtPnRsc19jbWQuYXV0b19jYXBh
KTsKIAkgICAgfQogCSAgICAKLQl9IGVsc2UgaWYgKChkb3Rscz09MSkgJiYgKHNlcnZlcl9zdXBw
b3J0c190bHMhPTEpKSB7CisJfSBlbHNlIGlmIChkb3NzbCE9MSAmJiAoZG90bHM9PTEpICYmIChz
ZXJ2ZXJfc3VwcG9ydHNfdGxzIT0xKSkgewogCSAgICBpbXRlc3RfZmF0YWwoIlNUQVJUVExTIG5v
dCBzdXBwb3J0ZWQgYnkgdGhlIHNlcnZlciFcbiIpOwogCX0KICNlbmRpZiAvKiBIQVZFX1NTTCAq
LwpkaWZmIC11cmIgY3lydXMtaW1hcGQtMi4yLjEyL2xpYi9pbWFwb3B0aW9ucyBjeXJ1cy1pbWFw
ZC0yLjIuMTItbmV3L2xpYi9pbWFwb3B0aW9ucwotLS0gY3lydXMtaW1hcGQtMi4yLjEyL2xpYi9p
bWFwb3B0aW9ucwkyMDA0LTA3LTIxIDIxOjA3OjQ1LjAwMDAwMDAwMCArMDIwMAorKysgY3lydXMt
aW1hcGQtMi4yLjEyLW5ldy9saWIvaW1hcG9wdGlvbnMJMjAwNS0wNC0wMSAyMzozOTo0NS41NDAz
Mjg3NTMgKzAyMDAKQEAgLTc5NSw2ICs3OTUsMTUgQEAKIHsgInRsc2NhY2hlX2RiIiwgImJlcmtl
bGV5LW5vc3luYyIsIFNUUklOR0xJU1QoImJlcmtlbGV5IiwgImJlcmtlbGV5LW5vc3luYyIsICJz
a2lwbGlzdCIpfQogLyogVGhlIGN5cnVzZGIgYmFja2VuZCB0byB1c2UgZm9yIHRoZSBUTFMgY2Fj
aGUuICovCiAKK3sgInRsc19zZXJ2ZXJfY2FfZmlsZSIsIE5VTEwsIFNUUklORyB9CisvKiBGaWxl
IGNvbnRhaW5pbmcgdGhlIENlcnRpZmljYXRlIEF1dGhvcml0eSAoQ0EpIGNlcnRpZmljYXRlcwor
ICAgdGhhdCBidWlsZCB0aGUgaXNzdWVyIChDQSkgY2hhaW4gZm9yIHRoZSBzZXJ2ZXIgY2VydGlm
aWNhdGUuCisgICBJZiBpdCBpcyBtaXNzaW5nLCB0aGUgc2VydmVyIENBIGNoYWluIGlzIGJ1aWxk
IGZyb20gdGhlIGNlcnRpZmljYXRlcyBpbgorICAgdGxzX2NhX2ZpbGUgYW5kIHRsc19jYV9wYXRo
LgorICAgSWYgaXQgaXMgZW1wdHksIG5vIENBIGNlcnRpZmljYXRlcyBhcmUgc2VudC4KKyAgIChU
aGlzIGlzIHZhaWxkIGlmIHRoZSBzZXJ2ZXIgY2VydGlmaWNhdGUgd2FzIHNpZ25lZCBieSBhIHJv
b3QgQ0EpLgorICovCisKIHsgInRsc19jZXJ0X2ZpbGUiLCBOVUxMLCBTVFJJTkcgfQogLyogRmls
ZSBjb250YWluaW5nIHRoZSBjZXJ0aWZpY2F0ZSBwcmVzZW50ZWQgZm9yIHNlcnZlciBhdXRoZW50
aWNhdGlvbgogICAgZHVyaW5nIFNUQVJUVExTLiAgQSB2YWx1ZSBvZiAiZGlzYWJsZWQiIHdpbGwg
ZGlzYWJsZSBTU0wvVExTLiAqLwpAQCAtODA3LDggKzgxNiw5IEBACiAvKiBGaWxlIGNvbnRhaW5p
bmcgdGhlIHByaXZhdGUga2V5IGJlbG9uZ2luZyB0byB0aGUgc2VydmVyCiAgICBjZXJ0aWZpY2F0
ZS4gIEEgdmFsdWUgb2YgImRpc2FibGVkIiB3aWxsIGRpc2FibGUgU1NML1RMUy4gKi8KIAoteyAi
dGxzX3JlcXVpcmVfY2VydCIsIDAsIFNXSVRDSCB9Ci0vKiBSZXF1aXJlIGEgY2xpZW50IGNlcnRp
ZmljYXRlIGZvciBBTEwgc2VydmljZXMgKGltYXAsIHBvcDMsIGxtdHAsIHNpZXZlKS4gKi8KK3sg
InRsc19yZXF1aXJlX2NlcnQiLCAib2ZmIiwgIEVOVU0oIm9mZiIsICJvcHRpb25hbCIsICJyZXF1
aXJlIikgfQorLyogUmVxdWlyZSBhIGNsaWVudCBjZXJ0aWZpY2F0ZSBmb3IgQUxMIHNlcnZpY2Vz
IChpbWFwLCBwb3AzLCBsbXRwLCBzaWV2ZSkuCisgICAoaWYgc2V0IHRvICJvcHRpb25hbCIsIHRo
ZSBjbGllbnQgTUFZIHNlbmQgYSBjZXJ0aWZpY2F0ZSkgKi8KIAogeyAidGxzX3Nlc3Npb25fdGlt
ZW91dCIsIDE0NDAsIElOVCB9CiAvKiBUaGUgbGVuZ3RoIG9mIHRpbWUgKGluIG1pbnV0ZXMpIHRo
YXQgYSBUTFMgc2Vzc2lvbiB3aWxsIGJlIGNhY2hlZAo=
</data>        

          </attachment>
      

    </bug>

</bugzilla>