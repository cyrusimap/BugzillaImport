<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3232</bug_id>
          
          <creation_ts>2010-06-03 18:08 EDT</creation_ts>
          <short_desc>SASL should use pthread_mutex where available</short_desc>
          <delta_ts>2010-10-14 05:34:57 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus SASL</product>
          <component>SASL</component>
          <version>2.1.x</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          <priority>P5</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ian Anderson">iana@apple.com</reporter>
          <assigned_to name="Ken Murchison">murch@andrew.cmu.edu</assigned_to>
          <cc>iana@apple.com</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Ian Anderson">iana@apple.com</who>
            <bug_when>2010-06-03 18:08:48 EDT</bug_when>
            <thetext>Setting the global mutex functions is problematic because you can&apos;t guarantee that a library under you, or a client above you (depending on where exactly &quot;you&quot; fit in the software stack), hasn&apos;t already started using the SASL library.  Something you can run into goes like this.

A library you use (OpenLDAP if you want a specific example) uses libsasl2, unbeknownst to you.
1. You initialize the libsasl2 client, and don&apos;t touch the alloc/mutex functions, or set any global callbacks.
2. You make a few SASL client connections.
3. You use the library under you, which causes its initialization routines to switch out the, say, mutex functions (as OpenLDAP does).
4. You dispose your connections from #2.

You inexplicably crash when SASL tries to lock/unlock mutexes it created in #2.

If SASL used pthread_mutex on UNIX-esque systems, then nobody would have to mess with the global functions (at lesat on UNIX-y systems), and the risk of situations like the above would be lessened.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>