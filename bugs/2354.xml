<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>2354</bug_id>
          
          <creation_ts>2004-01-29 11:54 EDT</creation_ts>
          <short_desc>would be nice if libsasl could check passwords using saslauthd version 2</short_desc>
          <delta_ts>2010-10-25 18:46:33 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus SASL</product>
          <component>SASL</component>
          <version>1.5</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Nalin Dahyabhai">nalin@redhat.com</reporter>
          <assigned_to name="Rob Siemborski">rjs3@andrew.cmu.edu</assigned_to>
          
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Nalin Dahyabhai">nalin@redhat.com</who>
            <bug_when>2004-01-29 11:54:20 EDT</bug_when>
            <thetext>For environments in transition (which are possible because sasl 2 can be
installed, for the most part, in parallel with version 1), it would be nice if
libsasl&apos;s saslauthd password-checking method could communicate with saslauthd
version 2.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2004-01-29 11:55:45 EDT</bug_when>
            <thetext>no further non-security-fix work will be done on libsasl (SASLv1).  Please
instead encourage applications to upgrade to libsasl2.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Nalin Dahyabhai">nalin@redhat.com</who>
            <bug_when>2004-01-29 11:56:09 EDT</bug_when>
            <thetext>Created an attachment (id=249)
patch to add &quot;saslauthd_version&quot; to sasl configurations, and do the right thing
if it is &quot;2&quot;

So far as I can test, this patch does the job.	The default is to act as if
&quot;saslauthd_version&quot; is &quot;1&quot;, and do what the code did before.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Nalin Dahyabhai">nalin@redhat.com</who>
            <bug_when>2004-01-29 11:58:36 EDT</bug_when>
            <thetext>Fair enough.  Would the equivalent patch for libsasl2 be of any use (I was about
to submit it, but noticed this one marked WONTFIX)?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2004-01-29 12:00:15 EDT</bug_when>
            <thetext>I&apos;d never expect to see a SASLv2 libsasl speaking to a SASLv1 saslauthd.  In
fact, I wouldn&apos;t expect much of anything to talk to a SASLv1 saslauthd (most
plaintext password verification in SASLv1 was through the internal checkpw.c
methods anyway)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Nalin Dahyabhai">nalin@redhat.com</who>
            <bug_when>2004-01-29 12:04:27 EDT</bug_when>
            <thetext>Yes, the libsasl2 patch would have been more for completeness than anything
else, it was the libsasl(1) patch I was really hoping for.  I&apos;m a bit confused
by your comment about saslauthd, though, so far as I can tell it doesn&apos;t use
lib/checkpw.c.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2004-01-29 12:05:48 EDT</bug_when>
            <thetext>saslauthd does not, however saslauthd in SASLv1 was rarely (if ever) used at
all, instead people used the internal pwcheck_methods.</thetext>
          </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>249</attachid>
            <date>2004-01-29 11:56 EDT</date>
            <desc>patch to add &quot;saslauthd_version&quot; to sasl configurations, and do the right thing if it is &quot;2&quot;</desc>
            <filename>cyrus-sasl-1.5.28-saslauthd2.patch</filename>
            <type>text/plain</type>
            <size>4626</size>
            <attacher>nalin@redhat.com</attacher>
            
              <data encoding="base64">IlNwZWFrIiB0aGUgc2FzbGF1dGhkIHZlcnNpb24gMiBwcm90b2NvbCBpZiAic2FzbGF1dGhkX3Zl
cnNpb24iIGlzICIyIi4gIFdlCmNhbiBuZWVkIHRoaXMgYmVjYXVzZSB0aGUgcHJvdG9jb2xzIGFy
ZSBkaWZmZXJlbnQsIGFuZCBydW5uaW5nIGJvdGggaXMKYSkgbm90IHBvc3NpYmxlIGlmIGJvdGgg
YXJlIGluc3RhbGxlZCBpbnRvIHRoZSBzYW1lIHByZWZpeApiKSBjb25mdXNpbmcgKHRvIHRoZSBw
b2ludCB3aGVyZSBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGJpbmFyeSBwYWNrYWdlIHNob3VsZAog
ICAgICAgICAgICAgIGp1c3QgdXNlIHZlcnNpb24gMiBieSBkZWZhdWx0KQpjKSBzaWxseQoKLS0t
IGN5cnVzLXNhc2wtMS41LjI4L2xpYi9jaGVja3B3LmMJMjAwMS0xMi0yMCAyMTozMTowNy4wMDAw
MDAwMDAgLTA1MDAKKysrIGN5cnVzLXNhc2wtMS41LjI4L2xpYi9jaGVja3B3LmMJMjAwNC0wMS0x
MiAxNToxMzoyNy4wMDAwMDAwMDAgLTA1MDAKQEAgLTEwOTAsOSArMTA5MCw4IEBACiBzdGF0aWMg
aW50IHNhc2xhdXRoZF92ZXJpZnlfcGFzc3dvcmQoc2FzbF9jb25uX3QgKmNvbm4sCiAJCQkJICAg
Y29uc3QgY2hhciAqdXNlcmlkLCAKIAkJCQkgICBjb25zdCBjaGFyICpwYXNzd2QsCi0JCQkJICAg
Y29uc3QgY2hhciAqc2VydmljZSBfX2F0dHJpYnV0ZV9fKCh1bnVzZWQpKSwKLQkJCQkgICBjb25z
dCBjaGFyICp1c2VyX3JlYWxtIAotCQkJCSAgICAgICAgICAgICAgIF9fYXR0cmlidXRlX18oKHVu
dXNlZCkpLCAKKwkJCQkgICBjb25zdCBjaGFyICpzZXJ2aWNlLAorCQkJCSAgIGNvbnN0IGNoYXIg
KnVzZXJfcmVhbG0sCiAJCQkJICAgY29uc3QgY2hhciAqKnJlcGx5KQogewogICAgIHN0YXRpYyBj
aGFyIHJlc3BvbnNlWzEwMjRdOwpAQCAtMTEwMyw3ICsxMTAyLDcgQEAKICAgICBzYXNsX2dldG9w
dF90ICpnZXRvcHQ7CiAgICAgdm9pZCAqY29udGV4dDsKICAgICBjaGFyIHB3cGF0aFtzaXplb2Yo
c3J2YWRkci5zdW5fcGF0aCldOwotICAgIGNvbnN0IGNoYXIgKnAgPSBOVUxMOworICAgIGNvbnN0
IGNoYXIgKnAgPSBOVUxMLCAqcSA9IE5VTEw7CiAKICAgICBpZiAocmVwbHkpCiAJKnJlcGx5ID0g
TlVMTDsKQEAgLTExMTEsNiArMTExMCw3IEBACiAgICAgLyogY2hlY2sgdG8gc2VlIGlmIHRoZSB1
c2VyIGNvbmZpZ3VyZWQgYSBydW5kaXIgKi8KICAgICBpZiAoX3Nhc2xfZ2V0Y2FsbGJhY2soY29u
biwgU0FTTF9DQl9HRVRPUFQsICZnZXRvcHQsICZjb250ZXh0KSA9PSBTQVNMX09LKSB7CiAJZ2V0
b3B0KGNvbnRleHQsIE5VTEwsICJzYXNsYXV0aGRfcGF0aCIsICZwLCBOVUxMKTsKKwlnZXRvcHQo
Y29udGV4dCwgTlVMTCwgInNhc2xhdXRoZF92ZXJzaW9uIiwgJnEsIE5VTEwpOwogICAgIH0KICAg
ICBpZiAocCkgewogCXN0cm5jcHkocHdwYXRoLCBwLCBzaXplb2YocHdwYXRoKSk7CkBAIC0xMTM3
LDYgKzExMzcsMTQ0IEBACiAJcmV0dXJuIFNBU0xfRkFJTDsKICAgICB9CiAKKyAgICBpZiAocSAm
JiAoKnEgPT0gJzInKSkgeworCXVuc2lnbmVkIHNob3J0IGNvdW50LCB1Y291bnQsIHBjb3VudCwg
c2NvdW50LCByY291bnQ7CisJY2hhciBxdWVyeVs4MTkyXTsKKwljaGFyICpxdWVyeV9lbmQ7CisJ
aW50IHNlbnQsIHRvdGFsOworCisJdWNvdW50ID0gc3RybGVuKHVzZXJpZCA/IHVzZXJpZCA6ICIi
KTsKKwlwY291bnQgPSBzdHJsZW4ocGFzc3dkID8gcGFzc3dkIDogIiIpOworCXNjb3VudCA9IHN0
cmxlbihzZXJ2aWNlID8gc2VydmljZSA6ICIiKTsKKwlyY291bnQgPSBzdHJsZW4odXNlcl9yZWFs
bSA/IHVzZXJfcmVhbG0gOiAiIik7CisJaWYgKHVjb3VudCArIHBjb3VudCArIHNjb3VudCArIHJj
b3VudCArIDQgKiBzaXplb2YodWNvdW50KSA+PSBzaXplb2YocXVlcnkpKSB7CisJICAgIGNsb3Nl
KHMpOworCSAgICBpZiAocmVwbHkpCisJCSpyZXBseSA9ICJub3QgZW5vdWdoIG1lbW9yeSI7CisJ
ICAgIHJldHVybiBTQVNMX0ZBSUw7CisJfQorCisJcXVlcnlfZW5kID0gcXVlcnk7CisKKwljb3Vu
dCA9IGh0b25zKHVjb3VudCk7CisJbWVtY3B5KHF1ZXJ5X2VuZCwgJmNvdW50LCBzaXplb2YoY291
bnQpKTsKKwlxdWVyeV9lbmQgKz0gc2l6ZW9mKGNvdW50KTsKKwlpZiAodWNvdW50ID4gMCkKKwkg
ICAgbWVtY3B5KHF1ZXJ5X2VuZCwgdXNlcmlkLCB1Y291bnQpOworCXF1ZXJ5X2VuZCArPSB1Y291
bnQ7CisKKwljb3VudCA9IGh0b25zKHBjb3VudCk7CisJbWVtY3B5KHF1ZXJ5X2VuZCwgJmNvdW50
LCBzaXplb2YoY291bnQpKTsKKwlxdWVyeV9lbmQgKz0gc2l6ZW9mKGNvdW50KTsKKwlpZiAocGNv
dW50ID4gMCkKKwkgICAgbWVtY3B5KHF1ZXJ5X2VuZCwgcGFzc3dkLCBwY291bnQpOworCXF1ZXJ5
X2VuZCArPSBwY291bnQ7CisKKwljb3VudCA9IGh0b25zKHNjb3VudCk7CisJbWVtY3B5KHF1ZXJ5
X2VuZCwgJmNvdW50LCBzaXplb2YoY291bnQpKTsKKwlxdWVyeV9lbmQgKz0gc2l6ZW9mKGNvdW50
KTsKKwlpZiAoc2NvdW50ID4gMCkKKwkgICAgbWVtY3B5KHF1ZXJ5X2VuZCwgc2VydmljZSwgc2Nv
dW50KTsKKwlxdWVyeV9lbmQgKz0gc2NvdW50OworCisJY291bnQgPSBodG9ucyhyY291bnQpOwor
CW1lbWNweShxdWVyeV9lbmQsICZjb3VudCwgc2l6ZW9mKGNvdW50KSk7CisJcXVlcnlfZW5kICs9
IHNpemVvZihjb3VudCk7CisJaWYgKHJjb3VudCA+IDApCisJICAgIG1lbWNweShxdWVyeV9lbmQs
IHVzZXJfcmVhbG0sIHJjb3VudCk7CisJcXVlcnlfZW5kICs9IHJjb3VudDsKKworCXRvdGFsID0g
MDsKKwlkbyB7CisJICAgIHNlbnQgPSB3cml0ZShzLCBxdWVyeSArIHRvdGFsLAorCQkJIHF1ZXJ5
X2VuZCAtIChxdWVyeSArIHRvdGFsKSk7CisJICAgIHN3aXRjaCAoc2VudCkgeworCSAgICBjYXNl
IC0xOgorCSAgICAgICAgc3dpdGNoIChlcnJubykgeworCSAgICAgICAgY2FzZSBFSU5UUjoKKwkJ
ICAgIGNvbnRpbnVlOworCSAgICAgICAgZGVmYXVsdDoKKwkJICAgIGNsb3NlKHMpOworCQkgICAg
aWYgKHJlcGx5KQorCQkgICAgICAgICpyZXBseSA9ICJ3cml0ZSBmYWlsZWQiOworCQkgICAgcmV0
dXJuIFNBU0xfRkFJTDsKKwkgICAgICAgIH0KKwkgICAgY2FzZSAwOgorCQljbG9zZShzKTsKKwkJ
aWYgKHJlcGx5KQorCQkgICAgKnJlcGx5ID0gIndyaXRlIGZhaWxlZCI7CisJCXJldHVybiBTQVNM
X0ZBSUw7CisJICAgIGRlZmF1bHQ6CisJICAgICAgICB0b3RhbCArPSBzZW50OworCSAgICAgICAg
YnJlYWs7CisJICAgIH0KKwl9IHdoaWxlICh0b3RhbCA8IChxdWVyeV9lbmQgLSBxdWVyeSkpOwor
CXRvdGFsID0gMjsKKwlkbyB7CisJICAgIHNlbnQgPSByZWFkKHMsIHJlc3BvbnNlICsgMiAtIHRv
dGFsLCB0b3RhbCk7CisJICAgIHN3aXRjaCAoc2VudCkgeworCSAgICBjYXNlIC0xOgorCSAgICAg
ICAgc3dpdGNoIChlcnJubykgeworCSAgICAgICAgY2FzZSBFSU5UUjoKKwkJICAgIGNvbnRpbnVl
OworCSAgICAgICAgZGVmYXVsdDoKKwkJICAgIGNsb3NlKHMpOworCQkgICAgaWYgKHJlcGx5KQor
CQkgICAgICAgICpyZXBseSA9ICJyZWFkIGZhaWxlZCI7CisJCSAgICByZXR1cm4gU0FTTF9GQUlM
OworCSAgICAgICAgfQorCQlicmVhazsKKwkgICAgY2FzZSAwOgorCQljbG9zZShzKTsKKwkJaWYg
KHJlcGx5KQorCQkgICAgKnJlcGx5ID0gInJlYWQgZmFpbGVkIjsKKwkJcmV0dXJuIFNBU0xfRkFJ
TDsKKwkgICAgZGVmYXVsdDoKKwkgICAgICAgIHRvdGFsIC09IHNlbnQ7CisJICAgICAgICBicmVh
azsKKwkgICAgfQorCX0gd2hpbGUgKHRvdGFsID4gMCk7CisJbWVtY3B5KCZjb3VudCwgcmVzcG9u
c2UsIDIpOworCXRvdGFsID0gaHRvbnMoY291bnQpOworCWlmICh0b3RhbCArIDEgPj0gc2l6ZW9m
KHJlc3BvbnNlKSkgeworCSAgICBpZiAocmVwbHkpCisJCSpyZXBseSA9ICJub3QgZW5vdWdoIG1l
bW9yeSI7CisJICAgIHJldHVybiBTQVNMX0ZBSUw7CisJfQorCWRvIHsKKwkgICAgc2VudCA9IHJl
YWQocywgcmVzcG9uc2UgKyBodG9ucyhjb3VudCkgLSB0b3RhbCwgdG90YWwpOworCSAgICBzd2l0
Y2ggKHNlbnQpIHsKKwkgICAgY2FzZSAtMToKKwkgICAgICAgIHN3aXRjaCAoZXJybm8pIHsKKwkg
ICAgICAgIGNhc2UgRUlOVFI6CisJCSAgICBjb250aW51ZTsKKwkgICAgICAgIGRlZmF1bHQ6CisJ
CSAgICBjbG9zZShzKTsKKwkJICAgIGlmIChyZXBseSkKKwkJICAgICAgICAqcmVwbHkgPSAicmVh
ZCBmYWlsZWQiOworCQkgICAgcmV0dXJuIFNBU0xfRkFJTDsKKwkgICAgICAgIH0KKwkJYnJlYWs7
CisJICAgIGNhc2UgMDoKKwkJY2xvc2Uocyk7CisJCWlmIChyZXBseSkKKwkJICAgICpyZXBseSA9
ICJyZWFkIGZhaWxlZCI7CisJCXJldHVybiBTQVNMX0ZBSUw7CisJICAgIGRlZmF1bHQ6CisJICAg
ICAgICB0b3RhbCAtPSBzZW50OworCSAgICAgICAgYnJlYWs7CisJICAgIH0KKwl9IHdoaWxlICh0
b3RhbCA+IDApOworCXJlc3BvbnNlW2h0b25zKGNvdW50KV0gPSAnXDAnOworCWlmICghc3RybmNt
cChyZXNwb25zZSwgIk9LIiwgMikpIHsKKwkgICAgcmV0dXJuIFNBU0xfT0s7CisJfQorCWlmIChy
ZXBseSkKKwkgICAgKnJlcGx5ID0gImF1dGhlbnRpY2F0aW9uIGZhaWxlZCI7CisJY2xvc2Uocyk7
CisJcmV0dXJuIFNBU0xfQkFEQVVUSDsKKyAgICB9CisKICAgICB7CiAJaW50IHVfbGVuOwogCWlu
dCBwX2xlbjsK
</data>        

          </attachment>
      

    </bug>

</bugzilla>