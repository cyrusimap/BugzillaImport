<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>2086</bug_id>
          
          <creation_ts>2003-06-26 18:38 EDT</creation_ts>
          <short_desc>long secret (&gt;64bytes) is trancated in CRAM-MD5 plugin</short_desc>
          <delta_ts>2010-10-25 18:46:32 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus SASL</product>
          <component>plugins</component>
          <version>2.1.x</version>
          <rep_platform>Other</rep_platform>
          <op_sys>other</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P2</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Rob Siemborski">rjs3@andrew.cmu.edu</reporter>
          <assigned_to name="Rob Siemborski">rjs3@andrew.cmu.edu</assigned_to>
          <cc>jiang_xiong@yahoo.com</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Rob Siemborski">rjs3@andrew.cmu.edu</who>
            <bug_when>2003-06-26 18:38:45 EDT</bug_when>
            <thetext>My brief reading of the RFC makes this look like its a problem (we should be
using the MD5 digest of long secrets instead of just truncating them). -Rob

----
In make_hashed() in the plugins/cram.c of latest
cyrus-sasl-2.1.13, long secret string (&gt;64bytes) is
trancated before calculating the hmac_MD5 hash.
However, it is stated in RFC2195 that the MD5 digest
of the shared secret should be used instead.

The hmac_MD5 implementation in lib/md5.c has already
taken this into account. So make_hashed() actually
doesn&apos;t need to worry about it.  Doing a straight
hmac_MD5 should be good enough and correct.

Please let me know if I am right. I haven&apos;t test
against other CRAM-MD5 servers though.

copied from RFC2195:

&quot;In this example, the shared secret is the string
&apos;tanstaaftanstaaf&apos;.  Hence, the Keyed MD5 digest is
produced by calculating

        MD5((tanstaaftanstaaf XOR opad),
            MD5((tanstaaftanstaaf XOR ipad),
&lt;1896.697170952@postoffice.reston.mci.net&gt;))

where ipad and opad are as defined in the keyed-MD5
Work in Progress [KEYED-MD5] and the string shown in
the challenge is the base64 encoding of
&lt;1896.697170952@postoffice.reston.mci.net&gt;. The shared
secret is null-padded to a length of 64 bytes. If the 
     shared secret is longer than 64 bytes, the MD5
digest of the shared secret is used as a 16 byte input
to the keyed MD5 calculation.&quot;

-Xiong Jiang</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">ken@oceana.com</who>
            <bug_when>2003-07-29 17:05:56 EDT</bug_when>
            <thetext>Fixed per Xiong Jiang&apos;s suggestion.  The built-in HMAC code handles long a short
secrets properly.

http://bugzilla.andrew.cmu.edu/cgi-bin/cvsweb.cgi/src/sasl/plugins/cram.c.diff?r1=1.79&amp;r2=1.80</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>