<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3548</bug_id>
          
          <creation_ts>2011-08-30 02:39 EDT</creation_ts>
          <short_desc>CID 122: RESOURCE_LEAK in do_referral</short_desc>
          <delta_ts>2011-08-30 02:39:29 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>perl</component>
          <version>2.4.x (next)</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          <priority>P5</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Greg Banks">gnb@fastmail.fm</reporter>
          <assigned_to name="Bron Gondwana">brong@fastmail.fm</assigned_to>
          
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2011-08-30 02:39:29 EDT</bug_when>
            <thetext>Found by Coverity.  Some error paths in perl/sieve/lib/isieve.c:do_referral leak a newly allocated isieve_t object.

626  	
Event alloc_arg: Calling allocation function &quot;init_net&quot; on &quot;obj_new&quot;. [details]
627  	    ret = init_net(host, port, &amp;obj_new);
At conditional (1): &quot;ret&quot; taking false path
628  	    if(ret) return STAT_NO;
629  	
630  	    /* Start up SASL */
Event noescape: Variable &quot;obj_new&quot; is not freed or pointed-to in function &quot;init_sasl&quot;. [details]
631  	    ret = init_sasl(obj_new, 128, callbacks);
Event leaked_storage: Variable &quot;obj_new&quot; going out of scope leaks the storage it points to.
At conditional (2): &quot;ret&quot; taking true path
632  	    if(ret) return STAT_NO;
633  	
634  	    /* Authenticate */
Event noescape: Variable &quot;obj_new&quot; is not freed or pointed-to in function &quot;read_capability&quot;. [details]
635  	    mechlist = read_capability(obj_new);
636  	
637  	    do {
638  		mtried = NULL;
Event noescape: Variable &quot;obj_new&quot; is not freed or pointed-to in function &quot;auth_sasl&quot;. [details]
639  		ret = auth_sasl(mechlist, obj_new, &amp;mtried, &amp;ssf, &amp;errstr);
640  		if (errstr) {
641  		    free(errstr);
642  		    errstr = NULL;
643  		}
Event noescape: Variable &quot;obj_new&quot; is not freed or pointed-to in function &quot;init_sasl&quot;. [details]
644  		if(ret) init_sasl(obj_new, 128, callbacks);
645</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>