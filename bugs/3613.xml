<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3613</bug_id>
          
          <creation_ts>2011-12-14 10:33 EDT</creation_ts>
          <short_desc>CATENATE command returns BADURL</short_desc>
          <delta_ts>2012-04-18 07:26:23 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>IMAP</component>
          <version>2.4.11</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>2.4.15</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jan Schneider">jan@horde.org</reporter>
          <assigned_to name="Greg Banks">gnb@fastmail.fm</assigned_to>
          <cc>gnb@fastmail.fm</cc>
    
    <cc>Leena.Heino@uta.fi</cc>
    
    <cc>vanmeeuwen@kolabsys.com</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Jan Schneider">jan@horde.org</who>
            <bug_when>2011-12-14 10:33:41 EDT</bug_when>
            <thetext>This is an excerpt of client/server communication, and AFAICS the request is correct. But Cyrus obviously isn&apos;t able to parse the CATENATE parts correctly:

S: * OK [CAPABILITY IMAP4rev1 LITERAL+ ID ENABLE STARTTLS LOGINDISABLED] xxx Cyrus IMAP v2.4.11-TUGraz server ready
C: 1 STARTTLS
S: 1 OK Begin TLS negotiation now
C: [LOGIN Command - username: koarl]
S: 2 OK [CAPABILITY IMAP4rev1 LITERAL+ ID ENABLE ACL RIGHTS=kxte QUOTA MAILBOX-R
EFERRALS NAMESPACE UIDPLUS NO_ATOMIC_RENAME UNSELECT CHILDREN MULTIAPPEND BINARY
 CATENATE CONDSTORE ESEARCH SORT SORT=MODSEQ SORT=DISPLAY THREAD=ORDEREDSUBJECT 
THREAD=REFERENCES ANNOTATEMORE LIST-EXTENDED WITHIN QRESYNC SCAN XLIST URLAUTH U
RLAUTH=BINARY X-NETSCAPE LOGINDISABLED AUTH=LOGIN AUTH=PLAIN COMPRESS=DEFLATE ID
LE] User logged in SESSIONID=&lt;xxx-7241-1323876204-1&gt;
C: 3 EXAMINE INBOX
S: * 163 EXISTS
S: * 0 RECENT
S: * FLAGS (\Answered \Flagged \Draft \Deleted \Seen)
S: * OK [PERMANENTFLAGS ()] Ok
S: * OK [UNSEEN 15] Ok
S: * OK [UIDVALIDITY 1258492234] Ok
S: * OK [UIDNEXT 1006] Ok
S: * OK [HIGHESTMODSEQ 386] Ok
S: * OK [URLMECH INTERNAL] Ok
S: 3 OK [READ-ONLY] Completed
C: 4 UID FETCH 1004 (BODYSTRUCTURE)
S: * 162 FETCH (UID 1004 BODYSTRUCTURE ((&quot;TEXT&quot; &quot;PLAIN&quot; (&quot;CHARSET&quot; &quot;ISO-8859-15&quot;
 &quot;FORMAT&quot; &quot;flowed&quot;) NIL NIL &quot;7BIT&quot; 313 12 NIL NIL NIL NIL)(&quot;IMAGE&quot; &quot;JPEG&quot; (&quot;NAME
&quot; &quot;51XsE0eZ9KL._SS500_.jpg&quot;) NIL NIL &quot;BASE64&quot; 61810 NIL (&quot;ATTACHMENT&quot; (&quot;FILENAME
&quot; &quot;51XsE0eZ9KL._SS500_.jpg&quot;)) NIL NIL) &quot;MIXED&quot; (&quot;BOUNDARY&quot; &quot;------------00030205
0904080105050701&quot;) NIL NIL NIL))
S: 4 OK Completed (0.000 sec)
C: 5 UID FETCH 1004 (INTERNALDATE FLAGS)
S: * 162 FETCH (FLAGS (\Seen) UID 1004 INTERNALDATE &quot;13-Dec-2011 09:06:32 +0100&quot;
)
S: 5 OK Completed (0.000 sec)
C: 6 UNSELECT
S: 6 OK Completed
C: 7 APPEND INBOX (\seen) &quot;13-Dec-2011 09:06:32 +0100&quot; CATENATE (URL &quot;/INBOX;UID
VALIDITY=1258492234/;UID=1004/;SECTION=HEADER&quot; TEXT {42+}
C: [LITERAL DATA - 42 bytes]
C:  URL &quot;/INBOX;UIDVALIDITY=1258492234/;UID=1004/;SECTION=1.MIME&quot; URL &quot;/INBOX;UI
DVALIDITY=1258492234/;UID=1004/;SECTION=1&quot; TEXT {42+}
C: [LITERAL DATA - 42 bytes]
C:  TEXT {126+}
C: [LITERAL DATA - 126 bytes]
C:  TEXT {44+}
C: [LITERAL DATA - 44 bytes]
C: )
&gt;&gt; Slow IMAP Command: 1,161 seconds
S: 7 NO [BADURL &quot;TEXT&quot;] Mailbox does not exist
C: 8 LOGOUT
S: * BYE LOGOUT received
S: 8 OK Completed</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jan Schneider">jan@horde.org</who>
            <bug_when>2012-03-28 13:01:33 EDT</bug_when>
            <thetext>Can anybody at least confirm that this is a Cyrus bug?

This currently breaks stripping attachments in any Horde Groupware/Webmail installation running on a 2.4 server.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-03-29 00:25:08 EDT</bug_when>
            <thetext>Hi Jan,

Sorry it took so long for someone to look at this.

From my reading of RFC4469, it appears that the APPEND command being sent by the client is entirely correct.  Further, the Cyrus server definitely has at least one bug.  The string after BADURL is supposed to be the first URL that failed.  Instead, Cyrus is replying with either

 * the LAST url that failed, or

 * the  &quot;TEXT&quot; keyword, if there&apos;s any of those after the last failing URL.

The culprit is a missing &apos;return&apos; statement in append_catenate().

However, that bug is just in the error reporting and doesn&apos;t explain why you&apos;re seeing failures, which is a little more mysterious.   The possible reasons I can see are:

 * INBOX does not exist in the mboxlist db

 * INBOX exists but the user has neither r nor l rights

 * INBOX has the MBTYPE_MOVING flag in the mboxlist db

 * INBOX has OPT_MAILBOX_DELETED set

 * the mailbox name was confused somehow during URL parsing

All those explanations except the last one are unlikely given that the user&apos;s INBOX was successfully EXAMINEd just two commands before.  I ran an experiment and the URL parsing code does in fact correctly parse URLs like those shown, so that last explanation isn&apos;t the case either.

Another possibility is that Cyrus is getting confused and trying to parse the keyword &quot;TEXT&quot; as a URL.  The URL parsing code is sufficiently liberal that it would report was a correct URL with mailbox=&quot;TEXT&quot;, which is probably not the name of an existing mailbox.  I don&apos;t see quite how that would happen in the parsing code, but it&apos;s a possibility.

Jan, can you send us the offending traffic, without Bugzilla whitespace damage?  An attachment to this Bug should be fine.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jan Schneider">jan@horde.org</who>
            <bug_when>2012-03-29 04:36:59 EDT</bug_when>
            <thetext>Created an attachment (id=1459)
IMAP log

I don&apos;t think this is anything wrong with INBOX flags or similar, because I could also reproduce this on a 2.4.9 Cyrus on a completely different system.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-03-29 22:34:42 EDT</bug_when>
            <thetext>Sigh...there were actually 4 bugs here.

* mistaken BADURL error reporting, as described above.

* when opening the mailbox to pull out the section data
  described by a URL, no authentication information was
  provided to index_open(), which then concluded that
  the user had no rights at all to the mailbox, and
  specifically neither the r(ead) nor l(ookup) rights,
  resulting in a spurious &quot;Mailbox does not exist&quot; error.

* when fetching data from a message section as specified
  by a URL, the cached section structure was misinterpreted,
  resulting in a spurious &quot;No such message part&quot; error.

* when fetching data from a message section as specified
  by a URL and the section name did not start with a number,
  index_urlfetch() would incorrectly return -1 on success,
  resulting in a spurious &quot;Unknown code ____ 255&quot; error.

Fixed in the master branch by

The following changes since commit 60282ea9432679014ce0daa53473ded474b56a14:

  idle: don&apos;t do FD_ISSET(-1,) it&apos;s unhelpful (2012-03-28 08:48:05 +1100)

are available in the git repository at:
  ssh://git.cyrusimap.org/git/cyrus-imapd master

Greg Banks (3):
      Bug 3613 - fix BADURL response from CATENATE
      Bug 3613 - pass auth to index_open in CATENATE
      Bug 3613 - fix index_urlfetch()

 imap/imapd.c |   16 ++++++++++++++--
 imap/index.c |    6 ++++--
 2 files changed, 18 insertions(+), 4 deletions(-)


I don&apos;t have an automatic test yet (sorry).

I&apos;ll look into the feasibility of backporting for 2.4.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-03-29 23:24:53 EDT</bug_when>
            <thetext>&gt; * mistaken BADURL error reporting [...]

Has been in the URLFETCH and CATENATE code since it was introduced in the 2.3 merge, and is in all 2.3 and 2.4 releases.

&gt; * [...] no authentication information was
&gt;   provided to index_open() [...]
&gt; 
&gt; * [...] the cached section structure was misinterpreted, [...]
&gt; 
&gt; * [...] index_urlfetch() would incorrectly return -1 on success, [...]

All three were regressions introduced in the same commit during the 2.4 merge, and are in all 2.4 releases.

Jeroen: Fortunately this code has been relatively stable since the 2.4 merge; backporting is an easy cherry-pick and will be correct.

Jan: Thanks for doing our testing for us :(</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Leena Heino">Leena.Heino@uta.fi</who>
            <bug_when>2012-03-30 13:33:46 EDT</bug_when>
            <thetext>(In reply to comment #5)
&gt; Jeroen: Fortunately this code has been relatively stable since the 2.4 merge;
&gt; backporting is an easy cherry-pick and will be correct.

It seems commit 545dba13f94dc48a17357be2b0566643368d4c45 adds this to code in imap/imapd.c:
            if (!r) {
                struct index_init init;
                memset(&amp;init, 0, sizeof(init));
                init.qresync = imapd_client_capa &amp; CAPA_QRESYNC;
                init.userid = imapd_userid;
                init.authstate = imapd_authstate;
                init.out = imapd_out;
                r = index_open(mailboxname, &amp;init, &amp;state);
                if (init.vanishedlist) seqset_free(init.vanishedlist);
            }

Which leads to compile error in 2.4.14:
imapd.c: In function `catenate_url&apos;:
imapd.c:3092: error: structure has no member named `vanishedlist&apos;
imapd.c:3092: error: structure has no member named `vanishedlist&apos;
gmake: *** [imapd.o] Error 1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-04-01 18:52:58 EDT</bug_when>
            <thetext>Leena: it should be fine if you remove the 1 line which mentions the vanishedlist.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2012-04-05 08:32:43 EDT</bug_when>
            <thetext>picked to cyrus-imapd-2.4, will be in 2.4.15</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2012-04-18 07:26:23 EDT</bug_when>
            <thetext>Closing ticket in preparation of the 2.4.15 release.</thetext>
          </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>1459</attachid>
            <date>2012-03-29 04:36 EDT</date>
            <desc>IMAP log</desc>
            <filename>imap.log</filename>
            <type>text/plain</type>
            <size>3703</size>
            <attacher>jan@horde.org</attacher>
            
              <data encoding="base64">LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCj4+IFRpbWVzdGFtcDogVGh1LCAyOSBNYXIg
MjAxMiAxMDozMDozOCArMDIwMApTOiAqIE9LIFtDQVBBQklMSVRZIElNQVA0cmV2MSBMSVRFUkFM
KyBJRCBFTkFCTEUgIFhJTUFQUFJPWFldIG5lbyBDeXJ1cyBJTUFQIHYyLjQuOS1EZWJpYW4tMi40
LjktMSBzZXJ2ZXIgcmVhZHkKQzogW0xPR0lOIENvbW1hbmQgLSB1c2VybmFtZTogamFuXQpTOiAq
IE9LIFtYUFJPWFlSRVVTRV0gSU1BUCBjb25uZWN0aW9uIHJldXNlZCBieSBpbWFwcHJveHkKUzog
MSBPSyBVc2VyIGxvZ2dlZCBpbgpDOiAyIEVYQU1JTkUgSU5CT1ggKFFSRVNZTkMgKDk2ODI1NjI1
MyAyODggMDozLDE4NDg0OCwxODY3NTYsMTg3MDU5LDE4NzA3NiwxODg0MTYsMTg4NDY2LDE4ODY0
MiwxODg5MDcsMTg5MDA4LDE4OTAxMCwxOTAzNDgsMTkwODgwLDE5MTEyMywxOTI5NTYsMTk0MTI3
LDE5NDIzNSwxOTU5NDQsMTk2MTY0LDE5NjYwNiwyMDI1MzUsMjA1NjQ1LDIwNjAyMjoyMDYwMjQs
MjA2Mjk1LDIwNjc4OCwyMDY4MTgsMjA2OTkzLDIwNzE2NCwyMDcyMjksMjA3MjU0LDIwNzMxMywy
MDc0MzksMjA3NTMxLDIwNzY3MSwyMDgwNDEsMjA4MjgyOjIwODI4MywyMDgyODU6MjA4Mjg2LDIw
ODI5OToyMDgzMDAsMjA4MzAzOjIwODMwNCwyMDgzMDYsMjA4MzEwLDIwODMxOSwyMDgzMjQsMjA4
MzI4LDIwODM2NywyMDgzNzIsMjEyMDU0LDIxMzUzMywyMTM2ODEsMjEzOTYwOjIxMzk2MSwyMTU1
NDYsMjE2ODA5LDIyMjk2MCwyMjY4NjgsMjI3MDg1LDIyOTQ5MCwyMjk4NTYsMjMwMDIwLDIzMDQx
NSwyMzA1MDMsMjMwNTg2LDIzMDYzOCwyMzEzNTYsMjMzMzYxLDIzNDA1MywyMzkzODUsMjM5NjU2
LDI0NDAwOCwyNDczNTMsMjQ3MzYyOjI0NzM2MywyNTQ3NTIsMjU1Njc4OjI1NTY3OSwyNTYxNDks
MjU2MTUyLDI1NjgyOSwyNjc1NzAsMjY3ODY3LDI2NzkxMToyNjc5MTIsMjY5MDE2LDI3MDMzNjoy
NzAzMzcsMjcwMzM5LDI3MDM3MCwyNzEzNzgsMjcxNjk2LDI3MjIzOSwyNzIyODEsMjcyNjA4LDI3
Mjg0MSwyNzMwNjEsMjczMTM1LDI3MzE5NSwyNzM0ODQsMjczODAyLDI3Mzk1MywyNzQwMzcsMjc0
MzI2LDI3NDUzMSwyNzQ1MzYsMjc0NzgzLDI3NTAzNCwyNzUwMzYsMjc1MDM5LDI3NTA2MSwyNzUx
MjgsMjc1MTQ4LDI3NTI4OSwyNzUzOTMsMjc1NDg5LDI3NTYxNywyNzU2NDUsMjc1NzQ1LDI3NjE5
NCwyNzY5MjksMjc2OTMxLDI3NzA1MiwyNzcwNjQsMjc3MDY4LDI3NzA3MiwyNzcwNzQ6Mjc3MDkx
LDI3NzE0NSwyNzcxNTk6Mjc3MTYwLDI3NzIxMzoyNzcyMTQsMjc3MjE5OjI3NzIyMSwyNzcyMjM6
Mjc3MjI4LDI3NzI1MCwyNzcyODEsMjc3MjgzOjI3NzI4NCwyNzczMDI6Mjc3MzAzLDI3NzMwNToy
NzczMTAsMjc3MzgwLDI3NzQyOCwyNzc0OTAsMjc3NDk2LDI3NzUzNzoyNzc1MzgsMjc3NTk4LDI3
NzYwOSwyNzc2NjgsMjc3Njk0LDI3NzcwMCwyNzc3MDksMjc3NzE1LDI3Nzk0OSwyNzgwNTk6Mjc4
MDYwLDI3ODA3MDoyNzgwNzEsMjc4MDczOjI3ODA3NSwyNzgyMDIsMjc4MzAxLDI3ODMwMywyNzgz
NDIsMjc4MzU3LDI3ODM1OSwyNzgzODksMjc4MzkxLDI3ODM5MzoyNzgzOTQsMjc4Mzk5OjI3ODQw
NCkpClM6ICogMTg0IEVYSVNUUwpTOiAqIDAgUkVDRU5UClM6ICogRkxBR1MgKFxBbnN3ZXJlZCBc
RmxhZ2dlZCBcRHJhZnQgXERlbGV0ZWQgXFNlZW4gTm9uSnVuayAkTGFiZWwyICRMYWJlbDEgJExh
YmVsMyAkTGFiZWw0ICRMYWJlbDUgSnVuayAkRm9yd2FyZGVkIE5vdEp1bmsgZm9vIEFNTU1hIENv
bnN1bHRpbmcgJE5vdEp1bmsgSnVua1JlY29yZGVkICRKdW5rIFRyYWluaW5nICRNRE5TZW50IEtN
QUlMRk9SV0FSREVEIEtNQUlMVE9ETyBLTUFJTFdBVENIRUQgS01BSUxJR05PUkVEICRUT0RPICRX
QVRDSEVEICRJR05PUkVEIEgzKQpTOiAqIE9LIFtQRVJNQU5FTlRGTEFHUyAoKV0gT2sKUzogKiBP
SyBbVU5TRUVOIDE1N10gT2sKUzogKiBPSyBbVUlEVkFMSURJVFkgOTY4MjU2MjUzXSBPawpTOiAq
IE9LIFtVSURORVhUIDI3ODQwNV0gT2sKUzogKiBPSyBbSElHSEVTVE1PRFNFUSAyODhdIE9rClM6
ICogT0sgW1VSTE1FQ0ggSU5URVJOQUxdIE9rClM6IDIgT0sgW1JFQUQtT05MWV0gQ29tcGxldGVk
Cj4+IENBQ0hFOiBSZXRyaWV2ZWQgbWVzc2FnZXMgKG1haWxib3g6IElOQk9YOyBVSURzOiAyNzgz
OTQpCj4+IENBQ0hFOiBSZXRyaWV2ZWQgbWVzc2FnZXMgKG1haWxib3g6IElOQk9YOyBVSURzOiAy
NzgzOTQpCkM6IDMgVU5TRUxFQ1QKUzogMyBPSyBDb21wbGV0ZWQKQzogNCBBUFBFTkQgSU5CT1gg
KFxzZWVuKSAiMjktTWFyLTIwMTIgMDc6MTk6MDggKzAyMDAiIENBVEVOQVRFIChVUkwgL0lOQk9Y
O1VJRFZBTElESVRZPTk2ODI1NjI1My87VUlEPTI3ODM5NC87U0VDVElPTj1IRUFERVIgVEVYVCB7
MzErfQpDOiANCi0tPV9QdnF2TlRDeENkRlBjLUExUFNXREZwQQ0KQzogIFVSTCAvSU5CT1g7VUlE
VkFMSURJVFk9OTY4MjU2MjUzLztVSUQ9Mjc4Mzk0LztTRUNUSU9OPTEuTUlNRSBVUkwgL0lOQk9Y
O1VJRFZBTElESVRZPTk2ODI1NjI1My87VUlEPTI3ODM5NC87U0VDVElPTj0xIFRFWFQgezMxK30K
QzogDQotLT1fUHZxdk5UQ3hDZEZQYy1BMVBTV0RGcEENCkM6ICBVUkwgL0lOQk9YO1VJRFZBTElE
SVRZPTk2ODI1NjI1My87VUlEPTI3ODM5NC87U0VDVElPTj0yLk1JTUUgVVJMIC9JTkJPWDtVSURW
QUxJRElUWT05NjgyNTYyNTMvO1VJRD0yNzgzOTQvO1NFQ1RJT049MiBURVhUIHszMSt9CkM6IA0K
LS09X1B2cXZOVEN4Q2RGUGMtQTFQU1dERnBBDQpDOiAgVEVYVCB7MTE5K30KQzogQ29udGVudC1U
eXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04DQoNCltBbmhhbmcgZW50ZmVybnQ6IEVoZW1h
bGlnZXIgQW5oYW5nc3R5cDogaW1hZ2UvanBlZywgTmFtZTogTVVTSFVqaWVzaGFvLmpwZ11DOiAg
VEVYVCB7MzMrfQpDOiANCi0tPV9QdnF2TlRDeENkRlBjLUExUFNXREZwQS0tDQpDOiApClM6IDQg
Tk8gW0JBRFVSTCAiVEVYVCJdIE1haWxib3ggZG9lcyBub3QgZXhpc3QKQzogNSBTVEFUVVMgSU5C
T1ggKFJFQ0VOVCkKUzogKiBTVEFUVVMgSU5CT1ggKFJFQ0VOVCAwKQpTOiA1IE9LIENvbXBsZXRl
ZApDOiA2IFNUQVRVUyBJTkJPWC5ob3JkZS5hcHBzIChSRUNFTlQpClM6ICogU1RBVFVTIElOQk9Y
LmhvcmRlLmFwcHMgKFJFQ0VOVCAwKQpTOiA2IE9LIENvbXBsZXRlZApDOiA3IFNUQVRVUyBJTkJP
WC5ob3JkZS5idWdzIChSRUNFTlQpClM6ICogU1RBVFVTIElOQk9YLmhvcmRlLmJ1Z3MgKFJFQ0VO
VCAwKQpTOiA3IE9LIENvbXBsZXRlZApDOiA4IFNUQVRVUyBJTkJPWC5ob3JkZS5jdnMgKFJFQ0VO
VCkKUzogKiBTVEFUVVMgSU5CT1guaG9yZGUuY3ZzIChSRUNFTlQgMCkKUzogOCBPSyBDb21wbGV0
ZWQKQzogOSBTVEFUVVMgSU5CT1guaG9yZGUuZGV2IChSRUNFTlQpClM6ICogU1RBVFVTIElOQk9Y
LmhvcmRlLmRldiAoUkVDRU5UIDApClM6IDkgT0sgQ29tcGxldGVkCkM6IDEwIFNUQVRVUyBJTkJP
WC5ob3JkZS5pbXAgKFJFQ0VOVCkKUzogKiBTVEFUVVMgSU5CT1guaG9yZGUuaW1wIChSRUNFTlQg
MCkKUzogMTAgT0sgQ29tcGxldGVkCkM6IDExIFNUQVRVUyBJTkJPWC5Qcml2YXQgKFJFQ0VOVCkK
UzogKiBTVEFUVVMgSU5CT1guUHJpdmF0IChSRUNFTlQgMCkKUzogMTEgT0sgQ29tcGxldGVkCkM6
IDEyIExPR09VVApTOiAqIEJZRSBMT0dPVVQgcmVjZWl2ZWQKUzogMTIgT0sgQ29tcGxldGVkCg==
</data>        

          </attachment>
      

    </bug>

</bugzilla>