<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3337</bug_id>
          
          <creation_ts>2010-11-12 20:03 EDT</creation_ts>
          <short_desc>Deflate messages filling logs</short_desc>
          <delta_ts>2011-11-14 09:07:40 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>IMAP</component>
          <version>2.3.16</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>3269</dup_id>
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Philip Prindeville">philipp@redfish-solutions.com</reporter>
          <assigned_to name="Ken Murchison">murch@andrew.cmu.edu</assigned_to>
          <cc>mhlavink@redhat.com</cc>
    
    <cc>philipp@redfish-solutions.com</cc>
    
    <cc>wes@umich.edu</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Philip Prindeville">philipp@redfish-solutions.com</who>
            <bug_when>2010-11-12 20:03:49 EDT</bug_when>
            <thetext>On Fedora 13 running cyrus-imapd-2.3.16, I&apos;m getting a lot of log messages like:

Nov 11 11:28:05 mail imaps[21997]: created decompress buffer of 4102 bytes
Nov 11 11:28:05 mail imaps[21997]: created compress buffer of 4102 bytes

of dubious interest.

This should be #ifdef&apos;d out except for DEBUG builds.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Ken Murchison">murch@andrew.cmu.edu</who>
            <bug_when>2010-11-15 08:00:01 EDT</bug_when>
            <thetext>Adjust syslog.conf so you aren&apos;t logging at the DEBUG level.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Michal Hlavinka">mhlavink@redhat.com</who>
            <bug_when>2010-11-15 08:43:43 EDT</bug_when>
            <thetext>adjusting syslog.conf would change logging of all messages targeted to maillog not only those produced by cyrus-imap. Also it&apos;s not too efficient to wake up syslog daemon just to throw away a lot of debug messages. I think some debug switch would be useful here. Something like --debug changing value for one additional call to int setlogmask(int mask); would be much better here. The change should be really simple.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Philip Prindeville">philipp@redfish-solutions.com</who>
            <bug_when>2010-11-26 16:11:11 EDT</bug_when>
            <thetext>Actually, it probably wouldn&apos;t hurt to filter these messages as well when debugging isn&apos;t explicitly enabled:

Nov 25 15:43:47 mail imaps[9584]: SSL_accept() incomplete -&gt; wait
Nov 25 15:43:47 mail imaps[9584]: SSL_accept() succeeded -&gt; done


We have a lot of users that are on the road checking email from hotspots, 3G networks, customer sites, etc. and they are using IMAP/SSL.  Their handsets probably check email once every 5 minutes per user, via non-persistent connections, so we get a *lot* of these messages.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Philip Prindeville">philipp@redfish-solutions.com</who>
            <bug_when>2011-01-20 17:15:17 EDT</bug_when>
            <thetext>Created an attachment (id=1351)
Gate routing protocol success debugging messages

Adding the -Y flag to enable successful (and uninteresting) debugging messages to imapd and imtest.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Philip Prindeville">philipp@redfish-solutions.com</who>
            <bug_when>2011-01-20 17:49:08 EDT</bug_when>
            <thetext>Created an attachment (id=1352)
Amended to include &apos;connection accepted&apos; message

Also suppress the &apos;accepted connection&apos; message from lmtpd.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Wes Craig">wes@umich.edu</who>
            <bug_when>2011-11-14 09:07:40 EDT</bug_when>
            <thetext>This is a dup of 3269.  As 3269 notes, the proper solution is to utilize setlogmask() in addition to the other more sophisticated methods Henrique suggests.

*** This bug has been marked as a duplicate of bug 3269 ***</thetext>
          </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1351</attachid>
            <date>2011-01-20 17:15 EDT</date>
            <desc>Gate routing protocol success debugging messages</desc>
            <filename>cyrus-debug.patch</filename>
            <type>text/plain</type>
            <size>4872</size>
            <attacher>philipp@redfish-solutions.com</attacher>
            
              <data encoding="base64">IGltYXAvaW1hcGQuYyAgICB8ICAgIDUgKysrKy0KIGltYXAvdGxzLmMgICAgICB8ICAgIDggKysr
KysrLS0KIGltdGVzdC9pbXRlc3QuYyB8ICAgIDYgKysrKystCiBsaWIvcHJvdC5jICAgICAgfCAg
IDE0ICsrKysrKysrKystLS0tCiBsaWIvcHJvdC5oICAgICAgfCAgICAyICsrCiBtYW4vaW1hcGQu
OCAgICAgfCAgICA2ICsrKysrKwogbWFuL2ltdGVzdC4xICAgIHwgICAgNSArKysrKwogNyBmaWxl
cyBjaGFuZ2VkLCAzOCBpbnNlcnRpb25zKCspLCA4IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBh
L2ltYXAvaW1hcGQuYyBiL2ltYXAvaW1hcGQuYwppbmRleCBkNDg2NjZlLi4wOWVkZDZhIDEwMDY0
NAotLS0gYS9pbWFwL2ltYXBkLmMKKysrIGIvaW1hcC9pbWFwZC5jCkBAIC03OTgsNyArNzk4LDcg
QEAgaW50IHNlcnZpY2VfaW5pdChpbnQgYXJnYywgY2hhciAqKmFyZ3YsIGNoYXIgKiplbnZwKQog
ICAgIHNubXBfY29ubmVjdCgpOyAvKiBpZ25vcmUgcmV0dXJuIGNvZGUgKi8KICAgICBzbm1wX3Nl
dF9zdHIoU0VSVkVSX05BTUVfVkVSU0lPTixjeXJ1c192ZXJzaW9uKCkpOwogCi0gICAgd2hpbGUg
KChvcHQgPSBnZXRvcHQoYXJnYywgYXJndiwgInNwOk4iKSkgIT0gRU9GKSB7CisgICAgd2hpbGUg
KChvcHQgPSBnZXRvcHQoYXJnYywgYXJndiwgInNwOk5ZIikpICE9IEVPRikgewogCXN3aXRjaCAo
b3B0KSB7CiAJY2FzZSAncyc6IC8qIGltYXBzIChkbyBzdGFydHRscyByaWdodCBhd2F5KSAqLwog
CSAgICBpbWFwcyA9IDE7CkBAIC04MTUsNiArODE1LDkgQEAgaW50IHNlcnZpY2VfaW5pdChpbnQg
YXJnYywgY2hhciAqKmFyZ3YsIGNoYXIgKiplbnZwKQogCQkgICAqIHlvdSBrbm93IHdoYXQgeW91
J3JlIGRvaW5nISAqLwogCSAgICBub3Nhc2xwYXNzd2RjaGVjayA9IDE7CiAJICAgIGJyZWFrOwor
CWNhc2UgJ1knOgorCSAgICBkZWJ1Z19wcm90byA9IDE7CisJICAgIGJyZWFrOwogCWRlZmF1bHQ6
CiAJICAgIGJyZWFrOwogCX0KZGlmZiAtLWdpdCBhL2ltYXAvdGxzLmMgYi9pbWFwL3Rscy5jCmlu
ZGV4IGU3NmQ5OTQuLjQ1MDczNTAgMTAwNjQ0Ci0tLSBhL2ltYXAvdGxzLmMKKysrIGIvaW1hcC90
bHMuYwpAQCAtODc3LDcgKzg3Nyw5IEBAIGludCB0bHNfc3RhcnRfc2VydmVydGxzKGludCByZWFk
ZmQsIGludCB3cml0ZWZkLCBpbnQgdGltZW91dCwKIAogCXN0cyA9IFNTTF9hY2NlcHQodGxzX2Nv
bm4pOwogCWlmIChzdHMgPiAwKSB7Ci0JICAgIHN5c2xvZyhMT0dfREVCVUcsICJTU0xfYWNjZXB0
KCkgc3VjY2VlZGVkIC0+IGRvbmUiKTsKKwkgICAgaWYgKGRlYnVnX3Byb3RvKSB7CisJCXN5c2xv
ZyhMT0dfREVCVUcsICJTU0xfYWNjZXB0KCkgc3VjY2VlZGVkIC0+IGRvbmUiKTsKKwkgICAgfQog
CSAgICBicmVhazsKIAl9CiAKQEAgLTg4Niw3ICs4ODgsOSBAQCBpbnQgdGxzX3N0YXJ0X3NlcnZl
cnRscyhpbnQgcmVhZGZkLCBpbnQgd3JpdGVmZCwgaW50IHRpbWVvdXQsCiAJc3dpdGNoIChlcnIp
IHsKIAljYXNlIFNTTF9FUlJPUl9XQU5UX1JFQUQ6CiAJY2FzZSBTU0xfRVJST1JfV0FOVF9XUklU
RToKLQkgICAgc3lzbG9nKExPR19ERUJVRywgIlNTTF9hY2NlcHQoKSBpbmNvbXBsZXRlIC0+IHdh
aXQiKTsKKwkgICAgaWYgKGRlYnVnX3Byb3RvKSB7CisJCXN5c2xvZyhMT0dfREVCVUcsICJTU0xf
YWNjZXB0KCkgaW5jb21wbGV0ZSAtPiB3YWl0Iik7CisJICAgIH0KIAkgICAgY29udGludWU7CiAJ
Y2FzZSBTU0xfRVJST1JfU1lTQ0FMTDoKIAkgICAgaWYgKHN0cyA9PSAwKSB7CmRpZmYgLS1naXQg
YS9pbXRlc3QvaW10ZXN0LmMgYi9pbXRlc3QvaW10ZXN0LmMKaW5kZXggYzM2NWVhMC4uYTU1MzQz
NyAxMDA2NDQKLS0tIGEvaW10ZXN0L2ltdGVzdC5jCisrKyBiL2ltdGVzdC9pbXRlc3QuYwpAQCAt
MjM3Miw3ICsyMzcyLDcgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KQogICAgIHBy
b2cgPSBzdHJyY2hyKGFyZ3ZbMF0sICcvJykgPyBzdHJyY2hyKGFyZ3ZbMF0sICcvJykrMSA6IGFy
Z3ZbMF07CiAKICAgICAvKiBsb29rIGF0IGFsbCB0aGUgZXh0cmEgYXJncyAqLwotICAgIHdoaWxl
ICgoYyA9IGdldG9wdChhcmdjLCBhcmd2LCAiUDpxc2NpenZrOmw6cDp1OmE6bTpmOnI6dDpuOkk6
eDpYOnc6bzo/aCIpKSAhPSBFT0YpCisgICAgd2hpbGUgKChjID0gZ2V0b3B0KGFyZ2MsIGFyZ3Ys
ICJQOnFzY2l6dms6bDpwOnU6YTptOmY6cjp0Om46STp4Olg6dzpvOj9oWSIpKSAhPSBFT0YpCiAJ
c3dpdGNoIChjKSB7CiAJY2FzZSAnUCc6CiAJICAgIHByb3QgPSBvcHRhcmc7CkBAIC0yNDgyLDYg
KzI0ODIsMTAgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KQogCSAgICBoYXNoX2lu
c2VydChvcHRhcmcsIHhzdHJkdXAodmFsKSwgJmNvbmZpZ2hhc2gpOwogCSAgICBicmVhazsKIAor
CWNhc2UgJ1knOgorCSAgICBkZWJ1Z19wcm90byA9IDE7CisJICAgIGJyZWFrOworCiAJY2FzZSAn
aCc6CiAJY2FzZSAnPyc6CiAJZGVmYXVsdDoKZGlmZiAtLWdpdCBhL2xpYi9wcm90LmMgYi9saWIv
cHJvdC5jCmluZGV4IDVmNjQ5ZWEuLmJhZTI0N2EgMTAwNjQ0Ci0tLSBhL2xpYi9wcm90LmMKKysr
IGIvbGliL3Byb3QuYwpAQCAtNzQsNiArNzQsOCBAQAogI2luY2x1ZGUgInV0aWwuaCIKICNpbmNs
dWRlICJ4bWFsbG9jLmgiCiAKK2ludCBkZWJ1Z19wcm90byA9IDA7CisKIC8qIFRyYW5zcGFyYW50
IHByb3Rncm91cCBzdHJ1Y3R1cmUgKi8KIHN0cnVjdCBwcm90Z3JvdXAKIHsKQEAgLTMyNyw4ICsz
MjksMTAgQEAgaW50IHByb3Rfc2V0Y29tcHJlc3Moc3RydWN0IHByb3RzdHJlYW0gKnMpCiAgICAg
ICovCiAgICAgcy0+emJ1Zl9zaXplID0gcy0+bWF4cGxhaW4gKyA2OwogICAgIHMtPnpidWYgPSAo
dW5zaWduZWQgY2hhciAqKSB4bWFsbG9jKHNpemVvZih1bnNpZ25lZCBjaGFyKSAqIHMtPnpidWZf
c2l6ZSk7Ci0gICAgc3lzbG9nKExPR19ERUJVRywgImNyZWF0ZWQgJXNjb21wcmVzcyBidWZmZXIg
b2YgJXUgYnl0ZXMiLAotCSAgIHMtPndyaXRlID8gIiIgOiAiZGUiLCBzLT56YnVmX3NpemUpOwor
ICAgIGlmIChkZWJ1Z19wcm90bykgeworCXN5c2xvZyhMT0dfREVCVUcsICJjcmVhdGVkICVzY29t
cHJlc3MgYnVmZmVyIG9mICV1IGJ5dGVzIiwKKwkJcy0+d3JpdGUgPyAiIiA6ICJkZSIsIHMtPnpi
dWZfc2l6ZSk7CisgICAgfQogICAgIHMtPnpzdHJtID0genN0cm07CiAKICAgICByZXR1cm4gMDsK
QEAgLTc5Nyw4ICs4MDEsMTAgQEAgc3RhdGljIGludCBwcm90X2ZsdXNoX2VuY29kZShzdHJ1Y3Qg
cHJvdHN0cmVhbSAqcywKIAlkbyB7CiAJICAgIC8qIHNob3VsZCBuZXZlciBiZSBuZWVkZWQsIGJ1
dCBpdCdzIGJldHRlciB0byBhbHdheXMgY2hlY2shICovCiAJICAgIGlmICghcy0+enN0cm0tPmF2
YWlsX291dCkgewotCQlzeXNsb2coTE9HX0RFQlVHLCAiZ3Jvd2luZyBjb21wcmVzcyBidWZmZXIg
ZnJvbSAldSB0byAldSBieXRlcyIsCi0JCSAgICAgICBzLT56YnVmX3NpemUsIHMtPnpidWZfc2l6
ZSArIFBST1RfQlVGU0laRSk7CisJCSAgICBpZiAoZGVidWdfcHJvdG8pIHsKKwkJCXN5c2xvZyhM
T0dfREVCVUcsICJncm93aW5nIGNvbXByZXNzIGJ1ZmZlciBmcm9tICV1IHRvICV1IGJ5dGVzIiwK
KwkJCSAgICAgICBzLT56YnVmX3NpemUsIHMtPnpidWZfc2l6ZSArIFBST1RfQlVGU0laRSk7CisJ
CSAgICB9CiAKIAkJcy0+emJ1ZiA9ICh1bnNpZ25lZCBjaGFyICopCiAJCSAgICB4cmVhbGxvYyhz
LT56YnVmLCBzLT56YnVmX3NpemUgKyBQUk9UX0JVRlNJWkUpOwpkaWZmIC0tZ2l0IGEvbGliL3By
b3QuaCBiL2xpYi9wcm90LmgKaW5kZXggMDc3YTk3YS4uZTMzMzc3YSAxMDA2NDQKLS0tIGEvbGli
L3Byb3QuaAorKysgYi9saWIvcHJvdC5oCkBAIC02Nyw2ICs2Nyw4IEBACiAKICNkZWZpbmUgUFJP
VF9OT19GRCAtMQogCitleHRlcm4gaW50IGRlYnVnX3Byb3RvOworCiBzdHJ1Y3QgcHJvdHN0cmVh
bTsKIHN0cnVjdCBwcm90X3dhaXRldmVudDsKIApkaWZmIC0tZ2l0IGEvbWFuL2ltYXBkLjggYi9t
YW4vaW1hcGQuOAppbmRleCAwZWM5YzI1Li40MWI0N2ZjIDEwMDY0NAotLS0gYS9tYW4vaW1hcGQu
OAorKysgYi9tYW4vaW1hcGQuOApAQCAtNzEsNiArNzEsOSBAQCBpbWFwZCBcLSBJTUFQIHNlcnZl
ciBwcm9jZXNzCiAuQiBcLXAKIC5JIHNzZgogXQorWworLkIgXC1ZCitdCiAuU0ggREVTQ1JJUFRJ
T04KIC5JIEltYXBkCiBpcyBhbiBJTUFQNHJldjEgc2VydmVyLgpAQCAtMTUwLDYgKzE1Myw5IEBA
IFRlbGwKIHRoYXQgYW4gZXh0ZXJuYWwgbGF5ZXIgZXhpc3RzLiAgQW4gU1NGIChzZWN1cml0eSBz
dHJlbmd0aCBmYWN0b3IpIG9mIDEKIG1lYW5zIGFuIGludGVncml0eSBwcm90ZWN0aW9uIGxheWVy
IGV4aXN0cy4gIEFueSBoaWdoZXIgU1NGIGltcGxpZXMKIHNvbWUgZm9ybSBvZiBwcml2YWN5IHBy
b3RlY3Rpb24uCisuVFAKKy5CSSBcLVkKK0VuYWJsZSBwcm90b2NvbC1sZXZlbCBkZWJ1Z2dpbmcu
CiAuU0ggRklMRVMKIC5UUAogLkIgL2V0Yy9pbWFwZC5jb25mCmRpZmYgLS1naXQgYS9tYW4vaW10
ZXN0LjEgYi9tYW4vaW10ZXN0LjEKaW5kZXggNTMyMzE4Ni4uMTcxNTJhYyAxMDA2NDQKLS0tIGEv
bWFuL2ltdGVzdC4xCisrKyBiL21hbi9pbXRlc3QuMQpAQCAtMTA2LDYgKzEwNiw4IEBAIGltdGVz
dCBcLSBpbnRlcmFjdGl2ZSBJTUFQIHRlc3QgcHJvZ3JhbQogWwogLkIgXC12CiBdCisuQiBcLVkK
K10KIFsKIC5CIFwtSQogLkkgZmlsZQpAQCAtMjE3LDYgKzIxOSw5IEBAIFZlcmJvc2UuIFByaW50
IG91dCBtb3JlIGluZm9ybWF0aW9uIHRoYW4gdXN1YWwuCiAuVFAKIC5CIC16CiBUaW1pbmcgdGVz
dC4KKy5UUAorLkIgLVkKK0VuYWJsZSBwcm90b2NvbC1sZXZlbCBkZWJ1Z2dpbmcuCiAuU0ggU0VF
IEFMU08KIC5QUAogXGZCaW1hcGQoOClcZlIK
</data>        

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1352</attachid>
            <date>2011-01-20 17:49 EDT</date>
            <desc>Amended to include &apos;connection accepted&apos; message</desc>
            <filename>cyrus-debug.patch</filename>
            <type>text/plain</type>
            <size>8031</size>
            <attacher>philipp@redfish-solutions.com</attacher>
            
              <data encoding="base64">IGltYXAvaW1hcGQuYyAgICAgICAgICAgIHwgICAgNSArKysrLQogaW1hcC90bHMuYyAgICAgICAg
ICAgICAgfCAgICA4ICsrKysrKy0tCiBpbXRlc3QvaW10ZXN0LmMgICAgICAgICB8ICAgIDYgKysr
KystCiBsaWIvcHJvdC5jICAgICAgICAgICAgICB8ICAgMTQgKysrKysrKysrKy0tLS0KIGxpYi9w
cm90LmggICAgICAgICAgICAgIHwgICAgMiArKwogbWFuL2ltYXBkLjggICAgICAgICAgICAgfCAg
ICA2ICsrKysrKwogbWFuL2ltdGVzdC4xICAgICAgICAgICAgfCAgICA1ICsrKysrCiBtYW4vbG10
cGQuOCAgICAgICAgICAgICB8ICAgIDYgKysrKysrCiBtYXN0ZXIvc2VydmljZS10aHJlYWQuYyB8
ICAgMTAgKysrKysrKystLQogbWFzdGVyL3NlcnZpY2UuYyAgICAgICAgfCAgIDEwICsrKysrKysr
LS0KIDEwIGZpbGVzIGNoYW5nZWQsIDYwIGluc2VydGlvbnMoKyksIDEyIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2ltYXAvaW1hcGQuYyBiL2ltYXAvaW1hcGQuYwppbmRleCBkNDg2NjZlLi4w
OWVkZDZhIDEwMDY0NAotLS0gYS9pbWFwL2ltYXBkLmMKKysrIGIvaW1hcC9pbWFwZC5jCkBAIC03
OTgsNyArNzk4LDcgQEAgaW50IHNlcnZpY2VfaW5pdChpbnQgYXJnYywgY2hhciAqKmFyZ3YsIGNo
YXIgKiplbnZwKQogICAgIHNubXBfY29ubmVjdCgpOyAvKiBpZ25vcmUgcmV0dXJuIGNvZGUgKi8K
ICAgICBzbm1wX3NldF9zdHIoU0VSVkVSX05BTUVfVkVSU0lPTixjeXJ1c192ZXJzaW9uKCkpOwog
Ci0gICAgd2hpbGUgKChvcHQgPSBnZXRvcHQoYXJnYywgYXJndiwgInNwOk4iKSkgIT0gRU9GKSB7
CisgICAgd2hpbGUgKChvcHQgPSBnZXRvcHQoYXJnYywgYXJndiwgInNwOk5ZIikpICE9IEVPRikg
ewogCXN3aXRjaCAob3B0KSB7CiAJY2FzZSAncyc6IC8qIGltYXBzIChkbyBzdGFydHRscyByaWdo
dCBhd2F5KSAqLwogCSAgICBpbWFwcyA9IDE7CkBAIC04MTUsNiArODE1LDkgQEAgaW50IHNlcnZp
Y2VfaW5pdChpbnQgYXJnYywgY2hhciAqKmFyZ3YsIGNoYXIgKiplbnZwKQogCQkgICAqIHlvdSBr
bm93IHdoYXQgeW91J3JlIGRvaW5nISAqLwogCSAgICBub3Nhc2xwYXNzd2RjaGVjayA9IDE7CiAJ
ICAgIGJyZWFrOworCWNhc2UgJ1knOgorCSAgICBkZWJ1Z19wcm90byA9IDE7CisJICAgIGJyZWFr
OwogCWRlZmF1bHQ6CiAJICAgIGJyZWFrOwogCX0KZGlmZiAtLWdpdCBhL2ltYXAvdGxzLmMgYi9p
bWFwL3Rscy5jCmluZGV4IGU3NmQ5OTQuLjQ1MDczNTAgMTAwNjQ0Ci0tLSBhL2ltYXAvdGxzLmMK
KysrIGIvaW1hcC90bHMuYwpAQCAtODc3LDcgKzg3Nyw5IEBAIGludCB0bHNfc3RhcnRfc2VydmVy
dGxzKGludCByZWFkZmQsIGludCB3cml0ZWZkLCBpbnQgdGltZW91dCwKIAogCXN0cyA9IFNTTF9h
Y2NlcHQodGxzX2Nvbm4pOwogCWlmIChzdHMgPiAwKSB7Ci0JICAgIHN5c2xvZyhMT0dfREVCVUcs
ICJTU0xfYWNjZXB0KCkgc3VjY2VlZGVkIC0+IGRvbmUiKTsKKwkgICAgaWYgKGRlYnVnX3Byb3Rv
KSB7CisJCXN5c2xvZyhMT0dfREVCVUcsICJTU0xfYWNjZXB0KCkgc3VjY2VlZGVkIC0+IGRvbmUi
KTsKKwkgICAgfQogCSAgICBicmVhazsKIAl9CiAKQEAgLTg4Niw3ICs4ODgsOSBAQCBpbnQgdGxz
X3N0YXJ0X3NlcnZlcnRscyhpbnQgcmVhZGZkLCBpbnQgd3JpdGVmZCwgaW50IHRpbWVvdXQsCiAJ
c3dpdGNoIChlcnIpIHsKIAljYXNlIFNTTF9FUlJPUl9XQU5UX1JFQUQ6CiAJY2FzZSBTU0xfRVJS
T1JfV0FOVF9XUklURToKLQkgICAgc3lzbG9nKExPR19ERUJVRywgIlNTTF9hY2NlcHQoKSBpbmNv
bXBsZXRlIC0+IHdhaXQiKTsKKwkgICAgaWYgKGRlYnVnX3Byb3RvKSB7CisJCXN5c2xvZyhMT0df
REVCVUcsICJTU0xfYWNjZXB0KCkgaW5jb21wbGV0ZSAtPiB3YWl0Iik7CisJICAgIH0KIAkgICAg
Y29udGludWU7CiAJY2FzZSBTU0xfRVJST1JfU1lTQ0FMTDoKIAkgICAgaWYgKHN0cyA9PSAwKSB7
CmRpZmYgLS1naXQgYS9pbXRlc3QvaW10ZXN0LmMgYi9pbXRlc3QvaW10ZXN0LmMKaW5kZXggYzM2
NWVhMC4uYTU1MzQzNyAxMDA2NDQKLS0tIGEvaW10ZXN0L2ltdGVzdC5jCisrKyBiL2ltdGVzdC9p
bXRlc3QuYwpAQCAtMjM3Miw3ICsyMzcyLDcgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiph
cmd2KQogICAgIHByb2cgPSBzdHJyY2hyKGFyZ3ZbMF0sICcvJykgPyBzdHJyY2hyKGFyZ3ZbMF0s
ICcvJykrMSA6IGFyZ3ZbMF07CiAKICAgICAvKiBsb29rIGF0IGFsbCB0aGUgZXh0cmEgYXJncyAq
LwotICAgIHdoaWxlICgoYyA9IGdldG9wdChhcmdjLCBhcmd2LCAiUDpxc2NpenZrOmw6cDp1OmE6
bTpmOnI6dDpuOkk6eDpYOnc6bzo/aCIpKSAhPSBFT0YpCisgICAgd2hpbGUgKChjID0gZ2V0b3B0
KGFyZ2MsIGFyZ3YsICJQOnFzY2l6dms6bDpwOnU6YTptOmY6cjp0Om46STp4Olg6dzpvOj9oWSIp
KSAhPSBFT0YpCiAJc3dpdGNoIChjKSB7CiAJY2FzZSAnUCc6CiAJICAgIHByb3QgPSBvcHRhcmc7
CkBAIC0yNDgyLDYgKzI0ODIsMTAgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KQog
CSAgICBoYXNoX2luc2VydChvcHRhcmcsIHhzdHJkdXAodmFsKSwgJmNvbmZpZ2hhc2gpOwogCSAg
ICBicmVhazsKIAorCWNhc2UgJ1knOgorCSAgICBkZWJ1Z19wcm90byA9IDE7CisJICAgIGJyZWFr
OworCiAJY2FzZSAnaCc6CiAJY2FzZSAnPyc6CiAJZGVmYXVsdDoKZGlmZiAtLWdpdCBhL2xpYi9w
cm90LmMgYi9saWIvcHJvdC5jCmluZGV4IDVmNjQ5ZWEuLmJhZTI0N2EgMTAwNjQ0Ci0tLSBhL2xp
Yi9wcm90LmMKKysrIGIvbGliL3Byb3QuYwpAQCAtNzQsNiArNzQsOCBAQAogI2luY2x1ZGUgInV0
aWwuaCIKICNpbmNsdWRlICJ4bWFsbG9jLmgiCiAKK2ludCBkZWJ1Z19wcm90byA9IDA7CisKIC8q
IFRyYW5zcGFyYW50IHByb3Rncm91cCBzdHJ1Y3R1cmUgKi8KIHN0cnVjdCBwcm90Z3JvdXAKIHsK
QEAgLTMyNyw4ICszMjksMTAgQEAgaW50IHByb3Rfc2V0Y29tcHJlc3Moc3RydWN0IHByb3RzdHJl
YW0gKnMpCiAgICAgICovCiAgICAgcy0+emJ1Zl9zaXplID0gcy0+bWF4cGxhaW4gKyA2OwogICAg
IHMtPnpidWYgPSAodW5zaWduZWQgY2hhciAqKSB4bWFsbG9jKHNpemVvZih1bnNpZ25lZCBjaGFy
KSAqIHMtPnpidWZfc2l6ZSk7Ci0gICAgc3lzbG9nKExPR19ERUJVRywgImNyZWF0ZWQgJXNjb21w
cmVzcyBidWZmZXIgb2YgJXUgYnl0ZXMiLAotCSAgIHMtPndyaXRlID8gIiIgOiAiZGUiLCBzLT56
YnVmX3NpemUpOworICAgIGlmIChkZWJ1Z19wcm90bykgeworCXN5c2xvZyhMT0dfREVCVUcsICJj
cmVhdGVkICVzY29tcHJlc3MgYnVmZmVyIG9mICV1IGJ5dGVzIiwKKwkJcy0+d3JpdGUgPyAiIiA6
ICJkZSIsIHMtPnpidWZfc2l6ZSk7CisgICAgfQogICAgIHMtPnpzdHJtID0genN0cm07CiAKICAg
ICByZXR1cm4gMDsKQEAgLTc5Nyw4ICs4MDEsMTAgQEAgc3RhdGljIGludCBwcm90X2ZsdXNoX2Vu
Y29kZShzdHJ1Y3QgcHJvdHN0cmVhbSAqcywKIAlkbyB7CiAJICAgIC8qIHNob3VsZCBuZXZlciBi
ZSBuZWVkZWQsIGJ1dCBpdCdzIGJldHRlciB0byBhbHdheXMgY2hlY2shICovCiAJICAgIGlmICgh
cy0+enN0cm0tPmF2YWlsX291dCkgewotCQlzeXNsb2coTE9HX0RFQlVHLCAiZ3Jvd2luZyBjb21w
cmVzcyBidWZmZXIgZnJvbSAldSB0byAldSBieXRlcyIsCi0JCSAgICAgICBzLT56YnVmX3NpemUs
IHMtPnpidWZfc2l6ZSArIFBST1RfQlVGU0laRSk7CisJCSAgICBpZiAoZGVidWdfcHJvdG8pIHsK
KwkJCXN5c2xvZyhMT0dfREVCVUcsICJncm93aW5nIGNvbXByZXNzIGJ1ZmZlciBmcm9tICV1IHRv
ICV1IGJ5dGVzIiwKKwkJCSAgICAgICBzLT56YnVmX3NpemUsIHMtPnpidWZfc2l6ZSArIFBST1Rf
QlVGU0laRSk7CisJCSAgICB9CiAKIAkJcy0+emJ1ZiA9ICh1bnNpZ25lZCBjaGFyICopCiAJCSAg
ICB4cmVhbGxvYyhzLT56YnVmLCBzLT56YnVmX3NpemUgKyBQUk9UX0JVRlNJWkUpOwpkaWZmIC0t
Z2l0IGEvbGliL3Byb3QuaCBiL2xpYi9wcm90LmgKaW5kZXggMDc3YTk3YS4uZTMzMzc3YSAxMDA2
NDQKLS0tIGEvbGliL3Byb3QuaAorKysgYi9saWIvcHJvdC5oCkBAIC02Nyw2ICs2Nyw4IEBACiAK
ICNkZWZpbmUgUFJPVF9OT19GRCAtMQogCitleHRlcm4gaW50IGRlYnVnX3Byb3RvOworCiBzdHJ1
Y3QgcHJvdHN0cmVhbTsKIHN0cnVjdCBwcm90X3dhaXRldmVudDsKIApkaWZmIC0tZ2l0IGEvbWFu
L2ltYXBkLjggYi9tYW4vaW1hcGQuOAppbmRleCAwZWM5YzI1Li40MWI0N2ZjIDEwMDY0NAotLS0g
YS9tYW4vaW1hcGQuOAorKysgYi9tYW4vaW1hcGQuOApAQCAtNzEsNiArNzEsOSBAQCBpbWFwZCBc
LSBJTUFQIHNlcnZlciBwcm9jZXNzCiAuQiBcLXAKIC5JIHNzZgogXQorWworLkIgXC1ZCitdCiAu
U0ggREVTQ1JJUFRJT04KIC5JIEltYXBkCiBpcyBhbiBJTUFQNHJldjEgc2VydmVyLgpAQCAtMTUw
LDYgKzE1Myw5IEBAIFRlbGwKIHRoYXQgYW4gZXh0ZXJuYWwgbGF5ZXIgZXhpc3RzLiAgQW4gU1NG
IChzZWN1cml0eSBzdHJlbmd0aCBmYWN0b3IpIG9mIDEKIG1lYW5zIGFuIGludGVncml0eSBwcm90
ZWN0aW9uIGxheWVyIGV4aXN0cy4gIEFueSBoaWdoZXIgU1NGIGltcGxpZXMKIHNvbWUgZm9ybSBv
ZiBwcml2YWN5IHByb3RlY3Rpb24uCisuVFAKKy5CSSBcLVkKK0VuYWJsZSBwcm90b2NvbC1sZXZl
bCBkZWJ1Z2dpbmcuCiAuU0ggRklMRVMKIC5UUAogLkIgL2V0Yy9pbWFwZC5jb25mCmRpZmYgLS1n
aXQgYS9tYW4vaW10ZXN0LjEgYi9tYW4vaW10ZXN0LjEKaW5kZXggNTMyMzE4Ni4uMTcxNTJhYyAx
MDA2NDQKLS0tIGEvbWFuL2ltdGVzdC4xCisrKyBiL21hbi9pbXRlc3QuMQpAQCAtMTA2LDYgKzEw
Niw4IEBAIGltdGVzdCBcLSBpbnRlcmFjdGl2ZSBJTUFQIHRlc3QgcHJvZ3JhbQogWwogLkIgXC12
CiBdCisuQiBcLVkKK10KIFsKIC5CIFwtSQogLkkgZmlsZQpAQCAtMjE3LDYgKzIxOSw5IEBAIFZl
cmJvc2UuIFByaW50IG91dCBtb3JlIGluZm9ybWF0aW9uIHRoYW4gdXN1YWwuCiAuVFAKIC5CIC16
CiBUaW1pbmcgdGVzdC4KKy5UUAorLkIgLVkKK0VuYWJsZSBwcm90b2NvbC1sZXZlbCBkZWJ1Z2dp
bmcuCiAuU0ggU0VFIEFMU08KIC5QUAogXGZCaW1hcGQoOClcZlIKZGlmZiAtLWdpdCBhL21hbi9s
bXRwZC44IGIvbWFuL2xtdHBkLjgKaW5kZXggZDQzMDhkZi4uODFjYzAzOCAxMDA2NDQKLS0tIGEv
bWFuL2xtdHBkLjgKKysrIGIvbWFuL2xtdHBkLjgKQEAgLTYwLDYgKzYwLDkgQEAgbG10cGQgXC0g
TE1UUCBzZXJ2ZXIgcHJvY2VzcwogWwogLkIgXC1ECiBdCitbCisuQiBcLVkKK10KIC5icgogICAg
ICAgWwogLkIgXC1hCkBAIC05Myw2ICs5Niw5IEBAIHRpbWVvdXQuICBUaGUgZGVmYXVsdCBpcyA2
MC4KIC5CSSBcLUQKIFJ1biBleHRlcm5hbCBkZWJ1Z2dlciBzcGVjaWZpZWQgaW4gZGVidWdfY29t
bWFuZC4KIC5UUAorLkJJIFwtWQorRW5hYmxlIHByb3RvY29sLWxldmVsIGRlYnVnZ2luZy4KKy5U
UAogLkJJIFwtYQogUHJlYXV0aG9yaXplIGNvbm5lY3Rpb25zIGluaXRpYXRlZCBvbiBhbiBpbnRl
cm5ldCBzb2NrZXQsIGluc3RlYWQgb2YKIHJlcXVpcmluZyBMTVRQIEFVVEguICBUaGlzIHNob3Vs
ZCBvbmx5IGJlIHVzZWQgZm9yIGNvbm5lY3Rpb25zIGNvbWluZwpkaWZmIC0tZ2l0IGEvbWFzdGVy
L3NlcnZpY2UtdGhyZWFkLmMgYi9tYXN0ZXIvc2VydmljZS10aHJlYWQuYwppbmRleCA2NmZhOGUz
Li43NmRiOGNkIDEwMDY0NAotLS0gYS9tYXN0ZXIvc2VydmljZS10aHJlYWQuYworKysgYi9tYXN0
ZXIvc2VydmljZS10aHJlYWQuYwpAQCAtNzEsNiArNzEsNyBAQAogI2luY2x1ZGUgImxpYmNvbmZp
Zy5oIgogI2luY2x1ZGUgInhtYWxsb2MuaCIKICNpbmNsdWRlICJzaWduYWxzLmgiCisjaW5jbHVk
ZSAicHJvdC5oIgogCiBleHRlcm4gaW50IG9wdGluZDsKIGV4dGVybiBjaGFyICpvcHRhcmc7CkBA
IC0xNjgsNyArMTY5LDcgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2LCBjaGFyICoq
ZW52cCkKIAogICAgIG5ld2FyZ3ZbbmV3YXJnYysrXSA9IGFyZ3ZbMF07CiAKLSAgICB3aGlsZSAo
KG9wdCA9IGdldG9wdChhcmdjLCBhcmd2LCAiQzpEIikpICE9IEVPRikgeworICAgIHdoaWxlICgo
b3B0ID0gZ2V0b3B0KGFyZ2MsIGFyZ3YsICJDOkRZIikpICE9IEVPRikgewogCXN3aXRjaCAob3B0
KSB7CiAJY2FzZSAnQyc6IC8qIGFsdCBjb25maWcgZmlsZSAqLwogCSAgICBhbHRfY29uZmlnID0g
b3B0YXJnOwpAQCAtMTc2LDYgKzE3Nyw5IEBAIGludCBtYWluKGludCBhcmdjLCBjaGFyICoqYXJn
diwgY2hhciAqKmVudnApCiAJY2FzZSAnRCc6CiAJICAgIGNhbGxfZGVidWdnZXIgPSAxOwogCSAg
ICBicmVhazsKKwljYXNlICdZJzoKKwkgICAgIGRlYnVnX3Byb3RvID0gMTsKKwkgICAgIGJyZWFr
OwogCWRlZmF1bHQ6CiAJICAgIGlmICghKChuZXdhcmdjKzEpICUgQVJHVl9HUk9XKSkgeyAvKiB0
aW1lIHRvIGFsbG9jIG1vcmUgKi8KIAkJbmV3YXJndiA9IChjaGFyICoqKSB4cmVhbGxvYyhuZXdh
cmd2LCAobmV3YXJnYyArIEFSR1ZfR1JPVykgKiAKQEAgLTMwMSw3ICszMDUsOSBAQCBpbnQgbWFp
bihpbnQgYXJnYywgY2hhciAqKmFyZ3YsIGNoYXIgKiplbnZwKQogCSAgICBjb250aW51ZTsKIAl9
CiAJCi0Jc3lzbG9nKExPR19ERUJVRywgImFjY2VwdGVkIGNvbm5lY3Rpb24iKTsKKwlpZiAoZGVi
dWdfcHJvdG8pIHsKKwkgICAgc3lzbG9nKExPR19ERUJVRywgImFjY2VwdGVkIGNvbm5lY3Rpb24i
KTsKKwl9CiAKIAl1c2VfY291bnQrKzsKIAlub3RpZnlfbWFzdGVyKFNUQVRVU19GRCwgTUFTVEVS
X1NFUlZJQ0VfQ09OTkVDVElPTl9NVUxUSSk7CmRpZmYgLS1naXQgYS9tYXN0ZXIvc2VydmljZS5j
IGIvbWFzdGVyL3NlcnZpY2UuYwppbmRleCBhMGJiOTMyLi44ZDE0Y2JiIDEwMDY0NAotLS0gYS9t
YXN0ZXIvc2VydmljZS5jCisrKyBiL21hc3Rlci9zZXJ2aWNlLmMKQEAgLTc1LDYgKzc1LDcgQEAK
ICNpbmNsdWRlICJ4c3RybGNweS5oIgogI2luY2x1ZGUgInhzdHJsY2F0LmgiCiAjaW5jbHVkZSAi
c2lnbmFscy5oIgorI2luY2x1ZGUgInByb3QuaCIKIAogZXh0ZXJuIGludCBvcHRpbmQsIG9wdGVy
cjsKIGV4dGVybiBjaGFyICpvcHRhcmc7CkBAIC0yNjksNyArMjcwLDcgQEAgaW50IG1haW4oaW50
IGFyZ2MsIGNoYXIgKiphcmd2LCBjaGFyICoqZW52cCkKIAogICAgIG5ld2FyZ3ZbbmV3YXJnYysr
XSA9IGFyZ3ZbMF07CiAKLSAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdjLCBhcmd2LCAiQzpV
OlQ6RCIpKSAhPSBFT0YpIHsKKyAgICB3aGlsZSAoKG9wdCA9IGdldG9wdChhcmdjLCBhcmd2LCAi
QzpVOlQ6RFkiKSkgIT0gRU9GKSB7CiAJaWYgKGFyZ3Zbb3B0aW5kLTFdWzBdID09ICctJyAmJiBz
dHJsZW4oYXJndltvcHRpbmQtMV0pID4gMikgewogCSAgICAvKiB3ZSBoYXZlIG1lcmdlZCBvcHRp
b25zICovCiAJICAgIHN5c2xvZyhMT0dfRVJSLApAQCAtMjkyLDYgKzI5Myw5IEBAIGludCBtYWlu
KGludCBhcmdjLCBjaGFyICoqYXJndiwgY2hhciAqKmVudnApCiAJY2FzZSAnRCc6CiAJICAgIGNh
bGxfZGVidWdnZXIgPSAxOwogCSAgICBicmVhazsKKwljYXNlICdZJzoKKwkgICAgZGVidWdfcHJv
dG8gPSAxOworCSAgICBicmVhazsKIAlkZWZhdWx0OgogCSAgICBpZiAoISgobmV3YXJnYysxKSAl
IEFSR1ZfR1JPVykpIHsgLyogdGltZSB0byBhbGxvYyBtb3JlICovCiAJCW5ld2FyZ3YgPSAoY2hh
ciAqKikgeHJlYWxsb2MobmV3YXJndiwgKG5ld2FyZ2MgKyBBUkdWX0dST1cpICogCkBAIC01NTYs
NyArNTYwLDkgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2LCBjaGFyICoqZW52cCkK
IAl9CiAKIAlub3RpZnlfbWFzdGVyKFNUQVRVU19GRCwgTUFTVEVSX1NFUlZJQ0VfVU5BVkFJTEFC
TEUpOwotCXN5c2xvZyhMT0dfREVCVUcsICJhY2NlcHRlZCBjb25uZWN0aW9uIik7CisJaWYgKGRl
YnVnX3Byb3RvKSB7CisJICAgIHN5c2xvZyhMT0dfREVCVUcsICJhY2NlcHRlZCBjb25uZWN0aW9u
Iik7CisJfQogCiAJaWYgKGZkICE9IDAgJiYgZHVwMihmZCwgMCkgPCAwKSB7CiAJICAgIHN5c2xv
ZyhMT0dfRVJSLCAiY2FuJ3QgZHVwbGljYXRlIGFjY2VwdGVkIHNvY2tldDogJW0iKTsK
</data>        

          </attachment>
      

    </bug>

</bugzilla>