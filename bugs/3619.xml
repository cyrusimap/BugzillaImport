<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3619</bug_id>
          
          <creation_ts>2012-01-02 17:45 EDT</creation_ts>
          <short_desc>Build a Cassandane branch which passes on master</short_desc>
          <delta_ts>2012-01-26 23:52:13 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cassandane</product>
          <component>miscellaneous</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>bug</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bron Gondwana">brong@fastmail.fm</reporter>
          <assigned_to name="Greg Banks">gnb@fastmail.fm</assigned_to>
          <cc>cyrus-bugzilla@lists.andrew.cmu.edu</cc>
    
    <cc>julien.coloos@atos.net</cc>
          

      

      

      
          <long_desc isprivate="0">
            <who name="Bron Gondwana">brong@fastmail.fm</who>
            <bug_when>2012-01-02 17:45:38 EDT</bug_when>
            <thetext>We should have a branch which either passes on master, or only fails on currently known bugs that will be fixed before releasing 2.5.

I&apos;d like to also set up automated builds on a bunch of different platforms, but that&apos;s a separate task.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-02 19:26:29 EDT</bug_when>
            <thetext>I did some work on this late last year, and got Cassandane to the point where only a handful of tests failed against Cyrus&apos; cmu/master.  Partly I did this by disabling tests and suites using the filtering mechanism.  I&apos;ll flush any pending commits I can find and post the output of run vs cmu/master to demonstrate.

In terms of policy I think the best thing to do is to mirror the Cyrus branch structure in Cassandane.  In particular, we should expect the Cassandane master branch to always be able to pass against the Cyrus master branch, and to have a Jenkins instance enforcing that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-02 22:13:29 EDT</bug_when>
            <thetext>Running today&apos;s Cassandane cmu/master vs today&apos;s Cyrus cmu/master I get
the following nine problems.

There were 5 errors:
1) Cassandane/Instance.pm:723 - test_add_annot_deliver(Cassandane::Cyrus::Annotator)
child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 24979) exited with code 255
2) Cassandane/Instance.pm:723 - test_set_system_flag_deliver(Cassandane::Cyrus::Annotator)
child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 24999) exited with code 255
3) Cassandane/Instance.pm:723 - test_add_annot_deliver_tomailbox(Cassandane::Cyrus::Annotator)
child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 25019) exited with code 255
4) Cassandane/Instance.pm:723 - test_set_user_flag_deliver(Cassandane::Cyrus::Annotator)
child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 25039) exited with code 255
5) Cassandane/Cyrus/Rename.pm:155 - test_rename_user(Cassandane::Cyrus::Rename)
IMAP Command : &apos;rename&apos; failed. Response was : no - Unknown code ____ 255	...propagated

There were 4 failures:
1) Cassandane/Cyrus/Bug3470.pm:109 - test_list_percent(Cassandane::Cyrus::Bug3470)
LIST data mismatch: $VAR1 = [
          [
            [
              &apos;\\Noinferiors&apos;,
              &apos;\\HasNoChildren&apos;
            ],
            &apos;/&apos;,
            &apos;INBOX&apos;
          ],
          [
            [
              &apos;\\Noselect&apos;,
              &apos;\\HasChildren&apos;
            ],
            &apos;/&apos;,
            &apos;2001&apos;
          ],
          [
            [
              &apos;\\HasNoChildren&apos;
            ],
            &apos;/&apos;,
            &apos;Drafts&apos;
          ]
        ];

2) Cassandane/Cyrus/Quota.pm:120 - test_upgrade_v2_4(Cassandane::Cyrus::Quota)
Structures begin differing at:
  $a-&gt;[1] = &apos;10&apos;
  $b-&gt;[1] = &apos;0&apos;

3) Cassandane/Cyrus/Quota.pm:120 - test_using_annotstorage_msg_late(Cassandane::Cyrus::Quota)
Structures begin differing at:
  $a-&gt;[1] = &apos;51&apos;
  $b-&gt;[1] = &apos;103&apos;

4) Cassandane/Cyrus/Quota.pm:120 - test_using_annotstorage_msg(Cassandane::Cyrus::Quota)
Structures begin differing at:
  $a-&gt;[1] = &apos;50&apos;
  $b-&gt;[1] = &apos;102&apos;

Test was not successful.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-03 01:38:57 EDT</bug_when>
            <thetext>&gt; There were 5 errors:
&gt; 1) Cassandane/Instance.pm:723 - test_add_annot_deliver(Cassandane::Cyrus::Annotator)
&gt; child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 24979) exited with code 255
&gt; 2) Cassandane/Instance.pm:723 - test_set_system_flag_deliver(Cassandane::Cyrus::Annotator)
&gt; child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 24999) exited with code 255
&gt; 3) Cassandane/Instance.pm:723 - test_add_annot_deliver_tomailbox(Cassandane::Cyrus::Annotator)
&gt; child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 25019) exited with code 255
&gt; 4) Cassandane/Instance.pm:723 - test_set_user_flag_deliver(Cassandane::Cyrus::Annotator)
&gt; child process (binary /home/gnb/software/cyrus/cassandane/utils/annotator.pl pid 25039) exited with code 255
 
These are all due to utils/annotator.pl using the old API.  Fixed in commit &quot;Update annotator.pl to latest API&quot;
 
&gt; 5) Cassandane/Cyrus/Rename.pm:155 - test_rename_user(Cassandane::Cyrus::Rename)
&gt; IMAP Command : &apos;rename&apos; failed. Response was : no - Unknown code ____ 255	...propagated

This is a regression in Cyrus, introduced in commit &quot;lib: create cyrus_copyfile API&quot;

&gt; There were 4 failures:
&gt; 1) Cassandane/Cyrus/Bug3470.pm:109 - test_list_percent(Cassandane::Cyrus::Bug3470)
&gt; LIST data mismatch: $VAR1 = [
&gt;  [...]

Don&apos;t know yet.

&gt; 2) Cassandane/Cyrus/Quota.pm:120 - test_upgrade_v2_4(Cassandane::Cyrus::Quota)
&gt; Structures begin differing at:
&gt;   $a-&gt;[1] = &apos;10&apos;
&gt;   $b-&gt;[1] = &apos;0&apos;
&gt; 

Don&apos;t know yet.

&gt; 
&gt; 3) Cassandane/Cyrus/Quota.pm:120 - test_using_annotstorage_msg_late(Cassandane::Cyrus::Quota)
&gt; Structures begin differing at:
&gt;   $a-&gt;[1] = &apos;51&apos;
&gt;   $b-&gt;[1] = &apos;103&apos;
&gt; 
&gt; 4) Cassandane/Cyrus/Quota.pm:120 - test_using_annotstorage_msg(Cassandane::Cyrus::Quota)
&gt; Structures begin differing at:
&gt;   $a-&gt;[1] = &apos;50&apos;
&gt;   $b-&gt;[1] = &apos;102&apos;
&gt; 

This is due to the test not handling delayed expunge mode.  Fixed in commit &quot;Handle delayed expunge mode in Quota tests.&quot;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Bron Gondwana">brong@fastmail.fm</who>
            <bug_when>2012-01-03 07:58:50 EDT</bug_when>
            <thetext>&gt; 5) Cassandane/Cyrus/Rename.pm:155 - test_rename_user(Cassandane::Cyrus::Rename)
&gt; IMAP Command : &apos;rename&apos; failed. Response was : no - Unknown code ____ 255	...propagated

This is now fixed in the commit &quot;mailbox: add mkdir back to copyfile, and return IOERROR&quot;

&gt; There were 4 failures:
&gt; 1) Cassandane/Cyrus/Bug3470.pm:109 - test_list_percent(Cassandane::Cyrus::Bug3470)
&gt; LIST data mismatch: $VAR1 = [
&gt;  [...]

I&apos;ve fixed this one in commit &quot;Bug3470 - fix LSUB test&quot;.

The difference is that it now ejects a &quot;\HasNoChildren&quot; as well as a &quot;\Noinferiors&quot;.  Strictly speaking either is probably fine - you can infer the \HasNoChildren anyway.

RFC 3348 doesn&apos;t have an opinion on the topic, only that \HasChildren can&apos;t be combined with either of the above (obviously).

&gt; 2) Cassandane/Cyrus/Quota.pm:120 - test_upgrade_v2_4(Cassandane::Cyrus::Quota)
&gt; Structures begin differing at:
&gt;   $a-&gt;[1] = &apos;10&apos;
&gt;   $b-&gt;[1] = &apos;0&apos;

Neither do I - but it&apos;s a shithouse error message.  The location it&apos;s reported at is useless, and the content of the message is even more useless :(</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Julien Coloos">julien.coloos@atos.net</who>
            <bug_when>2012-01-03 08:48:29 EDT</bug_when>
            <thetext>&gt; &gt; 2) Cassandane/Cyrus/Quota.pm:120 - test_upgrade_v2_4(Cassandane::Cyrus::Quota)
&gt; &gt; Structures begin differing at:
&gt; &gt;   $a-&gt;[1] = &apos;10&apos;
&gt; &gt;   $b-&gt;[1] = &apos;0&apos;
&gt; 
&gt; Neither do I - but it&apos;s a shithouse error message.  The location it&apos;s reported
&gt; at is useless, and the content of the message is even more useless :(

I think it&apos;s related to the part that would have to compute the current annotation storage usage when upgrading from previous (2.4) mailbox format to new format.
See imap/upgrade_index.c:upgrade_index

But at some point there were discussions about users having to call explicitely the quota utility to resync the actual usage after upgrading. So maybe the test can be dropped now ?


As for the useless message, there may be something to rethink here as after using more and more Test::Unit I noticed that negative side of it: when doing the same kind of test hundreds of times, you start to refactor and share code (easier to maintain it later); but since you only get the line of code that failed (which is what happened here), you want to add some kind of context in the message; but then if you display your message, you do not display automatically the values that were tested.
Actually in such cases I think both the values being tested and the specific message explaining what was being checked are useful.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-03 18:57:08 EDT</bug_when>
            <thetext>(In reply to comment #4)
&gt; &gt; 5) Cassandane/Cyrus/Rename.pm:155 - test_rename_user(Cassandane::Cyrus::Rename)
&gt; &gt; IMAP Command : &apos;rename&apos; failed. Response was : no - Unknown code ____ 255	...propagated
&gt; 
&gt; This is now fixed in the commit &quot;mailbox: add mkdir back to copyfile, and
&gt; return IOERROR&quot;

Thanks.

&gt; &gt; 1) Cassandane/Cyrus/Bug3470.pm:109 - test_list_percent(Cassandane::Cyrus::Bug3470)
&gt; &gt; LIST data mismatch: $VAR1 = [
&gt; &gt;  [...]
&gt; 
&gt; I&apos;ve fixed this one in commit &quot;Bug3470 - fix LSUB test&quot;.

Thanks.

&gt; &gt; 2) Cassandane/Cyrus/Quota.pm:120 - test_upgrade_v2_4(Cassandane::Cyrus::Quota)
&gt; &gt; Structures begin differing at:
&gt; &gt;   $a-&gt;[1] = &apos;10&apos;
&gt; &gt;   $b-&gt;[1] = &apos;0&apos;
&gt; 
&gt; Neither do I - but it&apos;s a shithouse error message.  The location it&apos;s reported
&gt; at is useless, and the content of the message is even more useless :(

Agreed - I&apos;ll go do something about this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-03 19:17:29 EDT</bug_when>
            <thetext>(In reply to comment #5)

&gt; But at some point there were discussions about users having to call explicitely
&gt; the quota utility to resync the actual usage after upgrading. So maybe the test
&gt; can be dropped now ?

Hardly.  It doesn&apos;t matter whether Cyrus code gets run automatically, or periodically from master, or periodically from cron, or manually, or any other way; if it&apos;s a necessary part of completing the scenario and getting back to a working state then we have to test it.

If &apos;quota&apos; needs to be run, then the test should do so and check the reported quotas before and after.

&gt; As for the useless message, there may be something to rethink here as after
&gt; using more and more Test::Unit I noticed that negative side of it: when doing
&gt; the same kind of test hundreds of times, you start to refactor and share code
&gt; (easier to maintain it later); 

Yep.

&gt; but since you only get the line of code that
&gt; failed (which is what happened here), you want to add some kind of context in
&gt; the message; but then if you display your message, you do not display
&gt; automatically the values that were tested.

There&apos;s a couple of things here.

Firstly, jUnit, the Java implementation of the xUnit meme, reports a complete stack trace in each failure record.  This handles the problem of exceptions being thrown, not just in common test code, but deep in the guts of the Code Under Test.  It may be possible to tweak Test::Unit to do that.  I&apos;ve already had to hack around it to make the filtering system work in a sane manner, so I&apos;ll look at it.

Secondly, we do have context, it&apos;s just not in the failure record.  Each &apos;xlog&apos; statement in the test emits a line to syslog which looks like:

# Cassandane/Cyrus/Quota.pm
 277     $self-&gt;check_messages(\%msgs);
 278     xlog &quot;check that the usage is just below the limit&quot;;
 279     $self-&gt;_check_usages([int($expected/1024)]);


Jan  3 17:35:29 ... cassandane: =====&gt; Cyrus::Quota[278] check that the usage is just below the limit

This is why I sprinkle &apos;xlog&apos; around instead of comments.  If test $name fails, I look in syslog for the line &quot;test test_$name ending&quot;, the look backwards from that for the last xlog output, then work forward again.

Ok, it sucks but it&apos;s better than nothing.

Thirdly, Test::Unit already supports two ways of adding more context, which we hardly ever use:

 - $self-&gt;annotation(&apos;This text tells you useful stuff&apos;);

 - $self-&gt;assert($boolean, &apos;This text tells you useful stuff&apos;);
   $self-&gt;assert_equals(1, 0, &apos;This text tells you useful stuff&apos;);

See Test:Unit::Assert(3pm) and Test::Unit::TestCase.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-04 03:06:54 EDT</bug_when>
            <thetext>I&apos;ve pushed some commits which do two things.

First, the helper functions in Quota.pm use internal data structures
designed so that assert_deep_equals() failures are understandable by
a human.  Instead of

Structures begin differing at:
  $a-&gt;[1] = &apos;10&apos;
  $b-&gt;[1] = &apos;0&apos;

we now get

Structures begin differing at:
  $a-&gt;{X-ANNOTATION-STORAGE}{used} = &apos;10&apos;
  $b-&gt;{X-ANNOTATION-STORAGE}{used} = &apos;0&apos;


Secondly the failure message prints the stack trace (or more specifically,
that portion of the stack trace between the failure and the topmost test
function) like this:

There was 1 failure:
1) test_upgrade_v2_4(Cassandane::Cyrus::Quota)
 Structures begin differing at:
  $a-&gt;{X-ANNOTATION-STORAGE}{used} = &apos;10&apos;
  $b-&gt;{X-ANNOTATION-STORAGE}{used} = &apos;0&apos;
 at Cassandane/Cyrus/Quota.pm line 134
	Cassandane::Cyrus::Quota::_check_usages(&apos;Cassandane::Cyrus::Quota=HASH(0x3204660)&apos;, &apos;storage&apos;, 8, &apos;message&apos;, 4, &apos;x-annotation-storage&apos;, 10) called at Cassandane/Cyrus/Quota.pm line 1030
	Cassandane::Cyrus::Quota::test_upgrade_v2_4(&apos;Cassandane::Cyrus::Quota=HASH(0x3204660)&apos;) called at /usr/share/perl5/Test/Unit/TestCase.pm line 75
	[...framework calls elided...]</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-04 19:09:20 EDT</bug_when>
            <thetext>That last checkin broke some of the Sieve tests, which I&apos;ve fixed up again.
Now we have exactly one failure against cmu/master.

...............................................................................F.......................................................
Time: 1091 wallclock secs (33.71 usr  2.04 sys + 161.75 cusr  5.55 csys = 203.05 CPU)

!!!FAILURES!!!
Test Results:
Run: 134, Failures: 1, Errors: 0

There was 1 failure:
1) test_upgrade_v2_4(Cassandane::Cyrus::Quota)
 Structures begin differing at:
  $a-&gt;{X-ANNOTATION-STORAGE}{used} = &apos;10&apos;
  $b-&gt;{X-ANNOTATION-STORAGE}{used} = &apos;0&apos;
 at Cassandane/Cyrus/Quota.pm line 134
        Cassandane::Cyrus::Quota::_check_usages(&apos;Cassandane::Cyrus::Quota=HASH(0x2dcdbc0)&apos;, &apos;storage&apos;, 8, &apos;message&apos;, 4, &apos;x-annotation-storage&apos;, 10) called at Cassandane/Cyrus/Quota.pm line 1018
        Cassandane::Cyrus::Quota::test_upgrade_v2_4(&apos;Cassandane::Cyrus::Quota=HASH(0x2dcdbc0)&apos;) called at /usr/share/perl5/Test/Unit/TestCase.pm line 75
        [...framework calls elided...]

Test was not successful.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-06 02:17:04 EDT</bug_when>
            <thetext>Julien, are you planning to fix that last bug?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Julien Coloos">julien.coloos@atos.net</who>
            <bug_when>2012-01-06 07:57:36 EDT</bug_when>
            <thetext>Had a look at it.
Proposed patch available as usual on our github repo: git://github.com/worldline-messaging/cyrus-imapd.git; branch ticket/3619

Pushed two commits:

57edc7b989051a4cdc3f7a7e48b10c7cd2a253f7 adds mailbox annotations size to mbexamine output
This information can be useful :)

decc9b978e00d40aa0cfb7ee21b2c5a06e9e7be0 fixes index upgrade
It&apos;s based on annotate_reconstruct API, which I renamed to recalc.
Since the code was currently used for the reconstruct CLI, it could write things to stdout (when pruning orphan per-message annotations). I wondered whether to also do this pruning when upgrading the index, and finally let the action while disabling the stdout messages when not in reconstruct mode. If necessary, pruning could be disabled in annotate_recalc_commit.
I also removed a few unused code lines in annotatemore commit/abort functions (quota_txn).


The test now passes, but I could not check other tests which almost all fails with the following message:
 Perl exception: Undefined subroutine &amp;Cassandane::Generator::sha1_hex called
 at Cassandane/Generator.pm line 229
	Cassandane::Generator::_generate_unique() called at Cassandane/Generator.pm line 274

Seems related to the recent changes to handle both Digest::SHA and Digest::SHA1 packages, but I did not yet find exactly why it fails here (FYI: perl v5.10.1).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Julien Coloos">julien.coloos@atos.net</who>
            <bug_when>2012-01-06 12:12:55 EDT</bug_when>
            <thetext>Found a fix for sha1_hex import. Available in our repo: git://github.com/worldline-messaging/cassandane.git; branch extra/misc
Commit: fef45b06a94b1db44524a134a41884feefb8f958


My previous cyrus-imapd patch made another test (Bug3463) fail. The reason being that the quotaroot of the (unpacked) mailbox actually belonged to another (non-existent) mailbox.
Compared to my previous code, the latest patch stops the index upgrade upon quota usage updating issues ... For the moment I reverted it to the previous behaviour in commit 8ac18aac008d09cdadc85c28ba04f2567f33a409 (cyrus-imapd repo), unless you think stopping upgrade in such cases is really right.


I also see 3 other test fails, even without the new code:
1) test_duplicate_suppression_on_uniqueid_delete(Cassandane::Cyrus::Delivery)
 Boolean assertion failed at /usr/local/share/perl/5.10.1/Test/Unit/Exception.pm line 13
	Test::Unit::Exception::throw_new(&apos;Test::Unit::Failure=HASH(0xab5b748)&apos;, &apos;-package&apos;, &apos;Cassandane::Cyrus::TestCase&apos;, &apos;-file&apos;, &apos;Cassandane/Cyrus/TestCase.pm&apos;, &apos;-line&apos;, 351, &apos;-object&apos;, &apos;Cassandane::Cyrus::Delivery=HASH(0xab3f838)&apos;, ...) called at /usr/local/share/perl/5.10.1/Test/Unit/Assert.pm line 85
	Test::Unit::Assert::do_assertion(&apos;Cassandane::Cyrus::Delivery=HASH(0xab3f838)&apos;, &apos;Test::Unit::Assertion::Boolean=SCALAR(0xab57f58)&apos;, &apos;Cassandane::Cyrus::TestCase&apos;, &apos;Cassandane/Cyrus/TestCase.pm&apos;, 351) called at /usr/local/share/perl/5.10.1/Test/Unit/Assert.pm line 19
	Test::Unit::Assert::assert(&apos;Cassandane::Cyrus::Delivery=HASH(0xab3f838)&apos;, &apos;&apos;) called at Cassandane/Cyrus/TestCase.pm line 351
	Cassandane::Cyrus::TestCase::check_messages(&apos;Cassandane::Cyrus::Delivery=HASH(0xab3f838)&apos;, &apos;HASH(0xab4ec38)&apos;, &apos;check_guid&apos;, 0, &apos;keyed_on&apos;, &apos;uid&apos;) called at Cassandane/Cyrus/Delivery.pm line 278
	Cassandane::Cyrus::Delivery::test_duplicate_suppression_on_uniqueid_delete(&apos;Cassandane::Cyrus::Delivery=HASH(0xab3f838)&apos;) called at /usr/local/share/perl/5.10.1/Test/Unit/TestCase.pm line 75
	[...framework calls elided...]

2) test_uniqueid(Cassandane::Cyrus::Metadata)
 Boolean assertion failed at /usr/local/share/perl/5.10.1/Test/Unit/Exception.pm line 13
	Test::Unit::Exception::throw_new(&apos;Test::Unit::Failure=HASH(0xae98128)&apos;, &apos;-package&apos;, &apos;Cassandane::Cyrus::Metadata&apos;, &apos;-file&apos;, &apos;Cassandane/Cyrus/Metadata.pm&apos;, &apos;-line&apos;, 518, &apos;-object&apos;, &apos;Cassandane::Cyrus::Metadata=HASH(0xae2fd68)&apos;, ...) called at /usr/local/share/perl/5.10.1/Test/Unit/Assert.pm line 85
	Test::Unit::Assert::do_assertion(&apos;Cassandane::Cyrus::Metadata=HASH(0xae2fd68)&apos;, &apos;Test::Unit::Assertion::Boolean=SCALAR(0xae4fa08)&apos;, &apos;Cassandane::Cyrus::Metadata&apos;, &apos;Cassandane/Cyrus/Metadata.pm&apos;, 518) called at /usr/local/share/perl/5.10.1/Test/Unit/Assert.pm line 19
	Test::Unit::Assert::assert(&apos;Cassandane::Cyrus::Metadata=HASH(0xae2fd68)&apos;, &apos;&apos;) called at Cassandane/Cyrus/Metadata.pm line 518
	Cassandane::Cyrus::Metadata::test_uniqueid(&apos;Cassandane::Cyrus::Metadata=HASH(0xae2fd68)&apos;) called at /usr/local/share/perl/5.10.1/Test/Unit/TestCase.pm line 75
	[...framework calls elided...]

3) test_quota_f(Cassandane::Cyrus::Quota)
 expected 9, got 0 at Cassandane/Cyrus/Quota.pm line 885
	Cassandane::Cyrus::Quota::test_quota_f(&apos;Cassandane::Cyrus::Quota=HASH(0xaf4f1a0)&apos;) called at /usr/local/share/perl/5.10.1/Test/Unit/TestCase.pm line 75
	[...framework calls elided...]

Test was not successful.


Is it due to recent changes ? (I thought the only remaining test to fail was the quota upgrade).


PS: If you are interested, you will find a few other commits in our cassandane repo (which we are using when testing some of our specific stuff):

660a33ec0c30e2e7636fe2320b766dd613027656
Utility function to retrieve switch value out of configuration

3727e8c06a456d5ecb8190c099b62f3d08cde4be
Necessary code for pop3d service with associated message store.

6bc0636163bce577dbf8b366dbbd3a2e58a7c4a8
When generating random data (which is mainly for messages), break it in lines.

ad2e6c2d8f22e3053bc25654a3fca1c11bff19ea
Changes concerning the way target folder is handled when appending mails. The idea was to optimize a bit the action when dealing with lot of mails in one folder: previous code unconditionnaly close current folder to re-select it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-08 23:23:28 EDT</bug_when>
            <thetext>(In reply to comment #12)
&gt; Found a fix for sha1_hex import. Available in our repo:
&gt; git://github.com/worldline-messaging/cassandane.git; branch extra/misc
&gt; Commit: fef45b06a94b1db44524a134a41884feefb8f958

Thanks, that&apos;s very useful, pushed to cmu/master.

I&apos;ve also pushed a bunch of stuff from my iris405 branch, in
preparation for fixing up some of the problems noted by Jeroen,
but I&apos;ve left the Master tests disabled for the time being.

&gt; My previous cyrus-imapd patch made another test (Bug3463) fail. 

Two steps forward, one step back...

&gt; The reason
&gt; being that the quotaroot of the (unpacked) mailbox actually belonged to another
&gt; (non-existent) mailbox.
&gt; Compared to my previous code, the latest patch stops the index upgrade upon
&gt; quota usage updating issues ... For the moment I reverted it to the previous
&gt; behaviour in commit 8ac18aac008d09cdadc85c28ba04f2567f33a409 (cyrus-imapd
&gt; repo), unless you think stopping upgrade in such cases is really right.

Not sure, have to think about it.

&gt; I also see 3 other test fails, even without the new code:

I don&apos;t see those.  With your latest code I see only one failure:

!!!FAILURES!!!
Test Results:
Run: 137, Failures: 1, Errors: 0

There was 1 failure:
1) test_quota_f(Cassandane::Cyrus::Quota)
 expected 9, got 0 at Cassandane/Cyrus/Quota.pm line 882
        Cassandane::Cyrus::Quota::test_quota_f(&apos;Cassandane::Cyrus::Quota=HASH(0x3246188)&apos;) called at /usr/share/perl5/Test/Unit/TestCase.pm line 75
        [...framework calls elided...]

Test was not successful.


I think I broke that one; but that test is need of some tweaking anyway.

&gt; PS: If you are interested, you will find a few other commits in our cassandane
&gt; repo (which we are using when testing some of our specific stuff):

I haven&apos;t looked at these, remind me again after linux.conf.au (in about 2 weeks).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Julien Coloos">julien.coloos@atos.net</who>
            <bug_when>2012-01-09 06:53:16 EDT</bug_when>
            <thetext>&gt; &gt; I also see 3 other test fails, even without the new code:
&gt; 
&gt; I don&apos;t see those.  With your latest code I see only one failure:
&gt; ...
&gt; 1) test_quota_f(Cassandane::Cyrus::Quota)
&gt;  expected 9, got 0 at Cassandane/Cyrus/Quota.pm line 882

It appears the two other failures I get are due to the fact I don&apos;t have libuuid on my system.
From what I could see, when generating a new folder unique id cyrus will use libuuid if present, or combine a hash of the folder name and the folder uidvalidity (which happens to be the creation time, precision of 1s).
Both tests do use the same folder name twice (created, deleted, re-created). So here each creation ends up with the same unique id (done in the same second), which triggers test failures:
 - one test is checking the second unique id is different from the first
 - the other test prunes delivery duplicates, which I guess are based on the unique id of the folder and some properties of the message
If I manually delays (1s) the folder re-creation, tests do pass (since uidvality, and thus unique id, is then different).

I am not sure there are noticeable chances to have this scenario in real life, but maybe the &apos;default&apos; (libuuid not used) unique id could be added something to take care of this. Or maybe libuuid should be documented as highly recommended (or even made mandatory) ?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-09 16:52:34 EDT</bug_when>
            <thetext>(In reply to comment #14)
&gt; 
&gt; It appears the two other failures I get are due to the fact I don&apos;t have
&gt; libuuid on my system.

Really!?  Wow.  On my system /sbin/mkfs.ext3 uses libuuid1, so it&apos;s
pretty much a required package.

&gt; From what I could see, when generating a new folder unique id cyrus will use
&gt; libuuid if present, 

Yes, since Bug 3601.

&gt; Both tests do use the same folder name twice (created, deleted, re-created). So
&gt; here each creation ends up with the same unique id (done in the same second),
&gt; which triggers test failures:
&gt;  - one test is checking the second unique id is different from the first
&gt;  - the other test prunes delivery duplicates, which I guess are based on the
&gt; unique id of the folder and some properties of the message

Yes.

&gt; If I manually delays (1s) the folder re-creation, tests do pass (since
&gt; uidvality, and thus unique id, is then different).

Sure.  Except, the tests are specifically designed to test for that
broken behaviour, so please don&apos;t do that.

&gt; I am not sure there are noticeable chances to have this scenario in real life,

We have actually seen it happen at fastmail, I believe once or twice.
It *is* rare.

&gt; but maybe the &apos;default&apos; (libuuid not used) unique id could be added something
&gt; to take care of this. Or maybe libuuid should be documented as highly
&gt; recommended (or even made mandatory) ?

We could make libuuid mandatory in the configure script.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-24 02:13:36 EDT</bug_when>
            <thetext>I finally have Cassandane fully passing against cmu/master,
even under Jenkins.

http://ci.cyrusimap.org/job/cyrus-imapd-master/321/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Greg Banks">gnb@fastmail.fm</who>
            <bug_when>2012-01-26 23:52:13 EDT</bug_when>
            <thetext>So the latest Cassandane &apos;master&apos; branch passes all tests with
the latest Cyrus &apos;master&apos; branch, and is doing so twice a day
at ci.cyrusimap.org.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>