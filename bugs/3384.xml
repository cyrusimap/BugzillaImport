<?xml version="1.0" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.cyrusimap.org/bugzilla.dtd">

<bugzilla version="3.2.5.1-2"
          urlbase="https://bugzilla.cyrusimap.org/"
          maintainer="Dave McMurtrie &lt;dave64@andrew.cmu.edu&gt;"
>

    <bug>
          <bug_id>3384</bug_id>
          
          <creation_ts>2011-01-14 07:02 EDT</creation_ts>
          <short_desc>Provide some kind of storage hierarchy</short_desc>
          <delta_ts>2015-11-10 02:15:50 EDT</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>Cyrus IMAP</product>
          <component>IMAP</component>
          <version>2.5.x (next)</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>ASSIGNED</bug_status>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Rafael Varela">rafael.varela+cyrus@gmail.com</reporter>
          <assigned_to name="Bron Gondwana">brong@fastmail.fm</assigned_to>
          <cc>awilliam@whitemice.org</cc>
    
    <cc>brong@fastmail.fm</cc>
    
    <cc>falon@ruparpiemonte.it</cc>
    
    <cc>fedoraproject@cyberpear.com</cc>
    
    <cc>Leena.Heino@uta.fi</cc>
    
    <cc>nathang@actarg.com</cc>
    
    <cc>pcravero@as2594.net</cc>
    
    <cc>rudy.gevaert@ugent.be</cc>
    
    <cc>simon.matter@invoca.ch</cc>
    
    <cc>sistemisti-posta@csi.it</cc>
    
    <cc>vanmeeuwen@kolabsys.com</cc>
    
    <cc>wes@umich.edu</cc>
          <qa_contact name="The Cyrus Bugzilla List">cyrus-bugzilla@lists.andrew.cmu.edu</qa_contact>

      

      

      
          <long_desc isprivate="0">
            <who name="Rafael Varela">rafael.varela+cyrus@gmail.com</who>
            <bug_when>2011-01-14 07:02:42 EDT</bug_when>
            <thetext>The purpose is to have some kind of storage hierarchy that make possible to move older mails that are rarely accessed to cheaper (slower) storage. 

It could be sommething similar to &quot;Alternate storage&quot; in Dovecot:

See: http://wiki2.dovecot.org/MailboxFormat/dbox</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Adam Tauno Williams">awilliam@whitemice.org</who>
            <bug_when>2011-01-17 06:55:42 EDT</bug_when>
            <thetext>Seems possibly related to Bug#3146 [ipurge evolution], Bug#3167 [add regex support to ipurge to improve folder selection], Bug#2302 [mailbox select option for ipurge], and Bug#3092 [mailbox select option for ipurge].  Generally just making ipurge more flexible, at least as a start; if ipurge could move messages as well as delete them...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rafael Varela">rafael.varela+cyrus@gmail.com</who>
            <bug_when>2011-01-17 14:03:17 EDT</bug_when>
            <thetext>Yes, this request seems somewhat related to the functionality of those bugs, but take into account that (in my opinion):

- The process should be transparent to the user, i.e., migrated messages/folders should be accessed the same way as if they were in the primary storage.

- The granularity at which data is moved to alternate storage should be individual messages.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Bron Gondwana">brong@fastmail.fm</who>
            <bug_when>2011-03-16 05:36:11 EDT</bug_when>
            <thetext>Marking this an an enhancement rather than a bug... it&apos;s complex and long term.

Actually, implementation wise it isn&apos;t _too_ nasty.  Basically we&apos;d have to:

a) change mailbox_message_file() to take a &quot;struct index_record *&quot; rather than a UID as the second parameter.

b) add a system_flags bit, like FLAG_EXPUNGED and FLAG_UNLINKED - but call it FLAG_ARCHIVED.

c) add another spool directory parameter to imapd.conf to specify where the related &quot;archive&quot; directory was for each partition.


I assume you&apos;d be happy with that level of granularity.

At this point, all you would need is to do is add some code to mailbox_rewrite_index_record which compared the flag to the same flag on the previous version of the record.  If flag had changed (either direction!)

a) copy the file from the old location to the new location and confirm that the copy succeeded.

b) rewrite the record with the new &quot;correct&quot; location.

c) add the old file to a list of files to be unlinked AFTER the mailbox has successfully committed.  This list already exists for the purposes of mailbox_repack and friends - so the only necessary change would be extending it to know if it had to find the file on the spool partition or the archive partition (I think it just stores a UID list now)


It&apos;s not too hard...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Bron Gondwana">brong@fastmail.fm</who>
            <bug_when>2011-03-16 05:36:35 EDT</bug_when>
            <thetext>I&apos;d better take it, now that I&apos;ve spelled out how it would work!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rafael Varela">rafael.varela+cyrus@gmail.com</who>
            <bug_when>2011-03-17 13:03:53 EDT</bug_when>
            <thetext>It sounds great. Thanks for considering it!

Taking into account that the flag can change in either direction is a good point. An archived message should go back to the &quot;fast&quot; storage when it is accessed again by the user.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Wes Craig">wes@umich.edu</who>
            <bug_when>2011-03-17 13:49:53 EDT</bug_when>
            <thetext>I hate to suggest that multiple levels of hierarchy might improve economic efficiency even more, e.g., SSD -&gt; RAID 10 -&gt; RAID 5.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Rafael Varela">rafael.varela+cyrus@gmail.com</who>
            <bug_when>2011-08-20 07:18:30 EDT</bug_when>
            <thetext>(In reply to comment #6)
&gt; I hate to suggest that multiple levels of hierarchy might improve economic
&gt; efficiency even more, e.g., SSD -&gt; RAID 10 -&gt; RAID 5.

True, but that would require the definition of more complex rules in the configuration file. I think that if Cyrus developers want to go this way, they should think about an independent policy daemon to analyze the rules and govern the data movement or an API to integrate external utilities or systems.

From a practical standpoint, I think that it&apos;s better to have a simpler (but suboptimal) feature in a shorter time frame that would benefit a large percentage of users, taking into account that, currently, we don&apos;t have any storage hierarchy capabilities.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Adam Tauno Williams">awilliam@whitemice.org</who>
            <bug_when>2011-08-20 10:40:08 EDT</bug_when>
            <thetext>+1 on making this simple and &apos;sooner&apos; rather than questing for the perfect solution [perfect solutions having that nasty habit of never arriving]</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Jeroen van Meeuwen (Kolab Systems)">vanmeeuwen@kolabsys.com</who>
            <bug_when>2011-08-25 09:13:03 EDT</bug_when>
            <thetext>See also bug #3374, on selecting the new partition to create a new mailbox on.

Perhaps classifying the type of storage on each such partition can, I imagine a &apos;storage weight&apos; or &apos;storage efficiency&apos; type of parameter can be made part of the partition selection routine.

Note that the configuration options and variable names have already been renamed (if I recall correctly), so that &apos;partition_mode&apos; is freed up. Please see the following snippet from a (private, off-list) conversation I&apos;ve had with Julien Coloos on documentation for bug #3374;

Jeroen van Meeuwen (Kolab Systems) wrote:
&gt; - the partition_* and serverlist_* settings seem to all be prefixed with 
&gt; &apos;*_mode&apos;, whereas, perhaps, &apos;*_select&apos; is more appropriate. Ergo:
&gt; 
&gt;   partition_select_mode: freespace-most
&gt;   partition_select_soft_usage_limit: 50
&gt;   partition_select_exclude: part1 part2
&gt; 
&gt; I think this makes the names of the settings just a tiny little more 
&gt; intuitive, but as an effect easier to document, remember, comprehend and 
&gt; consistently apply.
&gt; 
&gt; I think it also allows us the opportunity to, in the future, create
&gt; settings that in fact do use partition_mode* types of settings, such as:
&gt; 
&gt;   partition_mode-part1: archive
&gt;   partition_mode-part2: expire
&gt;   part2-expire: 90 days

Please never mind what I had in mind with an &apos;expire&apos; partition mode... ;-)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <who name="Bron Gondwana">brong@fastmail.fm</who>
            <bug_when>2013-08-23 09:21:47 EDT</bug_when>
            <thetext>FYI - I have this working at FastMail now - pretty much exactly how I described.

It&apos;s going to take some time to disentangle it from our conversations code and push it upstream.

We are storing &quot;spool&quot; on SSDs, and packing down emails that are either larger than 1Mb or not \Flagged and older than a week onto big SATA disks.

It&apos;s not in production yet - still testing - but looking good so far!

It also has two separate cyrus.cache files, along side the spool - so fresh messages hit the cache on the SSD still, and old messages don&apos;t eat all the SSD with their cache files.</thetext>
          </long_desc>
      
      

    </bug>

</bugzilla>