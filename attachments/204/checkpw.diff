Index: checkpw.c
===================================================================
RCS file: /afs/andrew.cmu.edu/system/cvs/src/sasl/lib/checkpw.c,v
retrieving revision 1.62
diff -u -r1.62 checkpw.c
--- checkpw.c	19 Mar 2003 18:25:27 -0000	1.62
+++ checkpw.c	17 Jul 2003 18:46:31 -0000
@@ -457,6 +457,7 @@
     void *context;
     char pwpath[sizeof(srvaddr.sun_path)];
     const char *p = NULL;
+    char *freeme = NULL;
 #ifdef USE_DOORS
     door_arg_t arg;
 #endif
@@ -475,6 +476,19 @@
 	strcat(pwpath, "/mux");
     }
 
+    /* Split out username/realm if necessary */
+    if(strrchr(userid,'@') != NULL) {
+	char *rtmp;
+	
+	if(_sasl_strdup(userid, &freeme, NULL) != SASL_OK)
+	    goto fail;
+
+	userid = freeme;
+	rtmp = strrchr(userid,'@');
+	*rtmp = '\0';
+	user_realm = rtmp + 1;
+    }
+
     /*
      * build request of the form:
      *
@@ -491,7 +505,7 @@
 	if (u_len + p_len + s_len + r_len + 30 > (unsigned short) sizeof(query)) {
 	    /* request just too damn big */
             sasl_seterror(conn, 0, "saslauthd request too large");
-	    return SASL_FAIL;
+	    goto fail;
 	}
 
 	u_len = htons(u_len);
@@ -520,7 +534,7 @@
     s = open(pwpath, O_RDONLY);
     if (s < 0) {
 	sasl_seterror(conn, 0, "cannot open door to saslauthd server: %m", errno);
-	return SASL_FAIL;
+	goto fail;
     }
 
     arg.data_ptr = query;
@@ -536,7 +550,7 @@
 	/* oh damn, we got back a really long response */
 	munmap(arg.rbuf, arg.rsize);
 	sasl_seterror(conn, 0, "saslauthd sent an overly long response");
-	return SASL_FAIL;
+	goto fail;
     }
     response[arg.data_size] = '\0';
 
@@ -547,7 +561,7 @@
     s = socket(AF_UNIX, SOCK_STREAM, 0);
     if (s == -1) {
 	sasl_seterror(conn, 0, "cannot create socket for saslauthd: %m", errno);
-	return SASL_FAIL;
+	goto fail;
     }
 
     memset((char *)&srvaddr, 0, sizeof(srvaddr));
@@ -558,7 +572,7 @@
 	int r = connect(s, (struct sockaddr *) &srvaddr, sizeof(srvaddr));
 	if (r == -1) {
 	    sasl_seterror(conn, 0, "cannot connect to saslauthd server: %m", errno);
-	    return SASL_FAIL;
+	    goto fail;
 	}
     }
 
@@ -570,7 +584,7 @@
 
 	if (retry_writev(s, iov, 1) == -1) {
             sasl_seterror(conn, 0, "write failed");
-  	    return SASL_FAIL;
+	    goto fail;
   	}
     }
 
@@ -584,21 +598,21 @@
 	 */
 	if (retry_read(s, &count, sizeof(count)) < (int) sizeof(count)) {
 	    sasl_seterror(conn, 0, "size read failed");
-	    return SASL_FAIL;
+	    goto fail;
 	}
 	
 	count = ntohs(count);
 	if (count < 2) { /* MUST have at least "OK" or "NO" */
 	    close(s);
 	    sasl_seterror(conn, 0, "bad response from saslauthd");
-	    return SASL_FAIL;
+	    goto fail;
 	}
 	
 	count = (int)sizeof(response) < count ? sizeof(response) : count;
 	if (retry_read(s, response, count) < count) {
 	    close(s);
 	    sasl_seterror(conn, 0, "read failed");
-	    return SASL_FAIL;
+	    goto fail;
 	}
 	response[count] = '\0';
     }
@@ -606,12 +620,18 @@
     close(s);
 #endif /* USE_DOORS */
   
+    if(freeme) free(freeme);
+
     if (!strncmp(response, "OK", 2)) {
 	return SASL_OK;
     }
   
     sasl_seterror(conn, SASL_NOLOG, "authentication failed");
     return SASL_BADAUTH;
+
+ fail:
+    if (freeme) free(freeme);
+    return SASL_FAIL;
 }
 
 #endif
