Index: addr-lex.l
===================================================================
RCS file: /cvs/src/sieve/addr-lex.l,v
retrieving revision 1.9
diff -u -r1.9 addr-lex.l
--- addr-lex.l	30 Nov 2006 17:11:24 -0000	1.9
+++ addr-lex.l	9 Aug 2007 12:54:16 -0000
@@ -83,7 +83,7 @@
     extern char *addrptr;	/* current position in address string */
     size_t n;			/* number of characters to read from string */
 
-    n = strlen(addrptr) < max_size ? strlen(addrptr) : max_size;
+    n = (int)strlen(addrptr) < max_size ? (int)strlen(addrptr) : max_size;
     if (n > 0) {
 	memcpy(buf, addrptr, n);
 	addrptr += n;
Index: bc_eval.c
===================================================================
RCS file: /cvs/src/sieve/bc_eval.c,v
retrieving revision 1.8
diff -u -r1.8 bc_eval.c
--- bc_eval.c	30 Nov 2006 17:11:24 -0000	1.8
+++ bc_eval.c	9 Aug 2007 12:54:16 -0000
@@ -958,7 +958,7 @@
        order.  all the scripts written then would have version 0x01 written
        in host byte order.*/
 
-     if(version == ntohl(1)) {
+     if(version == (int)ntohl(1)) {
 	if(errmsg) {
 	    *errmsg =
 		"Incorrect Bytecode Version, please recompile (use sievec)";
Index: message.c
===================================================================
RCS file: /cvs/src/sieve/message.c,v
retrieving revision 1.29
diff -u -r1.29 message.c
--- message.c	30 Nov 2006 17:11:24 -0000	1.29
+++ message.c	9 Aug 2007 12:54:17 -0000
@@ -513,7 +513,7 @@
 	case ADDRESS_USER:
 	    if (a->mailbox) {
 		char *p = strchr(a->mailbox, '+');
-		int len = p ? p - a->mailbox : strlen(a->mailbox);
+		int len = p ? p - a->mailbox : (int)strlen(a->mailbox);
 
 		am->freeme = (char *) xmalloc(len + 1);
 		strncpy(am->freeme, a->mailbox, len);
Index: script.c
===================================================================
RCS file: /cvs/src/sieve/script.c,v
retrieving revision 1.63
diff -u -r1.63 script.c
--- script.c	30 Nov 2006 17:11:24 -0000	1.63
+++ script.c	9 Aug 2007 12:54:17 -0000
@@ -343,7 +343,7 @@
 	    /* find length of plaintext up to next potential variable */
 	    n = strcspn(c+1, "$") + 1; /* skip opening '$' */
 	    /* realloc if necessary */
-	    if ( (*outlen) + n+1 >= allocsize) {
+	    if ( (*outlen) + n+1 >= (size_t)allocsize) {
 		allocsize = (*outlen) + n+1 + GROW_AMOUNT;
 		*out = xrealloc(*out, allocsize);
 	    }
