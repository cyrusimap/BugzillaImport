Index: imap/imapd.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/imapd.c,v
retrieving revision 1.443.2.36
diff -u -r1.443.2.36 imapd.c
--- imap/imapd.c	5 Aug 2004 16:23:31 -0000	1.443.2.36
+++ imap/imapd.c	6 Aug 2004 16:31:32 -0000
@@ -141,6 +141,7 @@
 /* per-user/session state */
 struct protstream *imapd_out = NULL;
 struct protstream *imapd_in = NULL;
+struct protgroup *protin = NULL;
 static char imapd_clienthost[NI_MAXHOST*2+1] = "[local]";
 static int imapd_logfd = -1;
 char *imapd_userid = NULL, *proxy_userid = NULL;
@@ -518,6 +519,9 @@
     
     imapd_in = imapd_out = NULL;
 
+    if (protin) protgroup_free(protin);
+    protin = NULL;
+
 #ifdef HAVE_SSL
     if (tls_conn) {
 	if (tls_reset_servertls(&tls_conn) == -1) {
@@ -837,6 +841,8 @@
 	snmp_increment(ACTIVE_CONNECTIONS, -1);
     }
 
+    if (protin) protgroup_free(protin);
+
 #ifdef HAVE_SSL
     tls_shutdown_serverengine();
 #endif
@@ -913,7 +919,14 @@
 	close(fd);
     }
 
+    protin = protgroup_new(2);
+    protgroup_insert(protin, imapd_in);
+
     for (;;) {
+	struct protgroup *protout = NULL;
+	struct timeval timeout;
+	int n, clientin;
+
 	if ( !imapd_userisadmin && imapd_userid
 	     && shutdown_file(shut, sizeof(shut))) {
 	    for (p = shut; *p == '['; p++); /* can't have [ be first char */
@@ -923,6 +936,61 @@
 
 	signals_poll();
 
+	/* flush any buffered output */
+	if (backend_current) prot_flush(backend_current->out);
+	prot_flush(imapd_out);
+
+	timeout.tv_sec = 60;
+	timeout.tv_usec = 0;
+	
+	n = prot_select(protin, PROT_NO_FD, &protout, NULL, &timeout);
+	if (n == -1) {
+	    syslog(LOG_ERR, "prot_select() failed in cmdloop(): %m");
+	    fatal("prot_select() failed in cmdloop()", EC_TEMPFAIL);
+	}
+
+	clientin = 0;
+	if (n && protout) {
+	    struct protstream *ptmp;
+
+	    /* see who has input */
+	    for (; n; n--) {
+		ptmp = protgroup_getelement(protout, n-1);
+
+		if (ptmp == imapd_in) {
+		    /* input from client, process it later */
+		    clientin = 1;
+		}
+		else if (backend_current && ptmp == backend_current->in){
+		    /* input from selected backend, stream it to client */
+		    do {
+			char buf[4096];
+			int c = prot_read(ptmp, buf, sizeof(buf));
+			if (c == 0 || c < 0) break;
+			prot_write(imapd_out, buf, c);
+		    } while (ptmp->cnt > 0);
+
+		    if (prot_error(ptmp)) {
+			/* uh oh, we're not happy */
+			fatal("Lost connection to selected backend",
+			      EC_UNAVAILABLE);
+		    }
+		}
+		else {
+		    /* XXX shouldn't get here !!! */
+		    fatal("unknown protstream returned by prot_select in cmdloop",
+			  EC_SOFTWARE);
+		}
+	    }
+	}
+	if (protout) protgroup_free(protout);
+	protout = NULL;
+
+	if (!clientin) {
+	    /* no input from client */
+	    continue;
+	}
+
 	/* Parse tag */
 	c = getword(imapd_in, &tag);
 	if (c == EOF) {
@@ -1257,6 +1325,16 @@
 
 		snmp_increment(LOGOUT_COUNT, 1);		
 
+		/* force any responses from our selected backend */
+		if (backend_current) {
+		    char mytag[128];
+
+		    proxy_gentag(mytag, sizeof(mytag));
+
+		    prot_printf(backend_current->out, "%s Noop\r\n", mytag);
+		    pipe_until_tag(backend_current, mytag, 0);
+		}
+
 		prot_printf(imapd_out, "* BYE %s\r\n", 
 			    error_message(IMAP_BYE_LOGOUT));
 		prot_printf(imapd_out, "%s OK %s\r\n", tag.s, 
@@ -2113,7 +2191,6 @@
     if (backend_current) {
 	/* remote mailbox */
 	prot_printf(backend_current->out, "%s %s\r\n", tag, cmd);
-	pipe_including_tag(backend_current, tag, 0);
 
 	return;
     }
@@ -2297,8 +2374,8 @@
 {
     static int idle_period = -1;
     static struct buf arg;
-    struct protgroup *protin = protgroup_new(2);
-    struct protgroup *protout = NULL;
+    struct protgroup *idlein = protgroup_new(2);
+    struct protgroup *idleout = NULL;
     struct timeval timeout;
     int c = EOF, n, done = 0, shutdown = 0;
     char buf[2048], shut[1024];
@@ -2309,9 +2386,9 @@
       if (idle_period < 1) idle_period = 0;
     }
 
-    /* Reset protin to all zeros (to preserve memory allocation) */
-    protgroup_reset(protin);
-    protgroup_insert(protin, imapd_in);
+    /* Reset idlein to all zeros (to preserve memory allocation) */
+    protgroup_reset(idlein);
+    protgroup_insert(idlein, imapd_in);
 
     if (backend_current && CAPA(backend_current, CAPA_IDLE)) {
 	/* Start IDLE on backend */
@@ -2331,7 +2408,7 @@
 	    goto done;
 	}
 
-	protgroup_insert(protin, backend_current->in);
+	protgroup_insert(idlein, backend_current->in);
     }
 
     /* Start listening to idled */
@@ -2354,23 +2431,23 @@
 	    prot_flush(imapd_out);
 	}
 
-	/* Clear protout if needed */
-	protgroup_free(protout);
-	protout = NULL;
+	/* Clear idleout if needed */
+	protgroup_free(idleout);
+	idleout = NULL;
 
 	timeout.tv_sec = idle_period;
 	timeout.tv_usec = 0;
 
-	n = prot_select(protin, PROT_NO_FD, &protout, NULL, &timeout);
+	n = prot_select(idlein, PROT_NO_FD, &idleout, NULL, &timeout);
 	if (n == -1 && errno != EINTR) {
 	    syslog(LOG_ERR, "prot_select() failed in cmd_idle(): %m");
 	    fatal("prot_select() failed in cmd_idle()", EC_TEMPFAIL);
 	}
-	if (n > 0 && protout) {
+	if (n > 0 && idleout) {
 	    struct protstream *ptmp;
 
 	    for (; n; n--) {
-		ptmp = protgroup_getelement(protout, n-1);
+		ptmp = protgroup_getelement(idleout, n-1);
 		if (ptmp == imapd_in) {
 		    /* The client sent us something, we're done */
 		    done = 1;
@@ -2403,8 +2480,8 @@
     c = getword(imapd_in, &arg);
 
   done:
-    protgroup_free(protin);
-    protgroup_free(protout);
+    protgroup_free(idlein);
+    protgroup_free(idleout);
 
     if (done) {
 	/* Done listening to idled */
@@ -2559,23 +2636,17 @@
 			     &backend_current, &backend_inbox, imapd_in);
 	if (!s) r = IMAP_SERVER_UNAVAILABLE;
 
+	imapd_check(s, 0, 0);
+
 	if (!r) {
 	    prot_printf(s->out, "%s Append {%d+}\r\n%s ", tag, strlen(name), name);
 	    if (!pipe_command(s, 16384)) {
-		pipe_until_tag(s, tag, 0);
+		if (!backend_current || s != backend_current)
+		    pipe_including_tag(s, tag, 0);
 	    }
 	} else {
 	    eatline(imapd_in, prot_getc(imapd_in));
-	}
-
-	imapd_check(s, 0, 0);
-
-	if (r) {
 	    prot_printf(imapd_out, "%s NO %s\r\n", tag, error_message(r));
-	} else {
-	    /* we're allowed to reference last_result since the noop, if
-	       sent, went to a different server */
-	    prot_printf(imapd_out, "%s %s", tag, s->last_result);
 	}
 
 	return;
@@ -2855,6 +2926,9 @@
 	if (backend_current && backend_current != backend_next) {
 	    char mytag[128];
 
+	    /* remove backend_current from the protgroup */
+	    protgroup_delete(protin, backend_current->in);
+
 	    /* switching servers; flush old server output */
 	    proxy_gentag(mytag, sizeof(mytag));
 	    prot_printf(backend_current->out, "%s Unselect\r\n", mytag);
@@ -2876,6 +2950,9 @@
 	    proc_register("imapd", imapd_clienthost, imapd_userid, mailboxname);
 	    syslog(LOG_DEBUG, "open: user %s opened %s on %s",
 		   imapd_userid, name, newserver);
+
+	    /* add backend_current to the protgroup */
+	    protgroup_insert(protin, backend_current->in);
 	    break;
 	default:
 	    syslog(LOG_DEBUG, "open: user %s failed to open %s", imapd_userid,
@@ -2892,6 +2969,9 @@
     if (backend_current) {
       char mytag[128];
 
+      /* remove backend_current from the protgroup */
+      protgroup_delete(protin, backend_current->in);
+
       /* switching servers; flush old server output */
       proxy_gentag(mytag, sizeof(mytag));
       prot_printf(backend_current->out, "%s Unselect\r\n", mytag);
@@ -2982,6 +3062,9 @@
 	 * saying NO is clearly wrong, hense the fatal request. */
 	pipe_including_tag(backend_current, tag, 0);
 	backend_current = NULL;
+
+	/* remove backend_current from the protgroup */
+	protgroup_delete(protin, backend_current->in);
 	return;
     }
 
@@ -3017,6 +3100,9 @@
 	 * saying NO is clearly wrong, hense the fatal request. */
 	pipe_including_tag(backend_current, tag, 0);
 	backend_current = NULL;
+
+	/* remove backend_current from the protgroup */
+	protgroup_delete(protin, backend_current->in);
 	return;
     }
 
@@ -3087,9 +3173,7 @@
     if (backend_current) {
 	/* remote mailbox */
 	prot_printf(backend_current->out, "%s %s %s ", tag, cmd, sequence);
-	if (!pipe_command(backend_current, 65536)) {
-	    pipe_including_tag(backend_current, tag, 0);
-	}
+	pipe_command(backend_current, 65536);
 	return;
     }
 
@@ -3477,7 +3561,6 @@
 	/* remote mailbox */
 	prot_printf(backend_current->out, "%s Partial %s %s %s %s\r\n",
 		    tag, msgno, data, start, count);
-	pipe_including_tag(backend_current, tag, 0);
 	return;
     }
 
@@ -3605,9 +3688,7 @@
 	/* remote mailbox */
 	prot_printf(backend_current->out, "%s %s %s %s ",
 		    tag, cmd, sequence, operation);
-	if (!pipe_command(backend_current, 65536)) {
-	    pipe_including_tag(backend_current, tag, 0);
-	}
+	pipe_command(backend_current, 65536);
 	return;
     }
 
@@ -3746,9 +3827,7 @@
 	const char *cmd = usinguid ? "UID Search" : "Search";
 
 	prot_printf(backend_current->out, "%s %s ", tag, cmd);
-	if (!pipe_command(backend_current, 65536)) {
-	    pipe_including_tag(backend_current, tag, 0);
-	}
+	pipe_command(backend_current, 65536);
 	return;
     }
 
@@ -3806,9 +3885,7 @@
 	char *cmd = usinguid ? "UID Sort" : "Sort";
 
 	prot_printf(backend_current->out, "%s %s ", tag, cmd);
-	if (!pipe_command(backend_current, 65536)) {
-	    pipe_including_tag(backend_current, tag, 0);
-	}
+	pipe_command(backend_current, 65536);
 	return;
     }
 
@@ -3900,9 +3977,7 @@
 	const char *cmd = usinguid ? "UID Thread" : "Thread";
 
 	prot_printf(backend_current->out, "%s %s ", tag, cmd);
-	if (!pipe_command(backend_current, 65536)) {
-	    pipe_including_tag(backend_current, tag, 0);
-	}
+	pipe_command(backend_current, 65536);
 	return;
     }
 
@@ -4017,7 +4092,6 @@
 	prot_printf(backend_current->out, "%s %s %s {%d+}\r\n%s\r\n",
 		    tag, usinguid ? "UID Copy" : "Copy",
 		    sequence, strlen(name), name);
-	pipe_including_tag(backend_current, tag, 0);
 
 	return;
     }
@@ -4134,7 +4208,6 @@
 	} else {
 	    prot_printf(backend_current->out, "%s Expunge\r\n", tag);
 	}
-	pipe_including_tag(backend_current, tag, 0);
 	return;
     }
 
@@ -5158,7 +5231,8 @@
 			    tag, cmd, 
 			    strlen(name), name);
 	    }
-	    pipe_until_tag(backend_inbox, tag, 0);
+	    if (!backend_current || backend_inbox != backend_current)
+		pipe_until_tag(backend_inbox, tag, 0);
 	}
 
 	imapd_check(backend_inbox, 0, 0);
Index: lib/prot.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/lib/prot.c,v
retrieving revision 1.82.2.4
diff -u -r1.82.2.4 prot.c
--- lib/prot.c	1 Mar 2004 14:30:21 -0000	1.82.2.4
+++ lib/prot.c	6 Aug 2004 16:31:32 -0000
@@ -1004,6 +1004,7 @@
 	time_t this_timeout = 0;   /* this stream */
 	
 	s = readstreams->group[i];
+	if (!s) continue;
 
 	assert(!s->write);
 
@@ -1105,6 +1106,7 @@
 	
 	for(i = 0; i<readstreams->next_element; i++) {
 	    s = readstreams->group[i];
+	    if (!s) continue;
 
 	    if(FD_ISSET(s->fd, &rfds)) {
 		found_fds++;
@@ -1198,16 +1200,41 @@
 
 void protgroup_insert(struct protgroup *group, struct protstream *item) 
 {
+    int i, empty;
+
     assert(group);
     assert(item);
-    /* Double size of the protgroup if we're at our limit */
-    if(group->next_element == group->nalloced) {
+
+    /* See if we already have this protstream */
+    for (i = 0, empty = group->next_element; i < group->next_element; i++) {
+	if (!group->group[i]) empty = i;
+	else if (group->group[i] == item) return;
+    }
+    /* Double size of the protgroup if we're at our limit */ 
+    if (empty == group->next_element &&
+	group->next_element++ == group->nalloced) {
 	group->nalloced *= 2;
 	group->group = xrealloc(group->group,
 				group->nalloced * sizeof(struct protstream *));
     }
-    /* Insert the item on the end of the group */
-    group->group[group->next_element++] = item;
+    /* Insert the item at the empty location */
+    group->group[empty] = item;
+}
+
+void protgroup_delete(struct protgroup *group, struct protstream *item) 
+{
+    int i;
+
+    assert(group);
+    assert(item);
+
+    /* find the protstream */
+    for (i = 0; i < group->next_element; i++) {
+	if (group->group[i] == item) {
+	    group->group[i] = NULL;
+	    return;
+	}
+    }
 }
 
 struct protstream *protgroup_getelement(struct protgroup *group,
Index: lib/prot.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/lib/prot.h,v
retrieving revision 1.40.2.2
diff -u -r1.40.2.2 prot.h
--- lib/prot.h	24 Jun 2004 15:16:30 -0000	1.40.2.2
+++ lib/prot.h	6 Aug 2004 16:31:32 -0000
@@ -236,6 +236,9 @@
 /* Insert an element into a protgroup */
 void protgroup_insert(struct protgroup *group, struct protstream *item);
 
+/* Delete an element from a protgroup */
+void protgroup_delete(struct protgroup *group, struct protstream *item);
+
 /* Returns the protstream at that position in the protgroup, or NULL if
  * an invalid element is requested */
 struct protstream *protgroup_getelement(struct protgroup *group,
