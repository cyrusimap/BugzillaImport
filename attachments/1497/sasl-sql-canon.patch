diff -uNr cyrus-sasl-2.1.25/doc/options.html cyrus-sasl-2.1.25-sqlcanon/doc/options.html
--- cyrus-sasl-2.1.25/doc/options.html	2009-12-03 20:07:01.000000000 +0100
+++ cyrus-sasl-2.1.25-sqlcanon/doc/options.html	2012-07-16 12:58:11.497357552 +0200
@@ -174,22 +174,51 @@
 <TD><i>none</i> (engine dependent)</TD>
 </TR>
 <TR>
+<TD>sql_auxprop_select</TD><TD>SQL plugin</TD>
+<TD>SELECT statement to use for fetching properties.  This option is
+<b>required</b> in order to use the SQL auxprop plugin.</TD>
+<TD><i>none</i></TD>
+</TR>
+<TR>
 <TD>sql_select</TD><TD>SQL plugin</TD>
+<TD>SELECT statement to use for fetching properties. <b>Deprecated</b> alias for sql_auxprop_select. This option is
+<b>required</b> in order to use the SQL auxprop plugin.</TD>
+<TD><i>none</i></TD>
+</TR>
+<TR>
+<TD>sql_statement</TD><TD>SQL plugin</TD>
+<TD>SELECT statement to use for fetching properties. <b>Deprecated</b> alias for sql_auxprop_select. This option is
+<b>required</b> in order to use the SQL auxprop plugin.</TD>
+<TD><i>none</i></TD>
+</TR>
+<TR>
+<TD>sql_canon_select</TD><TD>SQL plugin</TD>
 <TD>SELECT statement to use for fetching properties.  This option is
-<b>required</b> in order to use the SQL plugin.</TD>
+<b>required</b> in order to use the SQL canon plugin.</TD>
 <TD><i>none</i></TD>
 </TR>
 <TR>
-<TD>sql_insert</TD><TD>SQL plugin</TD>
+<TD>sql_auxprop_insert</TD><TD>SQL plugin</TD>
 <TD>INSERT statement to use for creating properties for new users.</TD>
 <TD><i>none</i></TD>
 </TR>
 <TR>
-<TD>sql_update</TD><TD>SQL plugin</TD>
+<TD>sql_insert</TD><TD>SQL plugin</TD>
+<TD>INSERT statement to use for creating properties for new users. <b>Deprecated</b> alias for sql_auxprop_insert.</TD>
+<TD><i>none</i></TD>
+</TR>
+<TR>
+<TD>sql_auxprop_update</TD><TD>SQL plugin</TD>
 <TD>UPDATE statement to use for modifying properties.</TD>
 <TD><i>none</i></TD>
 </TR>
 <TR>
+<TR>
+<TD>sql_update</TD><TD>SQL plugin</TD>
+<TD>UPDATE statement to use for modifying properties. <b>Deprecated</b> alias for sql_auxprop_update</TD>
+<TD><i>none</i></TD>
+</TR>
+<TR>
 <TD>sql_usessl</TD><TD>SQL plugin</TD>
 <TD>When set to 'yes', 'on', '1' or 'true', a secure connection will
 be made to the SQL server.</TD>
@@ -209,15 +238,15 @@
 
 <h2>Notes on SQL auxprop options</h2>
 
-<p>The <tt>sql_insert</tt> and <tt>sql_update</tt> options are
+<p>The <tt>sql_auxprop_insert</tt> and <tt>sql_auxprop_update</tt> options are
 optional and are only needed if you wish to allow the SASL library
 (e.g., saslpasswd2) and plugins (e.g., OTP) to write properties to the
 SQL server.  If used, both statements MUST be provided so that
 properties can be added, changed and deleted.
 <font color=red>NOTE: The columns for writable properites MUST accept NULL values.</font>
 
-<p>The SQL statements provided in the <tt>sql_select</tt>,
-<tt>sql_insert</tt> and <tt>sql_update</tt> options can contain
+<p>The SQL statements provided in the <tt>sql_auxprop_select</tt>,
+<tt>sql_auxprop_insert</tt> and <tt>sql_auxprop_update</tt> options can contain
 arguments which will be substituted with the appropriate values.  The
 valid arguments are:
 
@@ -247,7 +276,7 @@
 <h3>Examples:</h3>
 
 <pre>
-     <tt>sql_select: SELECT %p FROM user_table WHERE username = '%u' and realm = '%r'</tt>
+     <tt>sql_auxprop_select: SELECT %p FROM user_table WHERE username = '%u' and realm = '%r'</tt>
 </pre>
 
      would send the following statement to SQL for user "bovik" and
@@ -261,7 +290,7 @@
 </pre>
 
 <pre>
-     <tt>sql_insert: INSERT INTO user_table (username, realm, %p) VALUES ('%u', '%r', '%v')</tt>
+     <tt>sql_auxprop_insert: INSERT INTO user_table (username, realm, %p) VALUES ('%u', '%r', '%v')</tt>
 
 </pre>
 
@@ -281,6 +310,17 @@
 </pre>
 is a valid value for <tt>sql_select</tt>.
 
+<h2>Notes on SQL canon user plugin options</h2>
+<p>This plugin shares all configuration with SQL auxprop plugin. Therefore 
+you have to give options like sql_hostnames and sql_user only once.
+</p>
+<p>All above examples for sql_auxprop_select are valid for sql_canon_select, too.
+</p>
+<p>NOTE: This plugin tests for recursion 5 iterations. 
+(e.g. test@test.local->joe@test.local->doe@test.local->test@test.local->joe@test.local)
+After that it stops the recursion at the current element and issues a warning.
+</p>
+
 <h2>Notes on LDAPDB plugin options</h2>
 
 <p>
diff -uNr cyrus-sasl-2.1.25/plugins/makeinit.sh cyrus-sasl-2.1.25-sqlcanon/plugins/makeinit.sh
--- cyrus-sasl-2.1.25/plugins/makeinit.sh	2011-05-11 21:25:55.000000000 +0200
+++ cyrus-sasl-2.1.25-sqlcanon/plugins/makeinit.sh	2012-07-16 12:58:11.497357552 +0200
@@ -89,5 +89,7 @@
 " > ${auxprop}_init.c
 done
 
-# ldapdb is also a canon_user plugin
+# ldapdb and sql are also canon_user plugins
 echo "SASL_CANONUSER_PLUG_INIT( ldapdb )" >> ldapdb_init.c
+echo "SASL_CANONUSER_PLUG_INIT( sql )" >> sql_init.c
+
diff -uNr cyrus-sasl-2.1.25/plugins/sql.c cyrus-sasl-2.1.25-sqlcanon/plugins/sql.c
--- cyrus-sasl-2.1.25/plugins/sql.c	2009-12-03 20:07:02.000000000 +0100
+++ cyrus-sasl-2.1.25-sqlcanon/plugins/sql.c	2012-07-16 12:58:21.361364383 +0200
@@ -1,8 +1,9 @@
 /*
 **
-** SQL Auxprop plugin
+** SQL Auxprop and Canon plugin
 **
-** Ken Murchison
+** Lars Duesing -- canon plugin
+** Ken Murchison -- original auxprop plugin
 ** Maya Nigrosh -- original store() and txn support
 ** Simon Loader -- original mysql plugin
 ** Patrick Welche -- original pgsql plugin
@@ -50,9 +51,10 @@
     const char *sql_passwd;
     const char *sql_hostnames;
     const char *sql_database;
-    const char *sql_select;
-    const char *sql_insert;
-    const char *sql_update;
+    const char *sql_auxprop_select;
+    const char *sql_canon_select;
+    const char *sql_auxprop_insert;
+    const char *sql_auxprop_update;
     int sql_usessl;
 } sql_settings_t;
 
@@ -799,27 +801,64 @@
 	settings->sql_database = SQL_BLANK_STRING;
     }
 
-    r = utils->getopt(utils->getopt_context,"SQL", "sql_select",
-		      &settings->sql_select, NULL);
-    if (r || !settings->sql_select ) {
+    r = utils->getopt(utils->getopt_context,"SQL", "sql_auxprop_select",
+		      &settings->sql_auxprop_select, NULL);
+    if (r || !settings->sql_auxprop_select ) {
 	/* backwards compatibility */
+	r = utils->getopt(utils->getopt_context,"SQL", "sql_select",
+			  &settings->sql_auxprop_select, NULL);
+	if (r || !settings->sql_auxprop_select) {
 	r = utils->getopt(utils->getopt_context,"SQL", "sql_statement",
-			  &settings->sql_select, NULL);
-	if (r || !settings->sql_select) {
-	    settings->sql_select = SQL_BLANK_STRING;
-	}
-    }
-
+			  &settings->sql_auxprop_select, NULL);
+	    if (r || !settings->sql_auxprop_select) {
+	        settings->sql_auxprop_select = SQL_BLANK_STRING;
+	    } else
+            {
+                utils->log(NULL, SASL_LOG_WARN,
+		   "sql plugin: Option sql_statement is deprecated, use sql_auxprop_select instead!");
+            }
+        }
+        else
+        {
+            utils->log(NULL, SASL_LOG_WARN,
+        	   "sql plugin: Option sql_select is deprecated, use sql_auxprop_select instead!");
+	}
+            
+    }
+
+    r = utils->getopt(utils->getopt_context, "SQL", "sql_canon_select",
+		      &settings->sql_canon_select, NULL);
+    if (r || !settings->sql_canon_select) {
+	settings->sql_canon_select = SQL_BLANK_STRING;
+    }
+
+    r = utils->getopt(utils->getopt_context, "SQL", "sql_auxprop_insert",
+		      &settings->sql_auxprop_insert, NULL);
+    if (r || !settings->sql_auxprop_insert) {
     r = utils->getopt(utils->getopt_context, "SQL", "sql_insert",
-		      &settings->sql_insert, NULL);
-    if (r || !settings->sql_insert) {
-	settings->sql_insert = SQL_BLANK_STRING;
+		      &settings->sql_auxprop_insert, NULL);
+        if (r || !settings->sql_auxprop_insert) {
+	    settings->sql_auxprop_insert = SQL_BLANK_STRING;
+	} else
+        {
+            utils->log(NULL, SASL_LOG_WARN,
+		   "sql plugin: Option sql_insert is deprecated, use sql_auxprop_insert instead!");
+        }
+
     }
 
+    r = utils->getopt(utils->getopt_context, "SQL", "sql_auxprop_update",
+		      &settings->sql_auxprop_update, NULL);
+    if (r || !settings->sql_auxprop_update) {
     r = utils->getopt(utils->getopt_context, "SQL", "sql_update",
-		      &settings->sql_update, NULL);
-    if (r || !settings->sql_update) {
-	settings->sql_update = SQL_BLANK_STRING;
+		      &settings->sql_auxprop_update, NULL);
+        if (r || !settings->sql_auxprop_update) {
+	    settings->sql_auxprop_update = SQL_BLANK_STRING;
+        } else
+        {
+            utils->log(NULL, SASL_LOG_WARN,
+		   "sql plugin: Option sql_update is deprecated, use sql_auxprop_update instead!");
+        }
     }
 
     r = utils->getopt(utils->getopt_context, "SQL", "sql_usessl",
@@ -918,7 +957,7 @@
     settings = (sql_settings_t *) glob_context;
     
     sparams->utils->log(NULL, SASL_LOG_DEBUG,
-			"sql plugin Parse the username %s\n", user);
+			"sql_auxprop plugin Parse the username %s\n", user);
     
     user_buf = sparams->utils->malloc(ulen + 1);
     if (!user_buf) {
@@ -967,7 +1006,7 @@
     conn = sql_connect(settings, sparams->utils);
     if (!conn) {
 	sparams->utils->log(NULL, SASL_LOG_ERR,
-			    "sql plugin couldn't connect to any host\n");
+			    "sql_auxprop plugin couldn't connect to any host\n");
 	/* TODO: in the future we might want to extend the internal
 	   SQL driver API to return a more detailed error */
 	ret = SASL_FAIL;
@@ -1022,11 +1061,11 @@
 	}
     
 	sparams->utils->log(NULL, SASL_LOG_DEBUG,
-			    "sql plugin create statement from %s %s %s\n",
+			    "sql_auxprop plugin create statement from %s %s %s\n",
 			    realname, escap_userid, escap_realm);
 	
 	/* create a statement that we will use */
-	query = sql_create_statement(settings->sql_select,
+	query = sql_create_statement(settings->sql_auxprop_select,
 				     realname,escap_userid,
 				     escap_realm, NULL,
 				     sparams->utils);
@@ -1036,7 +1075,7 @@
 	}
 	
 	sparams->utils->log(NULL, SASL_LOG_DEBUG,
-			    "sql plugin doing query %s\n", query);
+			    "sql_auxprop plugin doing query %s\n", query);
 	
 	value[0] = '\0';
 	value_len = 0;
@@ -1073,13 +1112,13 @@
 	    }
 
 	    sparams->utils->log(NULL, SASL_LOG_DEBUG,
-				"sql plugin create statement from %s %s %s\n",
+				"sql_auxprop plugin create statement from %s %s %s\n",
 				SASL_AUX_PASSWORD_PROP,
 				escap_userid,
 				escap_realm);
     	
 	    /* create a statement that we will use */
-	    query = sql_create_statement(settings->sql_select,
+	    query = sql_create_statement(settings->sql_auxprop_select,
 					 SASL_AUX_PASSWORD_PROP,
 					 escap_userid,
 					 escap_realm,
@@ -1089,7 +1128,7 @@
 		ret = SASL_NOMEM;
 	    } else {
 		sparams->utils->log(NULL, SASL_LOG_DEBUG,
-				    "sql plugin doing query %s\n", query);
+				    "sql_auxprop plugin doing query %s\n", query);
         	
 		value[0] = '\0';
 		value_len = 0;
@@ -1154,8 +1193,8 @@
 
     /* just checking if we are enabled */
     if (!ctx &&
-	sql_exists(settings->sql_insert) &&
-	sql_exists(settings->sql_update)) return SASL_OK;
+	sql_exists(settings->sql_auxprop_insert) &&
+	sql_exists(settings->sql_auxprop_update)) return SASL_OK;
     
     /* make sure our input is okay */
     if (!glob_context || !sparams || !user) return SASL_BADPARAM;
@@ -1223,17 +1262,17 @@
 
 	/* determine which command we need */
 	/* see if we already have a row for this user */
-	statement = sql_create_statement(settings->sql_select,
+	statement = sql_create_statement(settings->sql_auxprop_select,
 					 SQL_WILDCARD, escap_userid,
 					 escap_realm, NULL,
 					 sparams->utils);
 	if (!settings->sql_engine->sql_exec(conn, statement, NULL, 0, NULL,
 					    sparams->utils)) {
 	    /* already have a row => UPDATE */
-	    cmd = settings->sql_update;
+	    cmd = settings->sql_auxprop_update;
 	} else {
 	    /* new row => INSERT */
-	    cmd = settings->sql_insert;
+	    cmd = settings->sql_auxprop_insert;
 	}
 	sparams->utils->free(statement);
 
@@ -1292,7 +1331,6 @@
     /* do a little dance */
 }
 
-
 static void sql_auxprop_free(void *glob_context, const sasl_utils_t *utils)
 {
     sql_settings_t *settings;
@@ -1306,6 +1344,219 @@
     utils->free(settings);
 }
 
+
+static int
+sql_canon_server (void *glob_context,
+			       sasl_server_params_t * sparams,
+			       const char *user, unsigned ulen,
+			       unsigned flags __attribute__((unused)),
+			       char *out_user,
+			       unsigned out_umax, unsigned *out_ulen)
+{
+  sparams->utils->seterror (sparams->utils->conn, 0, "sql_canon_server");
+
+  char *userid = NULL;
+  /* realm could be used for something clever */
+  char *realm = NULL;
+  const char *user_realm = NULL;
+  char value[8192];
+  size_t value_len;
+  char old_value[8192];
+  size_t old_value_len;
+  char *query = NULL;
+  char *escap_userid = NULL;
+  char *escap_realm = NULL;
+  sql_settings_t *settings;
+  void *conn = NULL;
+  unsigned i;
+  char *in_buf, *userin;
+  const char *begin_u;
+  size_t u_apprealm = 0;
+
+  if (!glob_context || !sparams->utils || !user)
+    return SASL_BADPARAM;
+
+    sparams->utils->log(NULL, SASL_LOG_DEBUG,
+                        "sql_canon_server Parse the username %s\n", user);
+
+
+  in_buf = sparams->utils->malloc ((ulen + 2) * sizeof (char));
+  if (!in_buf)
+    return SASL_NOMEM;
+
+  userin = in_buf;
+
+  memcpy (userin, user, ulen);
+  userin[ulen] = '\0';
+
+
+  for (i = 0; isspace ((int) userin[i]) && i < ulen; i++);
+  begin_u = &(userin[i]);
+  if (i > 0)
+    ulen -= i;
+
+  for (; ulen > 0 && isspace ((int) begin_u[ulen - 1]); ulen--);
+  if (begin_u == &(userin[ulen]))
+    {
+      sparams->utils->free (in_buf);
+      sparams->utils->seterror (sparams->utils->conn, 0,
+				"All-whitespace username.");
+      return SASL_FAIL;
+    }
+
+  /* Need to append realm if necessary (see sasl.h) */
+  if (sparams->user_realm)
+    {
+      user_realm = sparams->user_realm;
+    }
+  else
+    {
+      user_realm = sparams->serverFQDN;
+    }
+
+  if (!strchr (user, '@'))
+    {
+      u_apprealm = strlen (user_realm) + 1;
+    }
+
+  /* setup the settings */
+  settings = (sql_settings_t *) glob_context;
+
+  /* just need to escape userid and realm now */
+  /* allocate some memory */
+  escap_userid = (char *) sparams->utils->malloc (255);
+  escap_realm = (char *) sparams->utils->malloc (255);
+
+  if (!escap_userid || !escap_realm)
+    {
+      sparams->utils->log (NULL, SASL_LOG_DEBUG,
+			   "sql_canon_server: memerror \n");
+      MEMERROR (sparams->utils);
+      goto done;
+    }
+
+  conn = sql_connect (settings, sparams->utils);
+  if (!conn)
+    {
+      sparams->utils->log (NULL, SASL_LOG_ERR,
+			   "sql_canon_server couldn't connect to any host\n");
+      goto done;
+    }
+
+  /* escape out */
+  settings->sql_engine->sql_escape_str (escap_userid, userin);
+  settings->sql_engine->sql_escape_str (escap_realm, user_realm);
+
+  /* create a statement that we will use */
+  sparams->utils->log(NULL, SASL_LOG_DEBUG,
+                            "sql_canon plugin create statement from %s %s\n",
+                            escap_userid, escap_realm);
+
+  query = sql_create_statement (settings->sql_canon_select,
+				escap_userid, escap_userid,
+				escap_realm, NULL, sparams->utils);
+  memcpy(old_value,userin, strlen (userin));
+  old_value_len = strlen (userin);
+  /* run the query */
+  sparams->utils->log(NULL, SASL_LOG_DEBUG,
+                            "sql_canon plugin doing query %s\n", query);
+  int recursion_count=0;
+  while (!settings->sql_engine->sql_exec (conn, query, value, sizeof (value),
+				       &value_len, sparams->utils) && (recursion_count < 5))
+    {
+	recursion_count++;
+	if (strcmp(value, old_value) == 0) 
+	{
+        	sparams->utils->log(NULL, SASL_LOG_WARN,
+                   "sql_canon plugin: found direct recursive query for %s %s at %s", userin, user_realm, value);
+		recursion_count=255;
+	}
+
+        memcpy(old_value,value,value_len);
+        old_value_len=value_len;
+        settings->sql_engine->sql_escape_str (escap_userid, value);
+        settings->sql_engine->sql_escape_str (escap_realm, user_realm);
+        sparams->utils->log(NULL, SASL_LOG_DEBUG,
+                            "sql_canon plugin create statement from %s %s\n",
+                            escap_userid, escap_realm);
+
+  /* create a statement that we will use */
+        query = sql_create_statement (settings->sql_canon_select,
+				escap_userid, escap_userid,
+				escap_realm, NULL, sparams->utils);
+       sparams->utils->log(NULL, SASL_LOG_DEBUG,
+                            "sql_canon plugin doing query %s\n", query);
+
+	}
+	if (recursion_count>5)
+        {
+		sparams->utils->log(NULL, SASL_LOG_WARN,
+                  "sql_canon plugin: found recursive query for %s %s at %s", userin, user_realm, value);
+	}
+
+      if (old_value_len < out_umax)
+	{
+	  memcpy (out_user, old_value, old_value_len);
+	  out_user[old_value_len] = '\0';
+	  *out_ulen = old_value_len; 
+    }
+      else
+	{
+	  MEMERROR (sparams->utils);
+	  goto done;
+    }
+  sparams->utils->free (query);
+
+done:
+  if (escap_userid)
+    sparams->utils->free (escap_userid);
+  if (escap_realm)
+    sparams->utils->free (escap_realm);
+  if (conn)
+    settings->sql_engine->sql_close (conn);
+  if (userid)
+    sparams->utils->free (userid);
+  if (realm)
+    sparams->utils->free (realm);
+  return SASL_OK;
+}
+
+static int
+sql_canon_client(void *glob_context __attribute__((unused)),
+		    sasl_client_params_t *cparams,
+		    const char *user,
+		    unsigned ulen,
+		    unsigned flags __attribute__((unused)),
+		    char *out,
+		    unsigned out_max,
+		    unsigned *out_ulen){
+    if(!cparams || !user) return SASL_BADPARAM;
+
+    /* Trim whitespace */
+    while(isspace(*(unsigned char *)user)) {
+	user++;
+	ulen--;
+    }
+    while(isspace((unsigned char)user[ulen-1])) {
+    	ulen--;
+    }
+
+    if (!ulen) {
+    	cparams->utils->seterror(cparams->utils->conn, 0,
+	    "All-whitespace username.");
+	return SASL_FAIL;
+    }
+    if (ulen>out_max) return SASL_BUFOVER;
+    memcpy(out, user, ulen);
+    out[ulen] = '\0';
+    *out_ulen = ulen;
+    return SASL_OK;
+}
+
+
+
+
+
 static sasl_auxprop_plug_t sql_auxprop_plugin = {
     0,			/* Features */
     0,			/* spare */
@@ -1343,17 +1594,82 @@
     
     if (!settings->sql_engine->name) return SASL_NOMECH;
 
-    if (!sql_exists(settings->sql_select)) {
-	utils->log(NULL, SASL_LOG_ERR, "sql_select option missing");
+    if (!sql_exists(settings->sql_auxprop_select)) {
+	utils->log(NULL, SASL_LOG_ERR, "sql_auxprop_select option missing");
 	utils->free(settings);	
 	return SASL_NOMECH;
     }
 
     utils->log(NULL, SASL_LOG_DEBUG,
-	       "sql auxprop plugin using %s engine\n",
-	       settings->sql_engine->name);
+	      "sql_auxprop_plugin using %s engine with select: %s\n",
+	      settings->sql_engine->name, settings->sql_auxprop_select);
     
     sql_auxprop_plugin.glob_context = settings;
     
     return SASL_OK;
 }
+static sasl_canonuser_plug_t sql_canonuser_plugin = {
+	0,	/* features */
+	0,	/* spare */
+	NULL,	/* glob_context */
+	"sql",	/* name */
+	sql_auxprop_free,	/* canon_user_free */
+	sql_canon_server,	/* canon_user_server */
+	sql_canon_client,	/* canon_user_client */
+	NULL,
+	NULL,
+	NULL
+};
+
+int
+sql_canonuser_plug_init (const sasl_utils_t * utils
+				  __attribute__ ((unused)), int max_version,
+				  int *out_version,
+				  sasl_canonuser_plug_t ** plug,
+				  const char *plugname
+				  __attribute__ ((unused)))
+{
+  sql_settings_t *settings;
+
+  if (!out_version || !plug)
+    return SASL_BADPARAM;
+
+  if (max_version < SASL_CANONUSER_PLUG_VERSION)
+    return SASL_BADVERS;
+
+  *out_version = SASL_CANONUSER_PLUG_VERSION;
+
+  settings = (sql_settings_t *) utils->malloc (sizeof (sql_settings_t));
+
+  if (!settings)
+    {
+      MEMERROR (utils);
+      return SASL_NOMEM;
+    }
+
+  memset (settings, 0, sizeof (sql_settings_t));
+  sql_get_settings (utils, settings);
+
+  if (!settings->sql_engine->name)
+    return SASL_NOMECH;
+
+  if (!sql_exists (settings->sql_canon_select))
+    {
+      utils->log (NULL, SASL_LOG_ERR,
+		  "sql_canon_plugin: sql_canon_select option missing");
+      utils->free (settings);
+      return SASL_NOMECH;
+    }
+
+  utils->log (NULL, SASL_LOG_DEBUG,
+	      "sql_canon_plugin using %s engine with select: %s\n",
+	      settings->sql_engine->name, settings->sql_canon_select);
+
+  sql_canonuser_plugin.glob_context = settings;
+
+
+
+  *plug = &sql_canonuser_plugin;
+
+  return SASL_OK;
+}
