Index: imap/proxyd.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/proxyd.c,v
retrieving revision 1.178
diff -c -r1.178 proxyd.c
*** imap/proxyd.c	9 Mar 2004 18:08:41 -0000	1.178
--- imap/proxyd.c	15 Mar 2004 16:02:40 -0000
***************
*** 137,142 ****
--- 137,143 ----
  /* per-user session state */
  struct protstream *proxyd_out = NULL;
  struct protstream *proxyd_in = NULL;
+ struct protgroup *protin = NULL;
  static char proxyd_clienthost[NI_MAXHOST*2+1] = "[local]";
  static int proxyd_logfd = -1;
  time_t proxyd_logtime;
***************
*** 877,882 ****
--- 878,885 ----
  	return;
      }
  
+     protgroup_delete(protin, s->in);
+ 
      /* need to logout of server */
      backend_disconnect(s, &protocol[PROTOCOL_IMAP]);
  
***************
*** 939,944 ****
--- 942,949 ----
  	/* add the timeout */
  	ret->timeout = prot_addwaitevent(proxyd_in, time(NULL) + IDLE_TIMEOUT,
  					 backend_timeout, ret);
+ 
+ 	protgroup_insert(protin, ret->in);
      }
  
      ret->timeout->mark = time(NULL) + IDLE_TIMEOUT;
***************
*** 1110,1115 ****
--- 1115,1123 ----
      
      proxyd_in = proxyd_out = NULL;
  
+     if (protin) protgroup_free(protin);
+     protin = NULL;
+ 
  #ifdef HAVE_SSL
      if (tls_conn) {
  	if (tls_reset_servertls(&tls_conn) == -1) {
***************
*** 1333,1338 ****
--- 1341,1348 ----
  	prot_free(proxyd_out);
      }
  
+     if (protin) protgroup_free(protin);
+ 
  #ifdef HAVE_SSL
      tls_shutdown_serverengine();
  #endif
***************
*** 1387,1393 ****
--- 1397,1410 ----
  	close(fd);
      }
  
+     protin = protgroup_new(2); /* XXX should we start with more? */
+     protgroup_insert(protin, proxyd_in);
+ 
      for (;;) {
+ 	struct protgroup *protout = NULL;
+ 	struct timeval timeout;
+ 	int n, clientin;
+ 
  	if (! proxyd_userisadmin && shutdown_file(shut, sizeof(shut))) {
  	    for (p = shut; *p == '['; p++); /* can't have [ be first char */
  	    prot_printf(proxyd_out, "* BYE [ALERT] %s\r\n", p);
***************
*** 1396,1401 ****
--- 1413,1470 ----
  
  	signals_poll();
  
+ 	/* flush any buffered output */
+ 	n = 0;
+ 	while (backend_cached[n]) {
+ 	    if (backend_cached[n]->out) prot_flush(backend_cached[n]->out);
+ 	    n++;
+ 	}
+ 	prot_flush(proxyd_out);
+ 
+ 	timeout.tv_sec = 60;
+ 	timeout.tv_usec = 0;
+ 
+ 	n = prot_select(protin, PROT_NO_FD, &protout, NULL, &timeout);
+ 	if (n == -1) {
+ 	    syslog(LOG_ERR, "prot_select() failed in cmdloop(): %m");
+ 	    fatal("prot_select() failed in cmdloop()", EC_TEMPFAIL);
+ 	}
+ 
+ 	clientin = 0;
+ 	if (n && protout) {
+ 	    struct protstream *ptmp;
+ 
+ 	    /* see who has input */
+ 	    for (; n; n--) {
+ 		ptmp = protgroup_getelement(protout, n-1);
+ 
+ 		if (ptmp == proxyd_in) {
+ 		    /* input from client, process it later */
+ 		    clientin = 1;
+ 		} else {
+ 		    /* input from a backend, stream it to client */
+ 		    do {
+ 			char buf[4096];
+ 			int c = prot_read(ptmp, buf, sizeof(buf));
+ 			if (c == 0 || c < 0) break;
+ 			prot_write(proxyd_out, buf, c);
+ 		    } while (ptmp->cnt > 0);
+ 
+ 		    if (prot_error(ptmp)) {
+ 			/* uh oh, we're not happy */
+ 			fatal("Lost connection to backend", EC_UNAVAILABLE);
+ 		    }
+ 		}
+ 	    }
+ 	}
+ 	if (protout) protgroup_free(protout);
+ 	protout = NULL;
+ 
+ 	if (!clientin) {
+ 	    /* no input from client */
+ 	    continue;
+ 	}
+ 
  	/* Parse tag */
  	c = getword(proxyd_in, &tag);
  	if (c == EOF) {
***************
*** 1662,1670 ****
--- 1731,1751 ----
  		cmd_login(tag.s, arg1.s);
  	    }
  	    else if (!strcmp(cmd.s, "Logout")) {
+ 		char mytag[128];
+ 		int i = 0;
+ 
  		if (c == '\r') c = prot_getc(proxyd_in);
  		if (c != '\n') goto extraargs;
  		
+ 		/* force any responses from our backends */
+ 		while (backend_cached[i]) {
+ 		    proxyd_gentag(mytag, sizeof(mytag));
+ 
+ 		    prot_printf(backend_cached[i]->out, "%s Noop\r\n", mytag);
+ 		    pipe_until_tag(backend_cached[i], mytag, 0);
+ 		    i++;
+ 		}
+ 
  		prot_printf(proxyd_out, 
  			    "* BYE %s\r\n", error_message(IMAP_BYE_LOGOUT));
  		prot_printf(proxyd_out, "%s OK %s\r\n", 
***************
*** 2306,2312 ****
  {
      if (backend_current) {
  	prot_printf(backend_current->out, "%s %s\r\n", tag, cmd);
- 	pipe_including_tag(backend_current, tag, 0);
      } else {
  	prot_printf(proxyd_out, "%s OK %s\r\n", tag,
  		    error_message(IMAP_OK_COMPLETED));
--- 2387,2392 ----
***************
*** 2521,2528 ****
  {
      static int idle_period = -1;
      static struct buf arg;
!     struct protgroup *protin = protgroup_new(2);
!     struct protgroup *protout = NULL;
      struct timeval timeout;
      int c = EOF, n, done = 0, shutdown = 0;
      char buf[2048], shut[1024];
--- 2601,2608 ----
  {
      static int idle_period = -1;
      static struct buf arg;
!     struct protgroup *idlein = protgroup_new(2);
!     struct protgroup *idleout = NULL;
      struct timeval timeout;
      int c = EOF, n, done = 0, shutdown = 0;
      char buf[2048], shut[1024];
***************
*** 2540,2547 ****
      }
  
      /* Reset protin to all zeros (to preserve memory allocation) */
!     protgroup_reset(protin);
!     protgroup_insert(protin, proxyd_in);
  
      if (backend_current && CAPA(backend_current, CAPA_IDLE)) {
  	/* Start IDLE on backend */
--- 2620,2627 ----
      }
  
      /* Reset protin to all zeros (to preserve memory allocation) */
!     protgroup_reset(idlein);
!     protgroup_insert(idlein, proxyd_in);
  
      if (backend_current && CAPA(backend_current, CAPA_IDLE)) {
  	/* Start IDLE on backend */
***************
*** 2561,2567 ****
  	    goto done;
  	}
  
! 	protgroup_insert(protin, backend_current->in);
      }
  
      /* Tell client we are idling and waiting for end of command */
--- 2641,2647 ----
  	    goto done;
  	}
  
! 	protgroup_insert(idlein, backend_current->in);
      }
  
      /* Tell client we are idling and waiting for end of command */
***************
*** 2585,2607 ****
  	    prot_flush(proxyd_out);
  	}
  
! 	/* Clear protout if needed */
! 	protgroup_free(protout);
! 	protout = NULL;
  
  	timeout.tv_sec = idle_period;
  	timeout.tv_usec = 0;
  
! 	n = prot_select(protin, PROT_NO_FD, &protout, NULL, &timeout);
  	if (n == -1) {
  	    syslog(LOG_ERR, "prot_select() failed in cmd_idle(): %m");
  	    fatal("prot_select() failed in cmd_idle()", EC_TEMPFAIL);
  	}
! 	if (n && protout) {
  	    struct protstream *ptmp;
  
  	    for (; n; n--) {
! 		ptmp = protgroup_getelement(protout, n-1);
  		if (ptmp == proxyd_in) {
  		    /* The client sent us something, we're done */
  		    done = 1;
--- 2665,2687 ----
  	    prot_flush(proxyd_out);
  	}
  
! 	/* Clear idleout if needed */
! 	protgroup_free(idleout);
! 	idleout = NULL;
  
  	timeout.tv_sec = idle_period;
  	timeout.tv_usec = 0;
  
! 	n = prot_select(idlein, PROT_NO_FD, &idleout, NULL, &timeout);
  	if (n == -1) {
  	    syslog(LOG_ERR, "prot_select() failed in cmd_idle(): %m");
  	    fatal("prot_select() failed in cmd_idle()", EC_TEMPFAIL);
  	}
! 	if (n && idleout) {
  	    struct protstream *ptmp;
  
  	    for (; n; n--) {
! 		ptmp = protgroup_getelement(idleout, n-1);
  		if (ptmp == proxyd_in) {
  		    /* The client sent us something, we're done */
  		    done = 1;
***************
*** 2634,2641 ****
      c = getword(proxyd_in, &arg);
  
    done:
!     protgroup_free(protin);
!     protgroup_free(protout);
  
      if (done && backend_current && CAPA(backend_current, CAPA_IDLE)) {
  	/* Either the client timed out, or gave us a continuation,
--- 2714,2721 ----
      c = getword(proxyd_in, &arg);
  
    done:
!     protgroup_free(idlein);
!     protgroup_free(idleout);
  
      if (done && backend_current && CAPA(backend_current, CAPA_IDLE)) {
  	/* Either the client timed out, or gave us a continuation,
***************
*** 2749,2777 ****
  	if (!s) r = IMAP_SERVER_UNAVAILABLE;
      }
      if (!r) {
! 	prot_printf(s->out, "%s Append {%d+}\r\n%s ", tag, strlen(name), name);
! 	if (!pipe_command(s, 16384)) {
! 	    pipe_until_tag(s, tag, 0);
! 	}
!     } else {
! 	eatline(proxyd_in, prot_getc(proxyd_in));
!     }
! 
!     if (backend_current && backend_current != s) {
! 	char mytag[128];
  
! 	proxyd_gentag(mytag, sizeof(mytag));
  	
! 	prot_printf(backend_current->out, "%s Noop\r\n", mytag);
! 	pipe_until_tag(backend_current, mytag, 0);
!     }
  
!     if (r) {
! 	prot_printf(proxyd_out, "%s NO %s\r\n", tag, error_message(r));
      } else {
! 	/* we're allowed to reference last_result since the noop, if
! 	   sent, went to a different server */
! 	prot_printf(proxyd_out, "%s %s", tag, s->last_result);
      }
  }
  
--- 2829,2848 ----
  	if (!s) r = IMAP_SERVER_UNAVAILABLE;
      }
      if (!r) {
! 	if (backend_current && backend_current != s) {
! 	    char mytag[128];
  
! 	    proxyd_gentag(mytag, sizeof(mytag));
  	
! 	    prot_printf(backend_current->out, "%s Noop\r\n", mytag);
! 	    pipe_until_tag(backend_current, mytag, 0);
! 	}
  
! 	prot_printf(s->out, "%s Append {%d+}\r\n%s ", tag, strlen(name), name);
! 	pipe_command(s, 16384);
      } else {
! 	eatline(proxyd_in, prot_getc(proxyd_in));
! 	prot_printf(proxyd_out, "%s NO %s\r\n", tag, error_message(r));
      }
  }
  
***************
*** 2849,2855 ****
      prot_printf(backend_current->out, "%s Close\r\n", tag);
      /* xxx do we want this to say OK if the connection is gone?
       * saying NO is clearly wrong, hense the fatal request. */
-     pipe_including_tag(backend_current, tag, 0);
      backend_current = NULL;
  }
  
--- 2920,2925 ----
***************
*** 2864,2870 ****
      prot_printf(backend_current->out, "%s Unselect\r\n", tag);
      /* xxx do we want this to say OK if the connection is gone?
       * saying NO is clearly wrong, hense the fatal request. */
-     pipe_including_tag(backend_current, tag, 0);
      backend_current = NULL;
  }
  
--- 2934,2939 ----
***************
*** 2880,2888 ****
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s %s ", tag, cmd, sequence);
!     if (!pipe_command(backend_current, 65536)) {
! 	pipe_including_tag(backend_current, tag, 0);
!     }
  }
  
  /*
--- 2949,2955 ----
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s %s ", tag, cmd, sequence);
!     pipe_command(backend_current, 65536);
  }
  
  /*
***************
*** 2894,2900 ****
  
      prot_printf(backend_current->out, "%s Partial %s %s %s %s\r\n",
  		tag, msgno, data, start, count);
-     pipe_including_tag(backend_current, tag, 0);
  }
  
  /*
--- 2961,2966 ----
***************
*** 2910,2918 ****
  
      prot_printf(backend_current->out, "%s %s %s %s ",
  		tag, cmd, sequence, operation);
!     if (!pipe_command(backend_current, 65536)) {
! 	pipe_including_tag(backend_current, tag, 0);
!     }
  }
  
  void cmd_search(char *tag, int usinguid)
--- 2976,2982 ----
  
      prot_printf(backend_current->out, "%s %s %s %s ",
  		tag, cmd, sequence, operation);
!     pipe_command(backend_current, 65536);
  }
  
  void cmd_search(char *tag, int usinguid)
***************
*** 2922,2930 ****
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s ", tag, cmd);
!     if (!pipe_command(backend_current, 65536)) {
! 	pipe_including_tag(backend_current, tag, 0);
!     }
  }
  
  void cmd_sort(char *tag, int usinguid)
--- 2986,2992 ----
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s ", tag, cmd);
!     pipe_command(backend_current, 65536);
  }
  
  void cmd_sort(char *tag, int usinguid)
***************
*** 2934,2942 ****
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s ", tag, cmd);
!     if (!pipe_command(backend_current, 65536)) {
! 	pipe_including_tag(backend_current, tag, 0);
!     }
  }
  
  void cmd_thread(char *tag, int usinguid)
--- 2996,3002 ----
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s ", tag, cmd);
!     pipe_command(backend_current, 65536);
  }
  
  void cmd_thread(char *tag, int usinguid)
***************
*** 2946,2954 ****
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s ", tag, cmd);
!     if (!pipe_command(backend_current, 65536)) {
! 	pipe_including_tag(backend_current, tag, 0);
!     }
  }
  
  static int chomp(struct protstream *p, char *s)
--- 3006,3012 ----
      assert(backend_current != NULL);
  
      prot_printf(backend_current->out, "%s %s ", tag, cmd);
!     pipe_command(backend_current, 65536);
  }
  
  static int chomp(struct protstream *p, char *s)
***************
*** 3055,3061 ****
  	/* this is the easy case */
  	prot_printf(backend_current->out, "%s %s %s {%d+}\r\n%s\r\n",
  		    tag, cmd, sequence, strlen(name), name);
- 	pipe_including_tag(backend_current, tag, 0);
      } else {
  	char mytag[128];
  	struct d {
--- 3113,3118 ----
***************
*** 3389,3395 ****
      } else {
  	prot_printf(backend_current->out, "%s Expunge\r\n", tag);
      }
-     pipe_including_tag(backend_current, tag, 0);
  }    
  
  /*
--- 3446,3451 ----
***************
*** 3439,3446 ****
  	/* ok, send the create to that server */
  	prot_printf(s->out, "%s CREATE {%d+}\r\n%s\r\n", 
  		    tag, strlen(name), name);
- 	res = pipe_including_tag(s, tag, 0);
- 	tag = "*";		/* can't send another tagged response */
  	
  	if (!CAPA(s, CAPA_MUPDATE)) {
  	    /* do MUPDATE create operations */
--- 3495,3500 ----
***************
*** 3480,3487 ****
      if (!r) {
  	prot_printf(s->out, "%s DELETE {%d+}\r\n%s\r\n", 
  		    tag, strlen(name), name);
- 	res = pipe_including_tag(s, tag, 0);
- 	tag = "*";		/* can't send another tagged response */
  
  	if (!CAPA(s, CAPA_MUPDATE) && res == PROXY_OK) {
  	    /* do MUPDATE delete operations */
--- 3534,3539 ----
***************
*** 3811,3817 ****
  			tag, cmd, 
  			strlen(name), name);
  	}
- 	pipe_including_tag(backend_inbox, tag, 0);
      } else {
  	r = IMAP_SERVER_UNAVAILABLE;
      }
--- 3863,3868 ----
***************
*** 4051,4058 ****
  			tag, strlen(name), name,
  			strlen(identifier), identifier);
  	}	    
! 	res = pipe_including_tag(s, tag, 0);
! 	tag = "*";		/* can't send another tagged response */
  	if (!CAPA(s, CAPA_MUPDATE) && res == PROXY_OK) {
  	    /* setup new ACL in MUPDATE */
  	}
--- 4102,4108 ----
  			tag, strlen(name), name,
  			strlen(identifier), identifier);
  	}	    
! 
  	if (!CAPA(s, CAPA_MUPDATE) && res == PROXY_OK) {
  	    /* setup new ACL in MUPDATE */
  	}
***************
*** 4150,4156 ****
  	if (s) {
  	    prot_printf(s->out, "%s Getquotaroot {%d+}\r\n%s\r\n",
  			tag, strlen(name), name);
- 	    pipe_including_tag(s, tag, 0);
  	} else {
  	    r = IMAP_SERVER_UNAVAILABLE;
  	}
--- 4200,4205 ----
***************
*** 4375,4385 ****
      if (!r) s = proxyd_findserver(server);
      if (!r && !s) r = IMAP_SERVER_UNAVAILABLE;
      if (!r) {
- 	prot_printf(s->out, "%s Status {%d+}\r\n%s ", tag,
- 		    strlen(name), name);
- 	if (!pipe_command(s, 65536)) {
- 	    pipe_until_tag(s, tag, 0);
- 	}
  	if (backend_current && s != backend_current) {
  	    char mytag[128];
  	    
--- 4424,4429 ----
***************
*** 4388,4400 ****
  	    prot_printf(backend_current->out, "%s Noop\r\n", mytag);
  	    pipe_until_tag(backend_current, mytag, 0);
  	}
      } else {
  	eatline(proxyd_in, prot_getc(proxyd_in));
-     }
- 
-     if (!r) {
- 	prot_printf(proxyd_out, "%s %s", tag, s->last_result);
-     } else {
  	prot_printf(proxyd_out, "%s NO %s\r\n", tag, error_message(r));
      }
  }
--- 4432,4442 ----
  	    prot_printf(backend_current->out, "%s Noop\r\n", mytag);
  	    pipe_until_tag(backend_current, mytag, 0);
  	}
+ 	prot_printf(s->out, "%s Status {%d+}\r\n%s ", tag,
+ 		    strlen(name), name);
+ 	pipe_command(s, 65536);
      } else {
  	eatline(proxyd_in, prot_getc(proxyd_in));
  	prot_printf(proxyd_out, "%s NO %s\r\n", tag, error_message(r));
      }
  }
Index: lib/prot.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/lib/prot.c,v
retrieving revision 1.86
diff -c -r1.86 prot.c
*** lib/prot.c	27 Feb 2004 22:08:56 -0000	1.86
--- lib/prot.c	15 Mar 2004 16:02:41 -0000
***************
*** 1004,1009 ****
--- 1004,1010 ----
  	time_t this_timeout = 0;   /* this stream */
  	
  	s = readstreams->group[i];
+ 	if (!s) continue;
  
  	assert(!s->write);
  
***************
*** 1105,1110 ****
--- 1106,1112 ----
  	
  	for(i = 0; i<readstreams->next_element; i++) {
  	    s = readstreams->group[i];
+ 	    if (!s) continue;
  
  	    if(FD_ISSET(s->fd, &rfds)) {
  		found_fds++;
***************
*** 1198,1213 ****
  
  void protgroup_insert(struct protgroup *group, struct protstream *item) 
  {
      assert(group);
      assert(item);
!     /* Double size of the protgroup if we're at our limit */
!     if(group->next_element == group->nalloced) {
  	group->nalloced *= 2;
  	group->group = xrealloc(group->group,
  				group->nalloced * sizeof(struct protstream *));
      }
!     /* Insert the item on the end of the group */
!     group->group[group->next_element++] = item;
  }
  
  struct protstream *protgroup_getelement(struct protgroup *group,
--- 1200,1240 ----
  
  void protgroup_insert(struct protgroup *group, struct protstream *item) 
  {
+     int i, empty;
+ 
      assert(group);
      assert(item);
! 
!     /* See if we already have this protstream */
!     for (i = 0, empty = group->next_element; i < group->next_element; i++) {
! 	if (!group->group[i]) empty = i;
! 	else if (group->group[i] == item) return;
!     }
!     /* Double size of the protgroup if we're at our limit */ 
!     if (empty == group->next_element &&
! 	group->next_element++ == group->nalloced) {
  	group->nalloced *= 2;
  	group->group = xrealloc(group->group,
  				group->nalloced * sizeof(struct protstream *));
      }
!     /* Insert the item at the empty location */
!     group->group[empty] = item;
! }
! 
! void protgroup_delete(struct protgroup *group, struct protstream *item) 
! {
!     int i;
! 
!     assert(group);
!     assert(item);
! 
!     /* find the protstream */
!     for (i = 0; i < group->next_element; i++) {
! 	if (group->group[i] == item) {
! 	    group->group[i] = NULL;
! 	    return;
! 	}
!     }
  }
  
  struct protstream *protgroup_getelement(struct protgroup *group,
Index: lib/prot.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/lib/prot.h,v
retrieving revision 1.41
diff -c -r1.41 prot.h
*** lib/prot.h	27 Feb 2004 22:08:57 -0000	1.41
--- lib/prot.h	15 Mar 2004 16:02:41 -0000
***************
*** 232,237 ****
--- 232,240 ----
  /* Insert an element into a protgroup */
  void protgroup_insert(struct protgroup *group, struct protstream *item);
  
+ /* Delete an element from a protgroup */
+ void protgroup_delete(struct protgroup *group, struct protstream *item);
+ 
  /* Returns the protstream at that position in the protgroup, or NULL if
   * an invalid element is requested */
  struct protstream *protgroup_getelement(struct protgroup *group,
