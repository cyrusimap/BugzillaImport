--- ipurge.c	2009-03-25 14:52:44.000000000 +0100
+++ ipurge.new.c	2009-03-27 10:39:18.000000000 +0100
@@ -78,6 +78,7 @@
 
 /* globals for callback functions */
 int days = -1;
+int udays = -1;
 int size = -1;
 int exact = -1;
 int pattern = -1;
@@ -100,6 +101,7 @@
 
 int verbose = 1;
 int forceall = 0;
+int donothing = 0;
 
 int purge_me(char *, int, int);
 unsigned purge_check(struct mailbox *, void *, unsigned char *, int);
@@ -116,7 +118,7 @@
       fatal("must run as the Cyrus user", EC_USAGE);
   }
 
-  while ((option = getopt(argc, argv, "C:hxd:b:k:m:fsXi")) != EOF) {
+  while ((option = getopt(argc, argv, "C:hxd:b:k:m:fsXiu:n")) != EOF) {
     switch (option) {
     case 'C': /* alt config file */
       alt_config = optarg;
@@ -127,6 +129,12 @@
       }
       days = atoi(optarg) * 86400 /* nominal # of seconds in a 'day' */;
     } break;
+    case 'u': {
+      if (optarg == 0) {
+	usage(argv[0]);
+      }
+      udays = atoi(optarg) * 86400 /* nominal # of seconds in a 'day' */;
+    } break;
     case 'b': {
       if (optarg == 0) {
 	usage(argv[0]);
@@ -151,6 +159,9 @@
     case 'f' : {
       forceall = 1;
     } break;
+    case 'n' : {
+      donothing = 1;
+    } break;
     case 's' : {
       skipflagged = 1;
     } break;
@@ -164,13 +175,16 @@
     default: usage(argv[0]);
     }
   }
-  if ((days == -1 ) && (size == -1)) {
-    printf("One of these must be specified -d, -b -k, -m\n");
+  if ((days == -1 ) && (size == -1) && (udays == -1 )) {
+    printf("One of these must be specified -u, -d, -b, -k, -m\n");
     usage(argv[0]);
   }
 
   cyrus_init(alt_config, "ipurge", 0);
 
+  if (donothing)
+    printf("warning : do nothing mode !\n");
+
   /* Set namespace -- force standard (internal) */
   if ((r = mboxname_init_namespace(&purge_namespace, 1)) != 0) {
       syslog(LOG_ERR, error_message(r));
@@ -214,11 +228,12 @@
 
 int
 usage(char *name) {
-  printf("usage: %s [-f] [-s] [-C <alt_config>] [-x] [-X] [-i] {-d days | -b bytes|-k Kbytes|-m Mbytes}\n\t[mboxpattern1 ... [mboxpatternN]]\n", name);
-  printf("\tthere are no defaults and at least one of -d, -b, -k, -m\n\tmust be specified\n");
+  printf("usage: %s [-n] [-f] [-s] [-C <alt_config>] [-x] [-X] [-i] {-u days|-d days | -b bytes|-k Kbytes|-m Mbytes}\n\t[mboxpattern1 ... [mboxpatternN]]\n", name);
+  printf("\tthere are no defaults and at least one of -u, -d, -b, -k, -m\n\tmust be specified\n");
   printf("\tif no mboxpattern is given %s works on all mailboxes\n", name);
   printf("\t -x specifies an exact match for days or size\n");
   printf("\t -f force also to delete mail below user.* and INBOX.*\n");
+  printf("\t -n do not really delete mails\n");
   printf("\t -s skip over messages that are flagged.\n");
   printf("\t -X use delivery time instead of date header for date matches.\n");
   printf("\t -i invert match logic: -x means not equal, date is for newer, size is for smaller.\n");
@@ -294,10 +309,12 @@
   time_t my_time;
   mbox_stats_t *stats = (mbox_stats_t *) deciderock;
   bit32 senttime;
+  bit32 uptime;
   bit32 msgsize;
   bit32 flagged;
 
   senttime = ntohl(*((bit32 *)(buf + datemode)));
+  uptime = ntohl(*((bit32 *)(buf + OFFSET_LAST_UPDATED)));
   msgsize = ntohl(*((bit32 *)(buf + OFFSET_SIZE)));
   flagged = ntohl(*((bit32 *)(buf + OFFSET_SYSTEM_FLAGS))) & FLAG_FLAGGED;
 
@@ -314,10 +331,31 @@
       if (((my_time - (time_t) senttime)/86400) == (days/86400)) {
 	  if (invertmatch) return 0;
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
+	  return 1;
+      } else {
+	  if (!invertmatch) return 0;
+	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
+	  return 1;
+      }
+    }
+    if (udays >= 0) {
+      my_time = time(0);
+      /*    printf("comparing %ld :: %ld\n", my_time, uptime); */
+      if (((my_time - (time_t) uptime)/86400) == (udays/86400)) {
+	  if (invertmatch) return 0;
+	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       } else {
 	  if (!invertmatch) return 0;
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       }
     }
@@ -326,10 +364,14 @@
 	if ((int) msgsize == size) {
 	  if (invertmatch) return 0;
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       } else {
 	  if (!invertmatch) return 0;
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       }
     }
@@ -340,10 +382,30 @@
       /*    printf("comparing %ld :: %ld\n", my_time, the_record->sentdate); */
       if (!invertmatch && ((my_time - (time_t) senttime) > days)) {
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       }
       if (invertmatch && ((my_time - (time_t) senttime) < days)) {
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
+	  return 1;
+      }
+    }
+    if (udays >= 0) {
+      my_time = time(0);
+      /*    printf("comparing %ld :: %ld\n", my_time, uptime); */
+      if (!invertmatch && ((my_time - (time_t) uptime) > udays)) {
+	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
+	  return 1;
+      }
+      if (invertmatch && ((my_time - (time_t) uptime) < udays)) {
+	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       }
     }
@@ -351,10 +413,14 @@
       /* check size */
 	if (!invertmatch && ((int) msgsize > size)) {
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       }
 	if (invertmatch && ((int) msgsize < size)) {
 	  deleteit(msgsize, stats);
+	  if (donothing)
+	      return 0;
 	  return 1;
       }
     }
