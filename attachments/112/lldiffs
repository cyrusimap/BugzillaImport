*** imap/lmtpd.c.old	Mon Jan 20 16:58:14 2003
--- imap/lmtpd.c	Thu Feb  6 18:44:32 2003
***************
*** 718,730 ****
--- 718,742 ----
      message_data_t *md = mdata->m;
      int quotaoverride = msg_getrcpt_ignorequota(md, mdata->cur_rcpt);
      int ret;
+     char name[MAX_MAILBOX_PATH];
+     unsigned long length = sizeof (name);
  
      /* we're now the user who owns the script */
      if (!sd->authstate)
  	return SIEVE_FAIL;
  
+     memset(name, 0, length);			    /* clear name buffer     */
+     if (!mboxname_utf8toutf7(name, &length, fc->mailbox))
+ 	return SIEVE_FAIL;			    /* FAIL: couldnt convert */
+     if (*name)					    /* use mutf7 name        */
+ 	ret = deliver_mailbox(md->data, mdata->stage, md->size,
+ 			      fc->imapflags->flag, fc->imapflags->nflags,
+ 			      sd->username, sd->authstate, md->id,
+ 			      sd->username, mdata->notifyheader,
+ 			      name, quotaoverride, 0);
+     else					    /* use original name     */
  	ret = deliver_mailbox(md->data, mdata->stage, md->size,
  			      fc->imapflags->flag, fc->imapflags->nflags,
  			      sd->username, sd->authstate, md->id,
  			      sd->username, mdata->notifyheader,
  			      fc->mailbox, quotaoverride, 0);
*** imap/mboxname.h.old	Mon Jan 20 16:47:26 2003
--- imap/mboxname.h	Thu Feb  6 17:38:36 2003
***************
*** 103,106 ****
--- 103,112 ----
  
  int mboxname_netnewscheck(char *name);
  
+ /*
+  * Converts a UTF-8 string to MUTF-7.  mutf7_dst should a buffer able
+  * to hold at least mboxname_utf8tomutf7_length( ) + 1 bytes.
+  */
+ char * mboxname_utf8toutf7(char *utf7, unsigned long *size, const char *utf8);
+ 
  #endif
*** imap/mboxname.c.old	Mon Jan 20 16:44:18 2003
--- imap/mboxname.c	Thu Feb  6 17:37:33 2003
***************
*** 554,556 ****
--- 554,700 ----
      }
      return 0;
  }
+ 
+ /* UTF7 modified base64 alphabet */
+ static const char base64chars[] =
+   "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,";
+ 
+ /* UTF16 definitions */
+ #define UTF16MASK       0x03FFUL
+ #define UTF16SHIFT      10
+ #define UTF16BASE       0x10000UL
+ #define UTF16HIGHSTART  0xD800UL
+ #define UTF16HIGHEND    0xDBFFUL
+ #define UTF16LOSTART    0xDC00UL
+ #define UTF16LOEND      0xDFFFUL
+ 
+ /*
+  * mboxname_utf8toutf7
+  *   Converts a UTF-8 string to MUTF-7.
+  * Return: utf7 pointer, or null pointer in case of error
+  * Parameter: utf7 (optional)
+  *   pointer to buffer to catch result of conversion
+  * Parameter: size (required)
+  *   on entry contains size of utf7 buffer.
+  *   on return contains length of utf7 string.
+  * Parameter: utf8 (required)
+  *   pointer to buffer containing utf8 string to be converted.
+  */
+ char * mboxname_utf8toutf7(char *utf7, unsigned long *size, const char *utf8)
+ {
+     const unsigned char *src;
+     char *dst ;
+     unsigned int utf8pos = 0, utf8total, i, c, utf7mode, bitstogo, utf16flag;
+     unsigned long ucs4 = 0, bitbuf = 0, len = 0, utf7len = 0;
+ 
+     /* check args */
+     if (!size || !utf8) return (char *)0;    /* no len or src         */
+     if (!utf7) len = 0;			    /* no dst buffer len = 0 */
+     else len = *size;			    /* len = dst buf size    */
+     /* initialize pointers */
+     src = (const unsigned char *)utf8;
+     dst = utf7;
+     utf7mode = 0;
+     utf8total = 0;
+     bitstogo = 0;
+     while ((c = *src) != '\0') {
+         ++src;
+         /* normal character? */
+         if (c >= ' ' && c <= '~') {
+             /* switch out of UTF-7 mode */
+             if (utf7mode) {
+                 if (bitstogo) {
+ 		    utf7len++;			    /* count character       */
+ 		    if(dst && (utf7len < len))      /* have dst? big enough? */
+ 			*dst++ = base64chars[(bitbuf << (6 - bitstogo)) & 0x3F];
+                 }
+ 		utf7len++;			    /* count character       */
+                 if(dst && (utf7len < len))	    /* have dst? big enough? */
+ 		    *dst++ = '-';
+                 utf7mode = 0;
+             }
+             utf7len++;				    /* count character       */
+ 	    if(dst && (utf7len < len))		    /* have dst? big enough? */
+ 		*dst++ = c;
+             /* encode '&' as '&-' */
+             if (c == '&') {
+                 utf7len++;			    /* count characer        */
+                 if(dst && (utf7len < len))	    /* have dst? big enough? */
+ 		    *dst++ = '-';
+             }
+             continue;
+         }
+         /* switch to UTF-7 mode */
+         if (!utf7mode) {
+             utf7len++;				    /* count character       */
+ 	    if(dst && (utf7len < len))		    /* have dst? big enough? */
+ 		*dst++ = '&';
+             utf7mode = 1;
+         }
+         /* Encode US-ASCII characters as themselves */
+         if (c < 0x80) {
+             ucs4 = c;
+             utf8total = 1;
+         } else if (utf8total) {
+             /* save UTF8 bits into UCS4 */
+             ucs4 = (ucs4 << 6) | (c & 0x3FUL);
+             if (++utf8pos < utf8total) {
+                 continue;
+             }
+         } else {
+             utf8pos = 1;
+             if (c < 0xE0) {
+                 utf8total = 2;
+                 ucs4 = c & 0x1F;
+             } else if (c < 0xF0) {
+                 utf8total = 3;
+                 ucs4 = c & 0x0F;
+             } else {
+                 /* NOTE: can't convert UTF8 sequences longer than 4 */
+                 utf8total = 4;
+                 ucs4 = c & 0x03;
+             }
+             continue;
+         }
+         /* loop to split ucs4 into two utf16 chars if necessary */
+         utf8total = 0;
+         do {
+             if (ucs4 >= UTF16BASE) {
+                 ucs4 -= UTF16BASE;
+                 bitbuf = (bitbuf << 16) | ((ucs4 >> UTF16SHIFT)
+                                            + UTF16HIGHSTART);
+                 ucs4 = (ucs4 & UTF16MASK) + UTF16LOSTART;
+                 utf16flag = 1;
+             } else {
+                 bitbuf = (bitbuf << 16) | ucs4;
+                 utf16flag = 0;
+             }
+             bitstogo += 16;
+             /* spew out base64 */
+             while (bitstogo >= 6) {
+                 bitstogo -= 6;
+                 utf7len++;			    /* count character       */
+ 		if(dst && (utf7len < len))	    /* have dst? big enough? */
+ 		    *dst++ = base64chars[(bitstogo ? (bitbuf >> bitstogo)
+ 					  : bitbuf)
+ 					& 0x3F];
+             }
+         } while (utf16flag);
+     }
+     /* if in UTF-7 mode, finish in ASCII */
+     if (utf7mode) {
+         if (bitstogo) {
+             utf7len++;				    /* count character       */
+ 	    if(dst && (utf7len < len))		    /* have dst? big enough? */
+ 		*dst++ = base64chars[(bitbuf << (6 - bitstogo)) & 0x3F];
+         }
+         utf7len++;
+ 	if(dst && (utf7len < len)) *dst++ = '-';
+     }
+     if(dst && (utf7len < len))			    /* have dst? big enough? */
+ 	*dst = '\0';				    /* null terminate dst    */
+     else					    /* no dst or not enough  */
+ 	utf7 = (char *)0;			    /* FAILURE: return null  */
+     *size = utf7len;				    /* return mutf7 length   */
+     return utf7;				    /* return result         */
+ }
