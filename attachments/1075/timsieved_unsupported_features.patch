*** 114,120 ****
  
  static commandlist_t *ret;
  static sieve_script_t *parse_script;
! static int check_reqs(stringlist_t *sl);
  static test_t *build_address(int t, struct aetags *ae,
  			     stringlist_t *sl, stringlist_t *pl);
  static test_t *build_header(int t, struct htags *h,
--- 120,126 ----
  
  static commandlist_t *ret;
  static sieve_script_t *parse_script;
! static char* check_reqs(stringlist_t *sl);
  static test_t *build_address(int t, struct aetags *ae,
  			     stringlist_t *sl, stringlist_t *pl);
  static test_t *build_header(int t, struct htags *h,
***************
*** 219,226 ****
  	| require reqs
  	;
  
! require: REQUIRE stringlist ';'	{ if (!check_reqs($2)) {
!                                     yyerror("Unsupported feature(s) in \"require\"");
  				    YYERROR; 
                                    } }
  	;
--- 229,244 ----
  	| require reqs
  	;
  
! require: REQUIRE stringlist ';'	{ char *x = check_reqs($2);
! 				  if (x[0]) {
! 				    char *z = malloc(strlen(x) + 40);
! 				    if (strchr(x, ','))
! 				      sprintf(z, "Unsupported features in \"require\": %s", x);
! 				    else
! 				      sprintf(z, "Unsupported feature in \"require\": %s", x);
! 				    yyerror(z);
! 				    free(z);
! 				    free(x);
  				    YYERROR; 
                                    } }
  	;
***************
*** 718,738 ****
      return 0;
  }
  
! static int check_reqs(stringlist_t *sl)
  {
      int i = 1;
      stringlist_t *s;
!     
      while (sl != NULL) {
  	s = sl;
  	sl = sl->next;
! 
! 	i &= script_require(parse_script, s->s);
  
  	if (s->s) free(s->s);
  	free(s);
      }
!     return i;
  }
  
  static test_t *build_address(int t, struct aetags *ae,
--- 780,805 ----
      return 0;
  }
  
! static char* check_reqs(stringlist_t *sl)
  {
      int i = 1;
      stringlist_t *s;
!     char* ret = malloc(1000); //POTENTIAL BUFFER OVERFLOW
!     ret[0] = '\0';
      while (sl != NULL) {
  	s = sl;
  	sl = sl->next;
! 	if (script_require(parse_script, s->s) == 0) {
! 	  strcat(ret, s->s);
! 	  strcat(ret, ", ");
! 	}
  
  	if (s->s) free(s->s);
  	free(s);
      }
!     if (ret[0])
!       ret[strlen(ret)-2] = '\0';
!     return ret;
  }
  
  static test_t *build_address(int t, struct aetags *ae,
***************
*** 749,754 ****
--- 816,822 ----
  	ret->u.ae.sl = sl;
  	ret->u.ae.pl = pl;
  	ret->u.ae.addrpart = ae->addrtag;
+ 	ret->u.ae.extlists = ae->extlists;
  	free_aetags(ae);
  
      }
***************
*** 768,773 ****
--- 836,842 ----
  	ret->u.h.comparator=xstrdup(h->comparator);
  	ret->u.h.sl = sl;
  	ret->u.h.pl = pl;
+ 	ret->u.h.extlists = h->extlists;
  	free_htags(h);
      }
      return ret;
***************
*** 863,887 ****
      return ret;
  }
  
! static commandlist_t *build_redirect(int t, int copy, char *address)
  {
      commandlist_t *ret = new_command(t);
  
      assert(t == REDIRECT);
  
      if (ret) {
! 	ret->u.r.copy = copy;
  	ret->u.r.address = address;
      }
      return ret;
  }
  
  static struct aetags *new_aetags(void)
  {
      struct aetags *r = (struct aetags *) xmalloc(sizeof(struct aetags));
  
      r->addrtag = r->comptag = r->relation=-1;
      r->comparator=NULL;
  
      return r;
  }
--- 932,976 ----
      return ret;
  }
  
! static commandlist_t *build_redirect(int t, struct rtags* r, char *address)
  {
      commandlist_t *ret = new_command(t);
  
      assert(t == REDIRECT);
  
      if (ret) {
! 	ret->u.r.copy = r->copy;
!         ret->u.r.extlists = r->extlists;
  	ret->u.r.address = address;
+         free(r);
      }
      return ret;
  }
  
+ static struct rtags *new_rtags(void)
+ {
+      struct rtags *r = (struct rtags *) xmalloc(sizeof(struct rtags));
+  
+      r->extlists = 0;
+      r->copy = 0;
+  
+      return r;
+ }
+  
+ static void free_rtags(struct rtags *r)
+ {
+      free(r);
+ }
+  
+ 
+ 
  static struct aetags *new_aetags(void)
  {
      struct aetags *r = (struct aetags *) xmalloc(sizeof(struct aetags));
  
      r->addrtag = r->comptag = r->relation=-1;
      r->comparator=NULL;
+     r->extlists = 0;
  
      return r;
  }
***************
*** 907,913 ****
      struct htags *r = (struct htags *) xmalloc(sizeof(struct htags));
  
      r->comptag = r->relation= -1;
!     
      r->comparator = NULL;
  
      return r;
--- 996,1002 ----
      struct htags *r = (struct htags *) xmalloc(sizeof(struct htags));
  
      r->comptag = r->relation= -1;
!     r->extlists = 0;    
      r->comparator = NULL;
  
      return r;
