Index: man/master.8
===================================================================
RCS file: /cvs/src/cyrus/man/master.8,v
retrieving revision 1.11
diff -u -u -r1.11 master.8
--- man/master.8	18 May 2004 19:16:46 -0000	1.11
+++ man/master.8	7 Dec 2004 17:07:14 -0000
@@ -146,6 +146,15 @@
 The environment variable \fBCYRUS_VERBOSE\fR can be set to log additional
 debugging information. Setting the value to 1 results in base level logging. 
 Setting it higher results in more log messages being generated.
+.SH BUGS
+Services do not always go away silently when removed through a SIGHUP.  If
+there are workers of the removed service still running, messages to syslog
+about broken pipes and accept() failures are to be expected.
+.PP
+The in-memory list of services is not cleaned up ever, so a Cyrus master
+daemon that has been sent an extremely high amount of SIGHUP signals to
+add/remove/modify services will lose performance eventually.  Restarting
+Cyrus master fixes this.
 .SH FILES
 .TP
 .B /etc/cyrus.conf, /etc/imapd.conf, /var/run/cyrus-master.pid
Index: master/master.c
===================================================================
RCS file: /cvs/src/cyrus/master/master.c,v
retrieving revision 1.98
diff -u -u -r1.98 master.c
--- master/master.c	22 Jun 2004 19:00:05 -0000	1.98
+++ master/master.c	7 Dec 2004 17:07:15 -0000
@@ -121,6 +121,10 @@
 
 const char *MASTER_CONFIG_FILENAME = DEFAULT_MASTER_CONFIG_FILENAME;
 
+#define SERVICE_NONE -1
+#define SERVICE_MAX  INT_MAX-10
+#define SERVICENAME(x) ((x) ? x : "unknown")
+
 struct service *Services = NULL;
 int allocservices = 0;
 int nservices = 0;
@@ -152,7 +156,7 @@
     pid_t pid;
     enum sstate service_state;	/* SERVICE_STATE_* */
     time_t janitor_deadline;	/* cleanup deadline */
-    struct service *s;
+    int si;			/* Services[] index */
     struct centry *next;
 };
 static struct centry *ctable[child_table_size];
@@ -342,7 +346,11 @@
 
     if (s->associate > 0)
 	return;			/* service is already activated */
-    
+
+    if (!s->name)
+	fatal("Serious software bug found: service_create() called on unnamed service!",
+		EX_SOFTWARE);
+
     if (s->listen[0] == '/') { /* unix socket */
 	res0_is_local = 1;
 	res0 = (struct addrinfo *)malloc(sizeof(struct addrinfo));
@@ -494,6 +502,8 @@
 	
 	if (s == &service) {
 	    if (nservices == allocservices) {
+		if (allocservices > SERVICE_MAX - 5)
+		    fatal("out of service structures, please restart", EX_UNAVAILABLE);
 		Services = xrealloc(Services, 
 				    (allocservices+=5) * sizeof(struct service));
 		if (!Services) fatal("out of memory", EX_UNAVAILABLE);
@@ -572,7 +582,7 @@
     }
 }
 
-void spawn_service(struct service *s)
+void spawn_service(const int si)
 {
     /* Note that there is logic that depends on this being 2 */
     const int FORKRATE_INTERVAL = 2;
@@ -582,12 +592,18 @@
     char path[PATH_MAX];
     static char name_env[100], name_env2[100];
     struct centry *c;
+    struct service * const s = &Services[si];
     time_t now = time(NULL);
-    
+
+    if (!s->name) {
+	fatal("Serious software bug found: spawn_service() called on unnamed service!",
+		EX_SOFTWARE);
+    }
+
     /* update our fork rate */
     if(now - s->last_interval_start >= FORKRATE_INTERVAL) {
 	int interval;
-	
+
 	s->forkrate = (s->interval_forks/2) + (s->forkrate/2);
 	s->interval_forks = 0;
 	s->last_interval_start += FORKRATE_INTERVAL;
@@ -681,7 +697,7 @@
 	c = get_centry();
 	c->pid = p;
 	c->service_state = SERVICE_STATE_READY;
-	c->s = s;
+	c->si = si;
 	c->next = ctable[p % child_table_size];
 	ctable[p % child_table_size] = c;
 	break;
@@ -693,6 +709,10 @@
 {
     struct event *ptr;
 
+    if (! a->name)
+	fatal("Serious software bug found: schedule_event() called on unnamed event!",
+		EX_SOFTWARE);
+
     if (!schedule || a->mark < schedule->mark) {
 	a->next = schedule;
 	schedule = a;
@@ -771,7 +791,7 @@
 		c = get_centry();
 		c->pid = p;
 		c->service_state = SERVICE_STATE_READY;
-		c->s = NULL;
+		c->si = SERVICE_NONE;
 		c->next = ctable[p % child_table_size];
 		ctable[p % child_table_size] = c;
 		
@@ -805,6 +825,7 @@
     int status;
     pid_t pid;
     struct centry *c;
+    struct service *s;
 
     while ((pid = waitpid((pid_t) -1, &status, WNOHANG)) > 0) {
 	if (WIFEXITED(status)) {
@@ -822,6 +843,8 @@
 	while(c && c->pid != pid) c = c->next;
 	
 	if (c && c->pid == pid) {
+	    s = ((c->si) != SERVICE_NONE) ? &Services[c->si] : NULL;
+
 	    /* paranoia */
 	    switch (c->service_state) {
 	    case SERVICE_STATE_READY:
@@ -832,23 +855,23 @@
 	    default:
 		syslog(LOG_CRIT, 
 		       "service %s pid %d in ILLEGAL STATE: exited. Serious software bug or memory corruption detected!",
-		       ((c->s) ? c->s->name : "unknown"), pid);
+		       SERVICENAME(s->name), pid);
 		syslog(LOG_DEBUG,
 		       "service %s pid %d in ILLEGAL state: forced to valid UNKNOWN state",
-		       ((c->s) ? c->s->name : "unknown"), pid);
+		       SERVICENAME(s->name), pid);
 		c->service_state = SERVICE_STATE_UNKNOWN;
 	    }
-	    if (c->s) {
+	    if (s) {
 	        /* update counters for known services */
 		switch (c->service_state) {
 		case SERVICE_STATE_READY:
-		    c->s->nactive--;
-		    c->s->ready_workers--;
+		    s->nactive--;
+		    s->ready_workers--;
 		    if (WIFSIGNALED(status) ||
 			(WIFEXITED(status) && WEXITSTATUS(status))) {
 			syslog(LOG_WARNING, 
 			       "service %s pid %d in READY state: terminated abnormally",
-			       c->s->name, pid);
+			       SERVICENAME(s->name), pid);
 		    }
 		    break;
 		    
@@ -856,35 +879,34 @@
 		    /* uh? either we got duplicate signals, or we are now MT */
 		    syslog(LOG_WARNING, 
 			   "service %s pid %d in DEAD state: receiving duplicate signals", 
-			   c->s->name, pid);
+			   SERVICENAME(s->name), pid);
 		    break;
 		    
 		case SERVICE_STATE_BUSY:
-		    c->s->nactive--;
+		    s->nactive--;
 		    if (WIFSIGNALED(status) ||
 			(WIFEXITED(status) && WEXITSTATUS(status))) {
 			syslog(LOG_DEBUG,
 			       "service %s pid %d in BUSY state: terminated abnormally",
-			       c->s->name, pid);
+			       SERVICENAME(s->name), pid);
 		    }
 		    break;
 		    
 		case SERVICE_STATE_UNKNOWN:
-		    c->s->nactive--;
+		    s->nactive--;
 		    syslog(LOG_WARNING,
 			   "service %s pid %d in UNKNOWN state: exited",
-			   c->s->name, pid);
-		    break;
-
-		default:
-		    /* Prevent Warning */
+			   SERVICENAME(s->name), pid);
 		    break;
 		} 
 	    } else {
-	    	/* children from spawn_schedule (events) or children that messaged us before being registered */
+	    	/* children from spawn_schedule (events) or
+		 * children that messaged us before being registered or
+		 * children of services removed by reread_conf() */
 		if (c->service_state != SERVICE_STATE_READY) {
-		    syslog(LOG_ERR,
-			   "unknown service pid %d in state %d: exited (maybe using a service as an event?)",
+		    syslog(LOG_WARNING,
+			   "unknown service pid %d in state %d: exited (maybe using a service as an event,"
+			   " or a service was removed by SIGHUP?)",
 			   pid, c->service_state);
 		}
 	    }
@@ -899,13 +921,14 @@
 	    c->pid = pid;
 	    c->service_state = SERVICE_STATE_DEAD;
 	    c->janitor_deadline = time(NULL) + 2;
-	    c->s = NULL;
+	    c->si = SERVICE_NONE;
 	    c->next = ctable[pid % child_table_size];
 	    ctable[pid % child_table_size] = c;
 	}
-    if (verbose && c && c->s)
-	syslog(LOG_DEBUG, "service %s now has %d ready workers\n", 
-	       c->s->name, c->s->ready_workers);
+	if (verbose && c && (c->si != SERVICE_NONE))
+	    syslog(LOG_DEBUG, "service %s now has %d ready workers\n", 
+		    SERVICENAME(Services[c->si].name),
+		    Services[c->si].ready_workers);
     }
 }
 
@@ -1052,14 +1075,11 @@
     }
 }
 
-void process_msg(struct service *s, struct notify_message *msg) 
+void process_msg(const int si, struct notify_message *msg) 
 {
-    struct centry * c;
-    
-    /* s must NOT be null
-     * but we don't assert(s) since the current code 
-     * makes NULL s an impossibility anyway 
-     */
+    struct centry *c;
+    /* si must NOT point to an invalid service */
+    struct service * const s = &Services[si];;
 
     /* Search hash table with linked list for pid */
     c = ctable[msg->service_pid % child_table_size];
@@ -1068,10 +1088,10 @@
     /* Did we find it? */
     if (!c || c->pid != msg->service_pid) {
 	syslog(LOG_WARNING, "service %s pid %d: while trying to process message 0x%x: not registered yet", 
-	       s->name, msg->service_pid, msg->message);
+	       SERVICENAME(s->name), msg->service_pid, msg->message);
 	/* resilience paranoia. Causes small performance loss when used */
 	c = get_centry();
-	c->s = s;
+	c->si = si;
 	c->pid = msg->service_pid;
 	c->service_state = SERVICE_STATE_UNKNOWN;
 	c->next = ctable[c->pid % child_table_size];
@@ -1079,17 +1099,18 @@
     }
     
     /* paranoia */
-    if (s != c->s) {
+    if (si != c->si) {
 	syslog(LOG_ERR, 
 	       "service %s pid %d: changing from service %s due to received message",
-	       s->name, c->pid, ( (c->s) ? c->s->name : "unknown" ));
-	c->s = s;
+	       SERVICENAME(s->name), c->pid,
+	       ((c->si != SERVICE_NONE && Services[c->si].name) ? Services[c->si].name : "unknown"));
+	c->si = si;
     }
     switch (c->service_state) {
     case SERVICE_STATE_UNKNOWN:
 	syslog(LOG_WARNING, 
 	       "service %s pid %d in UNKNOWN state: processing message 0x%x",
-	       s->name, c->pid, msg->message);
+	       SERVICENAME(s->name), c->pid, msg->message);
 	break;
     case SERVICE_STATE_READY:
     case SERVICE_STATE_BUSY:
@@ -1098,10 +1119,10 @@
     default:
 	syslog(LOG_CRIT,
 	       "service %s pid %d in ILLEGAL state: detected. Serious software bug or memory corruption uncloaked while processing message 0x%x from child!",
-	       s->name, c->pid, msg->message);
+	       SERVICENAME(s->name), c->pid, msg->message);
 	syslog(LOG_DEBUG,
 	       "service %s pid %d in ILLEGAL state: forced to valid UNKNOWN state",
-	       s->name, c->pid);
+	       SERVICENAME(s->name), c->pid);
 	c->service_state = SERVICE_STATE_UNKNOWN;
 	break;
     }
@@ -1114,7 +1135,7 @@
 	    /* duplicate message? */
 	    syslog(LOG_WARNING,
 		   "service %s pid %d in READY state: sent available message but it is already ready",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    break;
 	    
 	case SERVICE_STATE_UNKNOWN:
@@ -1122,7 +1143,7 @@
 	     * we don't increment ready_workers */
 	    syslog(LOG_DEBUG,
 		   "service %s pid %d in UNKNOWN state: now available and in READY state",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    c->service_state = SERVICE_STATE_READY;
 	    break;
 	    
@@ -1130,14 +1151,10 @@
 	    if (verbose) 
 		syslog(LOG_DEBUG,
 		       "service %s pid %d in BUSY state: now available and in READY state",
-		       s->name, c->pid);
+		       SERVICENAME(s->name), c->pid);
 	    c->service_state = SERVICE_STATE_READY;
 	    s->ready_workers++;
 	    break;
-
-	default:
-	    /* Prevent Warning */
-	    break;
 	}
 	break;
 
@@ -1147,13 +1164,13 @@
 	    /* duplicate message? */
 	    syslog(LOG_WARNING,
 		   "service %s pid %d in BUSY state: sent unavailable message but it is already busy",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    break;
 	    
 	case SERVICE_STATE_UNKNOWN:
 	    syslog(LOG_DEBUG,
 		   "service %s pid %d in UNKNOWN state: now unavailable and in BUSY state",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    c->service_state = SERVICE_STATE_BUSY;
 	    break;
 	    
@@ -1161,14 +1178,10 @@
 	    if (verbose)
 		syslog(LOG_DEBUG,
 		       "service %s pid %d in READY state: now unavailable and in BUSY state",
-		       s->name, c->pid);
+		       SERVICENAME(s->name), c->pid);
 	    c->service_state = SERVICE_STATE_BUSY;
 	    s->ready_workers--;
 	    break;
-
-	default:
-	    /* Prevent Warning */
-	    break;
 	}
 	break;
 
@@ -1179,7 +1192,7 @@
 	    if (verbose)
 		syslog(LOG_DEBUG,
 		       "service %s pid %d in BUSY state: now serving connection",
-		       s->name, c->pid);
+		       SERVICENAME(s->name), c->pid);
 	    break;
 	    
 	case SERVICE_STATE_UNKNOWN:
@@ -1187,22 +1200,18 @@
 	    c->service_state = SERVICE_STATE_BUSY;
 	    syslog(LOG_DEBUG,
 		   "service %s pid %d in UNKNOWN state: now in BUSY state and serving connection",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    break;
 	    
 	case SERVICE_STATE_READY:
 	    syslog(LOG_ERR, 
 		   "service %s pid %d in READY state: reported new connection, forced to BUSY state",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    /* be resilient on face of a bogon source, so lets err to the side
 	     * of non-denial-of-service */
 	    c->service_state = SERVICE_STATE_BUSY;
 	    s->nconnections++;
 	    s->ready_workers--;
-
-	default:
-	    /* Prevent Warning */
-	    break;
 	}
 	break;
 	
@@ -1213,13 +1222,13 @@
 	    if (verbose)
 		syslog(LOG_DEBUG, 
 		       "service %s pid %d in READY state: serving one more multi-threaded connection",
-		       s->name, c->pid);
+		       SERVICENAME(s->name), c->pid);
 	    break;
 	    
 	case SERVICE_STATE_BUSY:
 	    syslog(LOG_ERR, 
 		   "service %s pid %d in BUSY state: serving one more multi-threaded connection, forced to READY state",
-		   s->name, c->pid);
+		   SERVICENAME(s->name), c->pid);
 	    /* be resilient on face of a bogon source, so lets err to the side
 	     * of non-denial-of-service */
 	    c->service_state = SERVICE_STATE_READY;
@@ -1232,24 +1241,20 @@
 	    c->service_state = SERVICE_STATE_READY;
 	    syslog(LOG_ERR,
 		   "service %s pid %d in UNKNOWN state: serving one more multi-threaded connection, forced to READY state",
-		   s->name, c->pid);
-	    break;
-
-	default:
-	    /* Prevent Warning */
+		   SERVICENAME(s->name), c->pid);
 	    break;
 	}
 	break;
 	
     default:
 	syslog(LOG_CRIT, "service %s pid %d: Software bug: unrecognized message 0x%x", 
-	       s->name, c->pid, msg->message);
+	       SERVICENAME(s->name), c->pid, msg->message);
 	break;
     }
 
     if (verbose)
 	syslog(LOG_DEBUG, "service %s now has %d ready workers\n", 
-	       s->name, s->ready_workers);
+	       SERVICENAME(s->name), s->ready_workers);
 }
 
 static char **tokenize(char *p)
@@ -1365,8 +1370,7 @@
 	}
 
 	Services[i].maxforkrate = maxforkrate;
-
- 	Services[nservices].maxfds = maxfds;
+ 	Services[i].maxfds = maxfds;
 
 	if (!strcmp(Services[i].proto, "tcp") ||
 	    !strcmp(Services[i].proto, "tcp4") ||
@@ -1407,6 +1411,8 @@
 	 * the port parameters, so create a new service
 	 */
 	if (nservices == allocservices) {
+	    if (allocservices > SERVICE_MAX - 5)
+		fatal("out of service structures, please restart", EX_UNAVAILABLE);
 	    Services = xrealloc(Services, 
 			       (allocservices+=5) * sizeof(struct service));
 	}
@@ -1573,8 +1579,9 @@
 
 void reread_conf(void)
 {
-    int i;
+    int i,j;
     struct event *ptr;
+    struct centry *c;
 
     /* disable all services -
        they will be re-enabled if they appear in config file */
@@ -1615,6 +1622,15 @@
 	    if (Services[i].stat[0] > 0) close(Services[i].stat[0]);
 	    if (Services[i].stat[1] > 0) close(Services[i].stat[1]);
 	    memset(Services[i].stat, 0, sizeof(Services[i].stat));
+
+	    /* remove service from all children */
+	    for (j = 0 ; j < child_table_size ; j++ ) {
+		c = ctable[j];
+		while (c != NULL) {
+		    if (c->si == i) c->si = SERVICE_NONE;
+		    c = c->next;
+		}
+	    }
 	}
 	else if (Services[i].exec && !Services[i].socket) {
 	    /* initialize new services */
@@ -1627,7 +1643,6 @@
 	}
     }
 
-
     /* remove existing events */
     while (schedule) {
 	ptr = schedule;
@@ -1641,6 +1656,11 @@
 
     /* reinit child janitor */
     init_janitor();
+
+    /* send some feedback to admin */
+    syslog(LOG_NOTICE,
+	    "Services reconfigured. %d out of %d (max %d) services structures are now in use",
+	    nservices, allocservices, SERVICE_MAX);
 }
 
 int main(int argc, char **argv)
@@ -1979,7 +1999,7 @@
 	    if (Services[i].exec /* enabled */ &&
 		(Services[i].nactive < Services[i].max_workers) &&
 		(Services[i].ready_workers < Services[i].desired_workers)) {
-		spawn_service(&Services[i]);
+		spawn_service(i);
 	    } else if (Services[i].exec
 		       && Services[i].babysit
 		       && Services[i].nactive == 0) {
@@ -1987,7 +2007,7 @@
 		       "lost all children for service: %s.  " \
 		       "Applying babysitter.",
 		       Services[i].name);
-		spawn_service(&Services[i]);
+		spawn_service(i);
 	    }
 	}
 
@@ -2071,7 +2091,7 @@
 		    continue;
 		}
 		
-		process_msg(&Services[i], &msg);
+		process_msg(i, &msg);
 	    }
 
 	    if (Services[i].exec &&
@@ -2081,13 +2101,13 @@
 		     j < Services[i].desired_workers; 
 		     j++)
 		{
-		    spawn_service(&Services[i]);
+		    spawn_service(i);
 		}
 
 		if (Services[i].ready_workers == 0 && 
 		    FD_ISSET(y, &rfds)) {
 		    /* huh, someone wants to talk to us */
-		    spawn_service(&Services[i]);
+		    spawn_service(i);
 		}
 	    }
 	}
