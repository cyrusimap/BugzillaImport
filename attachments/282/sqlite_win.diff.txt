Index: doc/options.html
===================================================================
RCS file: /cvs/src/sasl/doc/options.html,v
retrieving revision 1.28
diff -u -r1.28 options.html
--- doc/options.html	7 Jan 2004 16:35:07 -0000	1.28
+++ doc/options.html	10 May 2004 09:35:35 -0000
@@ -104,7 +104,7 @@
 <TD>Path to sasldb file</TD><TD><tt>/etc/sasldb2</tt> (system dependant)</TD>
 <TR>
 <TD>sql_engine</TD><TD>SQL plugin</TD>
-<TD>Name of SQL engine to use (possible values: 'mysql', 'pgsql').</TD>
+<TD>Name of SQL engine to use (possible values: 'mysql', 'pgsql', 'sqlite').</TD>
 <TD><tt>mysql</tt></TD>
 </TR>
 <TR>
Index: doc/windows.html
===================================================================
RCS file: /cvs/src/sasl/doc/windows.html,v
retrieving revision 1.6
diff -u -r1.6 windows.html
--- doc/windows.html	17 Mar 2004 19:48:43 -0000	1.6
+++ doc/windows.html	10 May 2004 09:35:35 -0000
@@ -119,6 +119,13 @@
 GSSAPI depends on <tt>GSSAPI_INCLUDE</tt> and <tt>GSSAPI_LIBPATH</tt> parameters.
 You can either specify them on the command line or edit the defaults in win32\common.mak
 
+<p>Specify "SQL=&lt;type&gt;" parameter if you want to enable SQL plugin.
+Currently only &lt;type&gt;=SQLITE is supported and this will build the plugin
+that links against SQLITE (www.sqlite.org).
+
+SQL=&lt;SQLITE&gt; depends on <tt>SQLITE_INCLUDES</tt> and <tt>SQLITE_LIBPATH</tt> parameters.
+You can either specify them on the command line or edit the defaults in win32\common.mak
+
 <p>Specify "NTLM=1" parameter if you want to enable NTLM plugin.
 I.e. "<tt>nmake /f NTMakefile NTLM=1</tt>"
 
@@ -144,12 +151,13 @@
 <li>LOGIN,
 <li>PLAIN,
 <li>CRAM-MD5,
-<li>DIGEST-MD5
-<li>SASLDB (using SleepyCat),
+<li>DIGEST-MD5,
 <li>NTLM,
 <li>GSSAPI (tested using CyberSafe),
-<li>SRP (not tested)
-<li>OTP (not tested)
+<li>SRP (not tested),
+<li>OTP (not tested),
+<li>SASLDB (using SleepyCat),
+<li>SQL (using SQLITE, not tested)
 </ul>
 
 The following executables were built and tested (to some extend):
Index: plugins/NTMakefile
===================================================================
RCS file: /cvs/src/sasl/plugins/NTMakefile,v
retrieving revision 1.9
diff -u -r1.9 NTMakefile
--- plugins/NTMakefile	23 Feb 2004 22:08:44 -0000	1.9
+++ plugins/NTMakefile	10 May 2004 09:35:43 -0000
@@ -21,6 +21,12 @@
 PLUGINS_EXT=$(PLUGINS_EXT) saslOTP.dll
 !ENDIF
 
+!IF "$(SQL)" == "SQLITE"
+PLUGINS_EXT=$(PLUGINS_EXT) saslSQLITE.dll
+SQL_FLAGS= $(SQLITE_INCLUDES) /DHAVE_SQLITE=1
+SQLITE_LIBS = /libpath:$(SQLITE_LIBPATH) libsqlite.lib
+!ENDIF
+
 PLUGINS=saslANONYMOUS.dll \
 	saslPLAIN.dll \
 	saslCRAMMD5.dll \
@@ -71,6 +77,11 @@
 saslOTP_objs = otp.obj otp_init.obj $(common_objs)
 saslOTP_out = saslOTP.dll saslOTP.exp saslOTP.lib
 
+saslSQL_sources = sql.c sql_init.c $(common_sources)
+saslSQL_objs = sql.obj sql_init.obj $(common_objs)
+# saslSQL_out is an agregation of all generated files for all SQL plugins
+saslSQL_out = saslSQLITE.dll saslSQLITE.exp saslSQLITE.lib
+
 !IF "$(NTLM)" == "1" || "$(SRP)" == "1" || "$(OTP)" == "1"
 OPENSLL_FLAGS= /I $(OPENSSL_INCLUDE)
 !ELSE 
@@ -93,12 +104,12 @@
 saslSASLDB_objs = sasldb.obj sasldb_init.obj $(libsasldb_objs) $(common_objs)
 saslSASLDB_out = saslSASLDB.dll saslSASLDB.exp saslSASLDB.lib
 
-all_objs = $(saslANONYMOUS_objs) $(saslPLAIN_objs) $(saslCRAMMD5_objs) $(saslDIGESTMD5_objs) $(saslLOGIN_objs) $(saslNTLM_objs) $(saslGSSAPI_objs) $(saslSRP_objs) $(saslOTP_objs) $(saslSASLDB_objs)
-all_out = $(saslANONYMOUS_out) $(saslPLAIN_out) $(saslCRAMMD5_out) $(saslDIGESTMD5_out) $(saslLOGIN_out) $(saslNTLM_out) $(saslGSSAPI_out) $(saslSRP_out) $(saslOTP_out) $(saslSASLDB_out)
+all_objs = $(saslANONYMOUS_objs) $(saslPLAIN_objs) $(saslCRAMMD5_objs) $(saslDIGESTMD5_objs) $(saslLOGIN_objs) $(saslNTLM_objs) $(saslGSSAPI_objs) $(saslSRP_objs) $(saslOTP_objs) $(saslSASLDB_objs) $(saslSQL_objs)
+all_out = $(saslANONYMOUS_out) $(saslPLAIN_out) $(saslCRAMMD5_out) $(saslDIGESTMD5_out) $(saslLOGIN_out) $(saslNTLM_out) $(saslGSSAPI_out) $(saslSRP_out) $(saslOTP_out) $(saslSASLDB_out) $(saslSQL_out)
 
 # LIBSASL_EXPORTS is required to export additional DB routines from sasldb
 DB_FLAGS = /I $(DB_INCLUDE) /I "..\sasldb" /D "LIBSASL_EXPORTS"
-CPPFLAGS = /I "..\win32\include" /I "." /I "..\include" $(DB_FLAGS) $(OPENSLL_FLAGS) $(GSS_FLAGS) $(SRP_FLAGS) /D "WIN32" /D "_WIN32" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL"
+CPPFLAGS = /I "..\win32\include" /I "." /I "..\include" $(DB_FLAGS) $(OPENSLL_FLAGS) $(GSS_FLAGS) $(SRP_FLAGS) $(SQL_FLAGS) /D "WIN32" /D "_WIN32" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL"
 
 DB_LIBS=/libpath:$(DB_LIBPATH) $(DB_LIB)
 OPENSSL_LIBS=/libpath:$(OPENSSL_LIBPATH) libeay32.lib
@@ -178,6 +189,10 @@
 	$(LINK32DLL) @<< $(DB_LIBS) $(LINK32DLL_FLAGS) /out:"saslSASLDB.dll" /implib:"saslSASLDB.lib" $(saslSASLDB_objs) saslSASLDB.res
 <<
 
+saslSQLITE.dll: $(saslSQL_objs) saslSQLITE.res
+	$(LINK32DLL) @<< $(SQLITE_LIBS) $(LINK32DLL_FLAGS) /out:"saslSQLITE.dll" /implib:"saslSQLITE.lib" $(saslSQL_objs) saslSQLITE.res
+<<
+
 CLEAN :
 	-@erase $(all_objs)
 	-@erase "*.idb"
@@ -208,7 +223,7 @@
 .rc.res:
 	rc $<
 
-saslANONYMOUS.rc saslPLAIN.rc saslCRAMMD5.rc saslDIGESTMD5.rc saslLOGIN.rc saslNTLM.rc saslGSSAPI.rc saslSRP.rc saslOTP.rc saslSASLDB.rc:
+saslANONYMOUS.rc saslPLAIN.rc saslCRAMMD5.rc saslDIGESTMD5.rc saslLOGIN.rc saslNTLM.rc saslGSSAPI.rc saslSRP.rc saslOTP.rc saslSASLDB.rc saslSQLITE.rc:
 	copy <<temp.rc $@
 #include "afxres.h"
 
Index: plugins/sql.c
===================================================================
RCS file: /cvs/src/sasl/plugins/sql.c,v
retrieving revision 1.25
diff -u -r1.25 sql.c
--- plugins/sql.c	8 Jan 2004 15:30:26 -0000	1.25
+++ plugins/sql.c	10 May 2004 09:35:44 -0000
@@ -332,6 +332,129 @@
 }
 #endif /* HAVE_PGSQL */
 
+#ifdef HAVE_SQLITE
+#include <sqlite.h>
+
+static void *_sqlite_open(char *host, char *port, int usessl,
+			  const char *user, const char *password,
+			  const char *database, const sasl_utils_t *utils)
+{
+    int rc;
+    sqlite *db;
+    char *zErrMsg = NULL;
+
+    db = sqlite_open(database, 0, &zErrMsg);
+    if (db == NULL) {
+	utils->log(NULL, SASL_LOG_ERR, "sql plugin: %s", zErrMsg);
+	sqlite_freemem (zErrMsg);
+	return NULL;
+    }
+
+    rc = sqlite_exec(db, "PRAGMA empty_result_callbacks = ON", NULL, NULL, &zErrMsg);
+    if (rc != SQLITE_OK) {
+	utils->log(NULL, SASL_LOG_ERR, "sql plugin: %s", zErrMsg);
+	sqlite_freemem (zErrMsg);
+	sqlite_close(db);
+	return NULL;
+    }
+
+    return (void*)db;
+}
+
+static int _sqlite_escape_str(char *to, const char *from)
+{
+    char s;
+
+    while ( (s = *from++) != '\0' ) {
+	if (s == '\'' || s == '\\') {
+	    *to++ = '\\';
+	}
+	*to++ = s;
+    }
+    *to = '\0';
+
+    return 0;
+}
+
+static int sqlite_my_callback(void *pArg, int argc, char **argv,
+			      char **columnNames)
+{
+    char **result = (char**)pArg;
+
+    if (argv == NULL) {
+	*result = NULL;				/* no record */
+    } else if (argv[0] == NULL) {
+	*result = strdup(SQL_NULL_VALUE);	/* NULL IS SQL_NULL_VALUE */
+    } else {
+	*result = strdup(argv[0]);
+    }
+
+    return /*ABORT*/1;
+}
+
+static int _sqlite_exec(void *db, const char *cmd, char *value, size_t size,
+		        size_t *value_len, const sasl_utils_t *utils)
+{
+    int rc;
+    char *result = NULL;
+    char *zErrMsg = NULL;
+
+    rc = sqlite_exec((sqlite*)db, cmd, sqlite_my_callback, (void*)&result, &zErrMsg);
+    if (rc != SQLITE_OK && rc != SQLITE_ABORT) {
+	utils->log(NULL, SASL_LOG_DEBUG, "sql plugin: %s ", zErrMsg);
+	sqlite_freemem (zErrMsg);
+	return -1;
+    }
+
+    if (rc == SQLITE_OK) {
+	/* no results (BEGIN, COMMIT, DELETE, INSERT, UPDATE) */
+	return 0;
+    }
+
+    if (result == NULL) {
+	/* umm nothing found */
+	utils->log(NULL, SASL_LOG_NOTE, "sql plugin: no result found");
+	return -1;
+    }
+
+    /* XXX: Duplication cannot be found by this method. */
+
+    /* now get the result set value and value_len */
+    /* we only fetch one because we don't care about the rest */
+    if (value) {
+	strncpy(value, result, size - 2);
+	value[size - 1] = '\0';
+	if (value_len) {
+	    *value_len = strlen(value);
+	}
+    }
+
+    /* free result */
+    free(result);
+    return 0;
+}
+
+static int _sqlite_begin_txn(void *db, const sasl_utils_t *utils)
+{
+    return _sqlite_exec(db, "BEGIN TRANSACTION", NULL, 0, NULL, utils);
+}
+
+static int _sqlite_commit_txn(void *db, const sasl_utils_t *utils)
+{
+    return _sqlite_exec(db, "COMMIT TRANSACTION", NULL, 0, NULL, utils);
+}
+
+static int _sqlite_rollback_txn(void *db, const sasl_utils_t *utils)
+{
+    return _sqlite_exec(db, "ROLLBACK TRANSACTION", NULL, 0, NULL, utils);
+}
+
+static void _sqlite_close(void *db)
+{
+    sqlite_close((sqlite*)db);
+}
+#endif /* HAVE_SQLITE */
+
 static const sql_engine_t sql_engines[] = {
 #ifdef HAVE_MYSQL
     { "mysql", &_mysql_open, &_mysql_escape_str,
@@ -342,6 +465,11 @@
     { "pgsql", &_pgsql_open, &_pgsql_escape_str,
       &_pgsql_begin_txn, &_pgsql_commit_txn, &_pgsql_rollback_txn,
       &_pgsql_exec, &_pgsql_close },
+#endif
+#ifdef HAVE_SQLITE
+    { "sqlite", &_sqlite_open, &_sqlite_escape_str,
+      &_sqlite_begin_txn, &_sqlite_commit_txn, &_sqlite_rollback_txn,
+      &_sqlite_exec, &_sqlite_close },
 #endif
     { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }
 };
Index: win32/common.mak
===================================================================
RCS file: /cvs/src/sasl/win32/common.mak,v
retrieving revision 1.7
diff -u -r1.7 common.mak
--- win32/common.mak	9 Mar 2004 16:54:21 -0000	1.7
+++ win32/common.mak	10 May 2004 09:35:45 -0000
@@ -87,6 +87,20 @@
 !ENDIF
 !ENDIF
 
+!IF "$(SQLITE_INCLUDE)" == ""
+SQLITE_INCLUDES=/I"C:\work\open_source\sqllite\sqlite\src" /I"C:\work\open_source\sqllite\sqlite\win32"
+!IF "$(VERBOSE)" != "0"
+!MESSAGE Defaulting SQLITE_INCLUDES includes to $(SQLITE_INCLUDES).
+!ENDIF
+!ENDIF
+
+!IF "$(SQLITE_LIBPATH)" == ""
+SQLITE_LIBPATH="C:\work\open_source\sqllite\sqlite\objs"
+!IF "$(VERBOSE)" != "0"
+!MESSAGE Defaulting SQLITE library path to $(SQLITE_LIBPATH).
+!ENDIF
+!ENDIF
+
 !IF "$(OS)" == "Windows_NT"
 NULL=
 !ELSE 
