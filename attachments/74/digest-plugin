Index: digestmd5.c
===================================================================
RCS file: /afs/andrew.cmu.edu/system/cvs/src/sasl/plugins/digestmd5.c,v
retrieving revision 1.140
diff -u -u -r1.140 digestmd5.c
--- digestmd5.c	2002/09/03 15:11:57	1.140
+++ digestmd5.c	2002/09/12 19:54:17
@@ -1879,6 +1879,7 @@
     struct digest_cipher *cipher;
     unsigned       resplen;
     int added_conf = 0;
+    char maxbufstr[64];
     
     sparams->utils->log(sparams->utils->conn, SASL_LOG_DEBUG,
 			"DIGEST-MD5 server step 1");
@@ -1998,12 +1999,20 @@
      * once; if multiple instances are present, the client should abort the
      * authentication exchange.
      */
-    
+    snprintf(maxbufstr, sizeof(maxbufstr), "%d", sparams->props.maxbufsize);
+    if (add_to_challenge(sparams->utils,
+			 &text->out_buf, &text->out_buf_len, &resplen,
+			 "maxbuf", 
+			 (unsigned char *) maxbufstr, FALSE) != SASL_OK) {
+	SETERROR(sparams->utils, "internal error: add_to_challenge 5 failed");
+	return SASL_FAIL;
+    }
+
     if (add_to_challenge(sparams->utils,
 			 &text->out_buf, &text->out_buf_len, &resplen,
 			 "charset", 
 			 (unsigned char *) charset, FALSE) != SASL_OK) {
-	SETERROR(sparams->utils, "internal error: add_to_challenge 5 failed");
+	SETERROR(sparams->utils, "internal error: add_to_challenge 6 failed");
 	return SASL_FAIL;
     }
     
@@ -2023,7 +2032,7 @@
 			 &text->out_buf, &text->out_buf_len, &resplen,
 			 "algorithm",
 			 (unsigned char *) "md5-sess", FALSE)!=SASL_OK) {
-	SETERROR(sparams->utils, "internal error: add_to_challenge 6 failed");
+	SETERROR(sparams->utils, "internal error: add_to_challenge 7 failed");
 	return SASL_FAIL;
     }
     
@@ -2318,7 +2327,7 @@
     result = sparams->canon_user(sparams->utils->conn,
 				 username, 0, SASL_CU_AUTHID, oparams);
     if (result != SASL_OK) {
-	SETERROR(sparams->utils, "unable cannonify user and get auxprops");
+	SETERROR(sparams->utils, "unable canonify user and get auxprops");
 	goto FreeAllMem;
     }
     
@@ -2824,6 +2833,7 @@
     unsigned char  *digesturi = NULL;
     bool            IsUTF8 = FALSE;
     char           ncvalue[10];
+    char           maxbufstr[64];
     char           *response = NULL;
     unsigned        resplen = 0;
     int result;
@@ -2896,7 +2906,7 @@
 	result = SASL_FAIL;
 	goto FreeAllocatedMem;
     }
-    sprintf(ncvalue, "%08x", text->global->nonce_count);
+    snprintf(ncvalue, sizeof(ncvalue), "%08x", text->global->nonce_count);
     if (add_to_challenge(params->utils,
 			 &text->out_buf, &text->out_buf_len, &resplen,
 			 "nc", (unsigned char *) ncvalue, FALSE) != SASL_OK) {
@@ -2909,7 +2919,7 @@
 	result = SASL_FAIL;
 	goto FreeAllocatedMem;
     }
-    if (text->global->bestcipher != NULL)
+    if (text->global->bestcipher != NULL) {
 	if (add_to_challenge(params->utils,
 			     &text->out_buf, &text->out_buf_len, &resplen,
 			     "cipher", 
@@ -2918,6 +2928,15 @@
 	    result = SASL_FAIL;
 	    goto FreeAllocatedMem;
 	}
+    }
+    snprintf(maxbufstr, sizeof(maxbufstr), "%d", params->props.maxbufsize);
+    if (add_to_challenge(params->utils,
+                         &text->out_buf, &text->out_buf_len, &resplen,
+                         "maxbuf", (unsigned char *) maxbufstr, 
+                         FALSE) != SASL_OK) {
+        SETERROR(params->utils, "internal error: add_to_challenge maxbuf failed");
+        goto FreeAllocatedMem;
+    }
     
     if (IsUTF8) {
 	if (add_to_challenge(params->utils,
@@ -3592,7 +3611,8 @@
 
     *clientoutlen = strlen(text->out_buf);
     *clientout = text->out_buf;
-    
+
+    /* xxx needs to be protected by a mutex */
     /* setup for a potential reauth */
     _plug_strdup(params->utils, oparams->authid,
 		 (char **) &text->global->authid, NULL);
