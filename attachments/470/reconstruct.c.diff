--- reconstruct.c~	2006-10-16 11:27:24.000000000 -0400
+++ reconstruct.c	2006-10-16 11:33:44.000000000 -0400
@@ -94,6 +94,7 @@
 #include "retry.h"
 #include "convert_code.h"
 #include "util.h"
+#include "sync_log.h"
 
 extern int optind;
 extern char *optarg;
@@ -102,6 +103,13 @@
     char *name;
     struct discovered *next;
 };       
+struct uniqmailid {
+    char * uniqmbxid;
+    char *uniqname;
+    struct uniqmailid *uniqnext;
+};
+
+struct uniqmailid *uniqmid_head;
 
 /* current namespace */
 static struct namespace recon_namespace;
@@ -114,10 +122,15 @@
 int do_reconstruct(char *name, int matchlen, int maycreate, void *rock);
 int reconstruct(char *name, struct discovered *l);
 void usage(void);
+char * getmailname (char * mailboxname);
+struct uniqmailid * add_uniqid (char * mailboxname, char * mailboxid);
+struct uniqmailid * find_uniqid (char * mailboxname, char * mailboxid);
 
 extern cyrus_acl_canonproc_t mboxlist_ensureOwnerRights;
 
 int code = 0;
+int keepflag = 0;
+int syncflag = 0;
 
 int main(int argc, char **argv)
 {
@@ -141,12 +154,16 @@
     assert(INDEX_HEADER_SIZE == (OFFSET_SPARE4+4));
     assert(INDEX_RECORD_SIZE == (OFFSET_MODSEQ+4));
 
-    while ((opt = getopt(argc, argv, "C:p:rmfx")) != EOF) {
+    while ((opt = getopt(argc, argv, "C:kp:rmfsx")) != EOF) {
 	switch (opt) {
 	case 'C': /* alt config file */
 	    alt_config = optarg;
 	    break;
 
+	case 'k':
+	    keepflag = 1;
+	    break;
+
 	case 'p':
 	    start_part = optarg;
 	    break;
@@ -163,6 +180,10 @@
 	    fflag = 1;
 	    break;
 
+	case 's':
+	    syncflag = 1;
+	    break;
+	    
 	case 'x':
 	    xflag = 1;
 	    break;
@@ -180,6 +201,8 @@
 	syslog(LOG_ERR, error_message(r));
 	fatal(error_message(r), EC_CONFIG);
     }
+    if (syncflag)
+	sync_log_init();
 
     if(start_part) {
     	/* Get partition's path */
@@ -352,7 +375,7 @@
 void usage(void)
 {
     fprintf(stderr,
-	    "usage: reconstruct [-C <alt_config>] [-p partition] [-rfx] mailbox...\n");
+	    "usage: reconstruct [-C <alt_config>] [-p partition] [-ksrfx] mailbox...\n");
     fprintf(stderr, "       reconstruct [-C <alt_config>] -m\n");
     exit(EC_USAGE);
 }    
@@ -404,6 +427,264 @@
     return 0;
 }
 
+int 
+reconstruct_expunge (char * path, struct mailbox * mailbox, 
+			unsigned long **expuid, int *expuid_num)
+{
+    char fnamebuf[MAX_MAILBOX_PATH+1];
+    char newfnamebuf[MAX_MAILBOX_PATH+1];
+    struct stat sbuf;
+
+    char buf[((INDEX_HEADER_SIZE > INDEX_RECORD_SIZE) ?
+             INDEX_HEADER_SIZE : INDEX_RECORD_SIZE)];
+
+    int expunge_fd;
+    FILE *fexpunge;
+
+    const char *index_base = NULL;
+    unsigned long index_len = 0;	/* mapped size */
+    int format;
+    int  minor_version;
+    unsigned long start_offset;
+    unsigned long record_size;
+    unsigned long  exists;
+
+    unsigned long uid;
+    char msgfname[MAILBOX_FNAME_LEN+1];
+
+    unsigned msgno;
+    const char *p;
+    int   n;
+
+    unsigned long *expuid_array = NULL;
+    int expuid_idx = 0;
+    int expuid_alloc = 0;
+    int expmsg;
+
+    *expuid = NULL;
+    *expuid_num = 0;
+
+    /* Open and validate the cyrus.expunge file */
+
+    strlcpy(fnamebuf, path, sizeof(fnamebuf));
+    strlcat(fnamebuf, FNAME_EXPUNGE_INDEX, sizeof(fnamebuf));
+
+    if (stat(fnamebuf, &sbuf) == -1 ||
+	sbuf.st_size <= OFFSET_LEAKED_CACHE ||
+	(expunge_fd = open(fnamebuf, O_RDONLY, 0666)) == -1) {
+	unlink(fnamebuf);
+        return (0);
+    } 
+
+    /* Map the file */
+    map_refresh(expunge_fd, 1, &index_base,
+		    &index_len, sbuf.st_size, "expunge", mailbox->name);
+
+    format = ntohl(*((bit32 *)(index_base+OFFSET_FORMAT)));
+    minor_version = ntohl(*((bit32 *)(index_base+OFFSET_MINOR_VERSION)));
+    start_offset = ntohl(*((bit32 *)(index_base+OFFSET_START_OFFSET)));
+    record_size = ntohl(*((bit32 *)(index_base+OFFSET_RECORD_SIZE)));
+    exists = ntohl(*((bit32 *)(index_base+OFFSET_EXISTS)));
+
+    /* Sanity check the header as best we can */
+    if ((format != 0)        || (exists == 0) ||  
+	(minor_version == 0) || (minor_version > MAILBOX_MINOR_VERSION) || 
+	(start_offset == 0)  ||  (start_offset > INDEX_HEADER_SIZE) ||
+	(record_size  == 0)  || (record_size > INDEX_RECORD_SIZE) ||
+	(sbuf.st_size < (start_offset + exists * record_size))) {
+
+	syslog(LOG_ERR, "Unable to verify header - deleting: %s", fnamebuf);
+	close (expunge_fd);
+	map_free(&index_base, &index_len);
+	unlink(fnamebuf);
+	return (0);
+    }
+
+    /* 
+     * verify the message files exist - 
+     * optionally deleting message files 
+     */
+    p = index_base + start_offset;
+    for (msgno = 1; msgno <= exists; msgno++, p += record_size) {
+	uid = ntohl(*((bit32 *)(p + OFFSET_UID)));
+
+	/* Sanity check UID */
+	if (uid == 0) {
+	    syslog(LOG_ERR, "IOERROR: %s zero expunge record %u/%lu",
+			   fnamebuf, msgno, exists);
+	    break;
+	}
+	mailbox_message_get_fname(mailbox, uid, msgfname, sizeof(msgfname));
+
+	if (keepflag == 0) {
+	    unlink(msgfname);
+	    continue;
+	}
+
+	if ( (stat (msgfname, &sbuf)) != 0) {
+	    syslog (LOG_ERR, "IOERROR: %m while stat\'ing message %s", msgfname);
+	    continue;
+	}
+	if (sbuf.st_size == 0) {
+	    /* Zero-length message file--blow it away */
+	    unlink(msgfname);
+	    continue;
+        }
+
+	if (expuid_idx == expuid_alloc) {
+	    expuid_alloc += UIDGROW;
+	    expuid_array = (unsigned long *) xrealloc((char *)*expuid,
+	    			expuid_alloc * sizeof(unsigned long));
+	}
+	expuid_array[expuid_idx] = uid;
+	expuid_idx++;
+    }
+    *expuid = expuid_array;
+    *expuid_num = expuid_idx;
+
+    if (keepflag == 0) {
+	map_free(&index_base, &index_len);
+	close (expunge_fd);
+	unlink(fnamebuf);
+	return (0);
+    }
+
+    /*
+     * If the number of message files in the old expunge file
+     * is not equal to what we just counted,
+     * we'll rewrite the expunge file.
+     * If we found no message files -- blow away cyrus.expunge
+     */
+    if (exists == expuid_idx) {
+	close(expunge_fd);
+	map_free(&index_base, &index_len);
+    } else if ( expuid_idx == 0) {
+	close(expunge_fd);
+	map_free(&index_base, &index_len);
+	unlink (fnamebuf);
+    } else {
+	/* we must rewrite the cyrus.expunge file */
+
+	strcpy (newfnamebuf, fnamebuf);
+	strcat (newfnamebuf,  ".NEW");
+	fexpunge = fopen(newfnamebuf, "w+");
+	if (fexpunge == NULL) {
+	    syslog (LOG_ERR, "IOERROR: %m while creating: %s", newfnamebuf);
+	    close(expunge_fd);
+	    map_free(&index_base, &index_len);
+	    free(expuid);
+	    return IMAP_IOERROR;
+   	}
+	unsigned msgno;
+	const char *p = index_base + start_offset;
+
+	/* 
+	* verify the message files exist - 
+	* optionally deleting message files 
+	*/
+	for (msgno = 1; msgno <= exists; msgno++, p += record_size) {
+	    unsigned long fileuid = ntohl(*((bit32 *)(p + OFFSET_UID)));
+
+	    for (expmsg = 0; expmsg < expuid_idx; expmsg++) {
+		if (fileuid == expuid_array [expmsg]) {
+
+		    n = fwrite(buf, 1, INDEX_RECORD_SIZE, fexpunge);
+		    if (n != INDEX_RECORD_SIZE) {
+	    		syslog (LOG_ERR, 
+		"IOERROR: %m writing cyrus.expunge record: %s", newfnamebuf);
+			close(expunge_fd);
+			map_free(&index_base, &index_len);
+			free(expuid);
+			fclose(fexpunge);
+			
+			return IMAP_IOERROR;
+		    }
+		    break;
+		}
+	    }
+	}
+	rewind (fexpunge);
+	*((bit32 *)(buf+OFFSET_EXISTS)) = htonl(*expuid_num);	
+	n = fwrite(buf, 1, INDEX_HEADER_SIZE, fexpunge);
+	if (n != INDEX_HEADER_SIZE || ferror(fexpunge) ) {
+	    syslog (LOG_ERR, "IOERROR: %m writing expunge header: %s", newfnamebuf);
+	    close(expunge_fd);
+	    map_free(&index_base, &index_len);
+	    free(expuid);
+	    fclose(fexpunge);
+	    return IMAP_IOERROR;
+	}
+
+	close(expunge_fd);
+	map_free(&index_base, &index_len);
+	unlink(fnamebuf);
+	fchmod (fileno (fexpunge), 
+		S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH |S_IWOTH);
+	fclose(fexpunge);
+	if (rename(newfnamebuf, fnamebuf)) {
+	    free(expuid);
+            return IMAP_IOERROR;
+	}
+    }
+    
+    if (expuid_idx > 0) {
+	qsort((char *)expuid_array, expuid_idx, sizeof(expuid_array), compare_uid);
+    }
+
+    return (0);
+}	
+
+char * 
+getmailname (char * mailboxname) 
+{
+    static char   namebuf[MAX_MAILBOX_PATH + 1];
+    static int    namebuflen;
+
+    char * pname;
+
+    strlcpy (namebuf, mailboxname, sizeof (namebuf));
+    pname = strchr (namebuf, '.');
+    if (pname) {
+	pname = strchr(pname + 1, '.');
+	if (pname)
+	    *pname = '\0';
+    }
+    return (namebuf);
+}
+
+struct uniqmailid * 
+find_uniqid ( char * mailboxname, char * mailboxid) 
+{
+    struct uniqmailid *puniq;
+    char * nameptr;
+    
+    nameptr = getmailname (mailboxname);
+    for (puniq = uniqmid_head; puniq != NULL; puniq = puniq->uniqnext) {
+	if  (strcmp (puniq->uniqmbxid, mailboxid) == 0) {
+	    if (strcmp (puniq->uniqname, nameptr) == 0) {
+		return (puniq);
+	    }
+	}
+    }
+    return NULL;
+}
+struct uniqmailid * 
+add_uniqid ( char * mailboxname, char * mailboxid)
+{
+    struct uniqmailid *puniq;
+    char *pboxname;
+
+    pboxname = getmailname (mailboxname);
+
+    puniq = xmalloc (sizeof (struct uniqmailid));
+    puniq->uniqmbxid = xstrdup(mailboxid);
+    puniq->uniqname = xstrdup(pboxname);
+    
+    puniq->uniqnext = uniqmid_head;
+    uniqmid_head = puniq;
+
+    return (puniq);
+}
 /*
  * Reconstruct the single mailbox named 'name'
  */
@@ -432,6 +713,10 @@
     unsigned long *uid;
     int uid_num, uid_alloc;
 
+    unsigned long *expuid;
+    int expuid_num;
+    int expmsg;
+
     int msg, old_msg = 0;
     int new_exists = 0, 
 	new_answered = 0,
@@ -451,7 +736,8 @@
     int mytype;
     char mbpath[MAX_MAILBOX_PATH+1], *path;
     
-    int expunge_fd = -1;
+    int expunge_found;
+    char unique_buf[32];
 
     /* Start by looking up current data in mailbox list */
     r = mboxlist_detail(name, &mytype, &mypath, &mympath,
@@ -576,64 +862,11 @@
     fwrite(buf, 1, INDEX_HEADER_SIZE, newindex);
     retry_write(newcache_fd, buf, sizeof(bit32));
 
-    /* Remove any previously expunged messages */
-    /* XXX  For two-phase we will need to keep the messages referenced
-       in cyrus.expunge and refresh its header and offsets */
-    path = (mailbox.mpath &&
-	    (config_metapartition_files &
-	     IMAP_ENUM_METAPARTITION_FILES_EXPUNGE)) ?
-	mailbox.mpath : mailbox.path;
-    strlcpy(fnamebuf, path, sizeof(fnamebuf));
-    strlcat(fnamebuf, FNAME_EXPUNGE_INDEX, sizeof(fnamebuf));
-    if (stat(fnamebuf, &sbuf) != -1 &&
-	sbuf.st_size > OFFSET_LEAKED_CACHE &&
-	(expunge_fd = open(fnamebuf, O_RDONLY, 0666)) != -1) {
-	const char *index_base = NULL;
-	unsigned long index_len = 0;	/* mapped size */
-	int format, minor_version;
-	unsigned long start_offset, record_size, exists;
-
-	/* Map the file */
-	map_refresh(expunge_fd, 1, &index_base,
-		    &index_len, sbuf.st_size, "expunge", mailbox.name);
-
-	format = ntohl(*((bit32 *)(index_base+OFFSET_FORMAT)));
-	minor_version = ntohl(*((bit32 *)(index_base+OFFSET_MINOR_VERSION)));
-	start_offset = ntohl(*((bit32 *)(index_base+OFFSET_START_OFFSET)));
-	record_size = ntohl(*((bit32 *)(index_base+OFFSET_RECORD_SIZE)));
-	exists = ntohl(*((bit32 *)(index_base+OFFSET_EXISTS)));
-
-	/* Sanity check the header as best we can */
-	if (format == 0 && exists &&
-	    minor_version && minor_version <= MAILBOX_MINOR_VERSION &&
-	    start_offset && start_offset <= INDEX_HEADER_SIZE &&
-	    record_size && record_size <= INDEX_RECORD_SIZE &&
-	    sbuf.st_size >= (start_offset + exists * record_size)) {
-	    unsigned msgno;
-	    const char *p = index_base + start_offset;
-
-	    /* Delete message files */
-	    for (msgno = 1; msgno <= exists; msgno++, p += record_size) {
-		unsigned long uid = ntohl(*((bit32 *)(p + OFFSET_UID)));
-		char msgfname[MAILBOX_FNAME_LEN+1];
-
-		/* Sanity check UID */
-		if (uid == 0) {
-		    syslog(LOG_ERR, "IOERROR: %s zero expunge record %u/%lu",
-			   mailbox.name, msgno, exists);
-		    break;
-		}
-
-		mailbox_message_get_fname(&mailbox, uid,
-					  msgfname, sizeof(msgfname));
-		unlink(msgfname);
-	    }
-	}
-
-	map_free(&index_base, &index_len);
-	close(expunge_fd);
+    if (reconstruct_expunge ( path,  &mailbox, &expuid, &expuid_num) != 0) {
+	fclose(newindex);
+	mailbox_close(&mailbox);
+	return IMAP_IOERROR;
     }
-    unlink(fnamebuf);
 
     /* Find all message files in directory */
     uid = (unsigned long *) xmalloc(UIDGROW * sizeof(unsigned long));
@@ -647,29 +880,29 @@
 	mailbox_close(&mailbox);
 	free(uid);
 	return IMAP_IOERROR;
-    } else {
+    } 
 	while ((dirent = readdir(dirp))!=NULL) {
-	    if (!isdigit((int) (dirent->d_name[0])) || dirent->d_name[0] ==
-		'0')
+	if (!isdigit((int) (dirent->d_name[0])) || dirent->d_name[0] == '0')
 		continue;
-	    if (uid_num == uid_alloc) {
-		uid_alloc += UIDGROW;
-		uid = (unsigned long *)
-		    xrealloc((char *)uid, uid_alloc * sizeof(unsigned long));
-	    }
-	    uid[uid_num] = 0;
 	    p = dirent->d_name;
+	msg = 0;
 	    while (isdigit((int) *p)) {
-		uid[uid_num] = uid[uid_num] * 10 + *p++ - '0';
+	    msg = msg * 10 + *p++ - '0';
 	    }
 	    if (*p++ != '.') continue;
 	    if (*p) continue;
 	    
+	if (uid_num == uid_alloc) {
+	    uid_alloc += UIDGROW;
+	    uid = (unsigned long *)
+		 xrealloc((char *)uid, uid_alloc * sizeof(unsigned long));
+	}
+	uid[uid_num] = msg;
 	    uid_num++;
 	}
 	closedir(dirp);
+
 	qsort((char *)uid, uid_num, sizeof(*uid), compare_uid);
-    }
 
     /* Put each message file in the new index/cache */
     old_msg = 0;
@@ -703,6 +936,20 @@
 	    continue;
 	}
 
+        /* Check if this message is on the expunge list */
+        expunge_found = 0;
+        for (expmsg = 0; expmsg < expuid_num; expmsg++) {
+            if (uid[msg] == expuid [expmsg]) {
+                expunge_found = 1;
+                break;
+            }
+            if (uid[msg] > expuid [expmsg]) {
+                break;
+            }
+        }
+        if ( expunge_found == 0 ) {
+            
+
 	/* Find old index record, if it exists */
 	while (old_msg < mailbox.exists && old_index.uid < uid[msg]) {
 	    if (mailbox_read_index_record(&mailbox, ++old_msg, &old_index)) {
@@ -737,22 +984,28 @@
 	    /* If we are recovering a message, reset MODSEQ */
 	    message_index.modseq = 1;
 	}
+
 	message_index.last_updated = time(0);
 	if (message_index.modseq > mailbox.highestmodseq) {
 	    mailbox.highestmodseq = message_index.modseq;
 	}
 	
+	}	
 	if (((r = message_parse_file(msgfile, NULL, NULL, &body)) != 0) ||
 	    ((r = message_create_record(&mailbox, &message_index, body)) != 0)) {
 	    fclose(msgfile);
 	    fclose(newindex);
 	    mailbox_close(&mailbox);
 	    free(uid);
+	    if (expuid_num) { 
+		free(expuid);
+	    }
 	    return r;
 	}
 	fclose(msgfile);
 	if (body) message_free_body(body);
 	
+	if (expunge_found == 0) {	
 	/* Write out new entry in index file */
 	mailbox_index_record_to_buf(&message_index, buf);
 
@@ -761,15 +1014,21 @@
 	    fclose(newindex);
 	    mailbox_close(&mailbox);
 	    free(uid);
+		if (expuid_num) { 
+		    free(expuid);
+		}
 	    return IMAP_IOERROR;
 	}
-
 	new_exists++;
 	if (message_index.system_flags & FLAG_ANSWERED) new_answered++;
 	if (message_index.system_flags & FLAG_FLAGGED) new_flagged++;
 	if (message_index.system_flags & FLAG_DELETED) new_deleted++;
 	new_quota += message_index.size;
     }
+    }
+    if (expuid_num) {
+	free (expuid);
+    }
 
     if (body) free(body);
     
@@ -835,15 +1094,27 @@
 
     /* validate uniqueid */
     if (!mailbox.uniqueid) {
-	char buf[32];
 
 	/* this may change uniqueid, but if it does, nothing we can do
            about it */
-	mailbox_make_uniqueid(mailbox.name, mailbox.uidvalidity, buf,
-			      sizeof(buf));
-	mailbox.uniqueid = xstrdup(buf);
+	mailbox_make_uniqueid(mailbox.name, mailbox.uidvalidity, unique_buf,
+			      sizeof(unique_buf));
+	mailbox.uniqueid = xstrdup(unique_buf);
+    } else {
+	if (find_uniqid (mailbox.name, mailbox.uniqueid) != NULL ) {
+    
+	    mailbox_make_uniqueid(mailbox.name, mailbox.uidvalidity, unique_buf,
+			      sizeof(unique_buf));
+	    free (mailbox.uniqueid);
+	    mailbox.uniqueid = xstrdup(unique_buf);
+	}
+    }
+    if (add_uniqid (mailbox.name,  mailbox.uniqueid) == NULL) {
+	syslog (LOG_ERR, "Failed adding mailbox: %s unique id: %s\n",
+			 mailbox.name, mailbox.uniqueid );
     }
     
+    
     /* Write header */
     r = mailbox_write_header(&mailbox);
     if (r) {
@@ -881,6 +1152,10 @@
     
     fclose(newindex);
     r = seen_reconstruct(&mailbox, (time_t)0, (time_t)0, (int (*)())0, (void *)0);
+    if (syncflag) {
+	sync_log_mailbox(mailbox.name);
+    }
+
     mailbox_close(&mailbox);
 
     if (found) {
@@ -1021,7 +1296,7 @@
 	*acl++ = '\0';
 
 	cyrus_acl_set(&newacl, identifier, ACL_MODE_SET,
-		      cyrus_acl_strtomask(rights), aclcanonproc,
+		      cyrus_acl_strtomask(rights, 0), aclcanonproc,
 		      (void *)owner);
     }
 
