Index: master.c
===================================================================
RCS file: /afs/andrew.cmu.edu/system/cvs/src/cyrus/master/master.c,v
retrieving revision 1.85.2.15
diff -u -r1.85.2.15 master.c
--- master.c	6 Apr 2005 20:37:00 -0000	1.85.2.15
+++ master.c	13 Apr 2005 15:48:30 -0000
@@ -165,6 +165,8 @@
 static struct centry *ctable[child_table_size];
 static struct centry *cfreelist;
 
+static int child_mourning_time = 2;    /* Time in seconds to remember child
+					  after processing SIGCHLD */
 static int janitor_frequency = 1;	/* Janitor sweeps per second */
 static int janitor_position;		/* Entry to begin at in next sweep */
 static struct timeval janitor_mark;	/* Last time janitor did a sweep */
@@ -939,16 +941,16 @@
 		}
 	    }
 	    c->service_state = SERVICE_STATE_DEAD;
-	    c->janitor_deadline = time(NULL) + 2;
+	    c->janitor_deadline = time(NULL) + child_mourning_time;
 	} else {
 	    /* weird. Are we multithreaded now? we don't know this child */
 	    syslog(LOG_WARNING,
-		   "receiving signals from unregistered child %d. Handling it anyway",
+		   "notified of death of unregistered child %d. Handling it anyway",
 		   pid);
 	    c = get_centry();
 	    c->pid = pid;
 	    c->service_state = SERVICE_STATE_DEAD;
-	    c->janitor_deadline = time(NULL) + 2;
+	    c->janitor_deadline = time(NULL) + child_mourning_time;
 	    c->si = SERVICE_NONE;
 	    c->next = ctable[pid % child_table_size];
 	    ctable[pid % child_table_size] = c;
@@ -1103,6 +1105,36 @@
     }
 }
 
+/*
+ * Receives a message from a service.
+ *
+ * Returns zero if all goes well
+ * 1 if no msg available
+ * 2 if bad message received (incorrectly sized)
+ * -1 on error (errno set)
+ */
+int read_msg(int fd, struct notify_message *msg)
+{
+    ssize_t r;
+    size_t off = 0;
+    int s = sizeof(struct notify_message);
+    
+    while (s > 0) {
+	do
+	    r = read(fd, msg + off, s);
+	while ((r == -1) && (errno == EINTR));
+	if (r <= 0) break;
+	s -= r;
+	off += r;
+    }
+    if ( ((r == 0) && (off == 0)) ||
+	 ((r == -1) && (errno == EAGAIN)) )
+	return 1;
+    if (r == -1) return -1;
+    if (s != 0) return 2;
+    return 0;
+}
+
 void process_msg(const int si, struct notify_message *msg) 
 {
     struct centry *c;
@@ -1675,9 +1707,9 @@
     p = getenv("CYRUS_VERBOSE");
     if (p) verbose = atoi(p) + 1;
 #ifdef HAVE_NETSNMP
-    while ((opt = getopt(argc, argv, "C:M:p:l:Ddj:P:x:")) != EOF) {
+    while ((opt = getopt(argc, argv, "C:M:p:l:Ddj:P:x:J:")) != EOF) {
 #else
-    while ((opt = getopt(argc, argv, "C:M:p:l:Ddj:")) != EOF) {
+    while ((opt = getopt(argc, argv, "C:M:p:l:Ddj:J:")) != EOF) {
 #endif
 	switch (opt) {
 	case 'C': /* alt imapd.conf file */
@@ -1710,7 +1742,15 @@
 	    /* Janitor frequency */
 	    janitor_frequency = atoi(optarg);
 	    if(janitor_frequency < 1)
-		fatal("The janitor period must be at least 1 second", EX_CONFIG);
+		fatal("The janitor frequency must be at least once per second",
+		      EX_CONFIG);
+	    break;
+	case 'J':
+	    /* Janitor delay before cleanup of a child */
+	    child_mourning_time = atoi(optarg);
+	    if(child_mourning_time < 1)
+		fatal("The janitor's mourning time interval must be at least 1 second", 
+		      EX_CONFIG);
 	    break;   
 #ifdef HAVE_NETSNMP
 	case 'P': /* snmp AgentXPingInterval */
@@ -2094,13 +2134,19 @@
 	    int j;
 
 	    if (FD_ISSET(x, &rfds)) {
-		r = read(x, &msg, sizeof(msg));
-		if (r != sizeof(msg)) {
-		    syslog(LOG_ERR, "got incorrectly sized response from child: %x", i);
+		while ((r = read_msg(x, &msg)) == 0)
+		    process_msg(&Services[i], &msg);
+		
+		if (r == 2) {
+		    syslog(LOG_ERR, 
+			   "got incorrectly sized response from child: %x", i);
+		    continue;
+		}
+		if (r < 0) {
+		    syslog(LOG_ERR,
+			   "error while receiving message from child %x: %m", i);
 		    continue;
 		}
-		
-		process_msg(i, &msg);
 	    }
 
 	    if (Services[i].exec &&
