From ro@TechFak.Uni-Bielefeld.DE Wed Mar 12 15:20:31 2003
Date: Wed, 12 Mar 2003 20:25:56 +0100 (MET)
From: Rainer Orth <ro@TechFak.Uni-Bielefeld.DE>
To: cyrus-bugs@andrew.cmu.edu
Subject: PATCH: Support Sun SEAM in Cyrus SASL 2.1.12

The following patch allows to use Sun's GSS-API implementation (SEAM:
http://wwws.sun.com/software/security/kerberos/) to support the gssapiv2
plugin in Cyrus SASL 2.1.12.  I tested it on Solaris 8 and 9/SPARC with two
applications:

* the sample-client and sample-server, a dedicated sample service and
  private service keytab specified via the KRB5_KTNAME environment variable

* using cyradm to authenticate to Cyrus IMAP 2.1.12.

The patch consists of three parts:

* It adds a new GSS-API implementation type (seam) to cmulocal/sasl2.m4 by
  checking for gss_unwrap in -lgss alone.

* It only enables krb5 support in saslauthd if <krb5.h> is really present.
  Sun doesn't expose the Kerberos API/Headers, so compilation of
  auth_krb5.c fails although GSS-API support with the Kerberos V5 mechanism
  is present.

* It works around two bugs in Sun's GSS-API implementation:

** gss_import_name rejects an input_name_type of GSS_C_NULL_OID with
   GSS_S_CALL_INACCESSIBLE_READ.  I chose to use GSS_C_NT_USER_NAME
   instead, which seems correct in this case.

** The mech_krb5 implementation of gss_init_sec_context returns
   GSS_S_DEFECTIVE_TOKEN if invoked with an empty buffer the first time
   through.  It is simple to use GSS_C_NO_BUFFER in this situation.

After applying the patch, several files need to be regenerated by
re-running the various autotools.  I haven't mentioned the specifics since
this should be taken care of by make.

There is only one problem left: Sun's libgss supports several different
mechanisms, described in /etc/gss/mech.  While plugins for their
diffie_hellman_640_0 and diffie_hellman_1024_0 mechanisms are present, they
are not configured here and there's no way to specify a mechanism for the
gssapiv2 plugin.  I had to comment out the unsupported mechanims to get 
sample-client/sample-server to work.  There should be a way to configure
this in the sasl configuration.

Another issue worth noticing is the wording of gssapiv2 error messages: it
is close to impossible to identify which function failed.  This gave me a
hard time trying to locate the two Sun bugs above.  It would help very much
to include the failing function in the messages.

	Rainer

-----------------------------------------------------------------------------
Rainer Orth, Faculty of Technology, Bielefeld University


Wed Mar 12 18:21:42 2003  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>

	* plugins/gssapi.c (gssapi_server_mech_step): Use
	GSS_C_NT_USER_NAME to work around Solaris 8/9 libgss bug.
	(gssapi_client_mech_step): Pass GSS_C_NO_BUFFER to first
	invocation of gss_init_sec_context to work around Solaris 8/9
	mech_krb5 bug.

	* cmulocal/sasl2.m4 (SASL_GSSAPI_CHK): Check for Sun SEAM GSS-API
	implementation.

	saslauthd:
	* configure.in (AC_CHECK_HEADERS): Check for krb5.h.
	(AUTH_KRB5): Don't define if gssapi is present.
	
	* mechanisms.h: Test for HAVE_KRB5_H instead of HAVE_GSSAPI_H to
	activate AUTH_KRB5.

===================================================================
RCS file: cmulocal/RCS/sasl2.m4,v
retrieving revision 1.1
diff -up -r1.1 cmulocal/sasl2.m4
--- cmulocal/sasl2.m4	2003/02/03 17:09:08	1.1
+++ cmulocal/sasl2.m4	2003/03/12 18:17:50
@@ -18,8 +18,9 @@ AC_DEFUN(SASL_GSSAPI_CHK,[
 
  if test "$gssapi" != no; then
   dnl We need to find out which gssapi implementation we are
-  dnl using. Supported alternatives are: MIT Kerberos 5 and
-  dnl Heimdal Kerberos 5 (http://www.pdc.kth.se/heimdal)
+  dnl using. Supported alternatives are: MIT Kerberos 5,
+  dnl Heimdal Kerberos 5 (http://www.pdc.kth.se/heimdal),
+  dnl and Sun SEAM (http://wwws.sun.com/software/security/kerberos/)
   dnl
   dnl The choice is reflected in GSSAPIBASE_LIBS
   dnl we might need libdb
@@ -42,9 +43,14 @@ AC_DEFUN(SASL_GSSAPI_CHK,[
      gssapi_dir="/usr/local/lib"
   fi
 
-  # Check a full link against the heimdal libraries.  If this fails, assume
-  # MIT.
-  AC_CHECK_LIB(gssapi,gss_unwrap,gss_impl="heimdal",,$GSSAPIBASE_LIBS -lgssapi -lkrb5 -lasn1 -lroken ${LIB_CRYPT} -lcom_err)
+  # Check a full link against the Solaris 8 and up libgss.
+  # If this fails, check a full link against the heimdal libraries.
+  # If this fails, assume MIT.
+  AC_CHECK_LIB(gss,gss_unwrap,gss_impl="seam",,-lgss)
+
+  if test "$gss_impl" = "mit"; then
+    AC_CHECK_LIB(gssapi,gss_unwrap,gss_impl="heimdal",,$GSSAPIBASE_LIBS -lgssapi -lkrb5 -lasn1 -lroken ${LIB_CRYPT} -lcom_err)
+  fi
 
   if test "$gss_impl" = "mit"; then
      GSSAPIBASE_LIBS="$GSSAPIBASE_LIBS -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err"
@@ -52,6 +58,10 @@ AC_DEFUN(SASL_GSSAPI_CHK,[
   elif test "$gss_impl" = "heimdal"; then
      GSSAPIBASE_LIBS="$GSSAPIBASE_LIBS -lgssapi -lkrb5 -lasn1 -lroken ${LIB_CRYPT} -lcom_err"
      GSSAPIBASE_STATIC_LIBS="$GSSAPIBASE_STATIC_LIBS $gssapi_dir/libgssapi.a $gssapi_dir/libkrb5.a $gssapi_dir/libasn1.a $gssapi_dir/libroken.a $gssapi_dir/libcom_err.a ${LIB_CRYPT}"
+  elif test "$gss_impl" = "seam"; then
+     GSSAPIBASE_LIBS=-lgss
+     # there is no static libgss on Solaris 8 and up
+     GSSAPIBASE_STATIC_LIBS=none
   else
      gssapi="no"
      AC_WARN(Disabling GSSAPI)
===================================================================
RCS file: plugins/RCS/gssapi.c,v
retrieving revision 1.1
diff -up -r1.1 plugins/gssapi.c
--- plugins/gssapi.c	2002/09/19 18:37:10	1.1
+++ plugins/gssapi.c	2003/03/06 17:09:20
@@ -767,7 +767,7 @@ gssapi_server_mech_step(void *conn_conte
 	    
 	    maj_stat = gss_import_name (&min_stat,
 					&name_without_realm,
-					GSS_C_NULL_OID,
+					GSS_C_NT_USER_NAME,
 					&without);
 	    
 	    if (GSS_ERROR(maj_stat)) {
@@ -1223,6 +1223,9 @@ static int gssapi_client_mech_step(void 
 	    }
 	}
 	    
+	if (serverinlen == 0)
+	    input_token = GSS_C_NO_BUFFER;
+
 	if (serverinlen) {
 	    real_input_token.value = (void *)serverin;
 	    real_input_token.length = serverinlen;
===================================================================
RCS file: saslauthd/RCS/configure.in,v
retrieving revision 1.1
diff -up -r1.1 saslauthd/configure.in
--- saslauthd/configure.in	2003/02/03 18:37:46	1.1
+++ saslauthd/configure.in	2003/03/12 17:25:41
@@ -41,7 +41,6 @@ SASL_KERBEROS_V4_CHK
 SASL_GSSAPI_CHK
 
 if test "$gssapi" != no; then
-	AC_DEFINE(AUTH_KRB5)
 	if test "$gss_impl" = "heimdal"; then
 	    AC_DEFINE(KRB5_HEIMDAL)
 	fi
@@ -142,7 +141,7 @@ dnl Checks for header files.
 AC_HEADER_STDC
 AC_HEADER_SYS_WAIT
 AC_HEADER_TIME
-AC_CHECK_HEADERS(crypt.h fcntl.h strings.h syslog.h unistd.h sys/time.h sys/uio.h)
+AC_CHECK_HEADERS(crypt.h fcntl.h krb5.h strings.h syslog.h unistd.h sys/time.h sys/uio.h)
 
 dnl Checks for typedefs, structures, and compiler characteristics.
 AC_C_CONST  
===================================================================
RCS file: saslauthd/RCS/mechanisms.h,v
retrieving revision 1.1
diff -up -r1.1 saslauthd/mechanisms.h
--- saslauthd/mechanisms.h	2002/05/03 18:59:30	1.1
+++ saslauthd/mechanisms.h	2003/03/12 17:21:34
@@ -49,7 +49,7 @@ extern authmech_t *authmech;		/* auth me
  * Figure out which optional drivers we support.
  */
 #ifndef AUTH_KRB5
-# if defined(HAVE_GSSAPI_H)
+# if defined(HAVE_KRB5_H)
 #  define AUTH_KRB5
 # endif
 #endif

