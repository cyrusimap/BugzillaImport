Index: lib/auth_pts.c
===================================================================
RCS file: /cvs/src/cyrus/lib/auth_pts.c,v
retrieving revision 1.6
diff -u -r1.6 auth_pts.c
--- lib/auth_pts.c	15 Dec 2003 22:42:38 -0000	1.6
+++ lib/auth_pts.c	17 Feb 2004 19:05:55 -0000
@@ -110,8 +110,10 @@
     
     /* is it a group i'm a member of ? */
     for (i=0; i < auth_state->ngroups; i++)
-        if (idhash == auth_state->groups[i].hash &&
-	    !strcmp(identifier, auth_state->groups[i].id))
+        if ( idhash == auth_state->groups[i].hash &&
+	        (( !strncmp(identifier, "group:", 6) && 
+                !strcmp(identifier+6, auth_state->groups[i].id) ) ||
+             !strcmp(identifier, auth_state->groups[i].id)) )
             return 2;
   
     return 0;
@@ -275,8 +277,12 @@
         goto done;
     }
         
-    strcpy(fnamebuf, config_dir);
-    strcat(fnamebuf, PTS_DBSOCKET);
+    if (libcyrus_config_getstring(CYRUSOPT_PTLOADER_SOCK))
+        strcpy(fnamebuf, libcyrus_config_getstring(CYRUSOPT_PTLOADER_SOCK));
+    else {
+        strcpy(fnamebuf, config_dir);
+        strcat(fnamebuf, PTS_DBSOCKET);
+    }
 
     memset((char *)&srvaddr, 0, sizeof(srvaddr));
     srvaddr.sun_family = AF_UNIX;
Index: lib/imapoptions
===================================================================
RCS file: /cvs/src/cyrus/lib/imapoptions,v
retrieving revision 1.13
diff -u -r1.13 imapoptions
--- lib/imapoptions	20 Jan 2004 01:11:03 -0000	1.13
+++ lib/imapoptions	17 Feb 2004 19:09:00 -0000
@@ -229,41 +229,152 @@
 { "implicit_owner_rights", "lca", STRING }
 /* The implicit Access Control List (ACL) for the owner of a mailbox. */
 
-{ "ldap_base", NULL, STRING }
+{ "ldap_authz", NULL, STRING }
+/* SASL authorization ID for the LDAP server */
+
+{ "ldap_base", "", STRING }
 /* Contains the LDAP base dn for the LDAP ptloader module */
 
-{ "ldap_filter", NULL, STRING }
-/* Contains the ldap filter to use when looking up the user id.  The occurance
-   of any %u in the string will be replaced with the canonicalized user id */
+{ "ldap_bind_dn", NULL, STRING }
+/* Bind DN for the connection to the LDAP server (simple bind).
+   Do not use for anonymous simple binds */
 
-{ "ldap_servers", NULL, STRING }
-/* Contains a list of the URLs of all the LDAP servers when using the
-   LDAP PTS module. */
+{ "ldap_deref", "never", STRINGLIST("search", "find", "always", "never") }
+/* Specify how aliases dereferencing is handled during search. */
+
+{ "ldap_filter", "(uid=%u)", STRING }
+/* Specify a filter that searches user identifiers.  The following tokens can be
+   used in the filter string:
+
+   %%   = %
+   %u   = user
+   %U   = user portion of %u (%U = test when %u = test@domain.tld)
+   %d   = domain portion of %u if available (%d = domain.tld when %u =
+          %test@domain.tld), otherwise same as %r
+   %D   = user dn.  (use when ldap_member_method: filter)
+   %1-9 = domain tokens (%1 = tld, %2 = domain when %d = domain.tld)
+
+   ldap_filter is not used when ldap_sasl is enabled. */
+
+{ "ldap_group_base", "", STRING }
+/* LDAP base dn for ldap_group_filter. */
+
+{ "ldap_group_filter", "(cn=%u)", STRING }
+/* Specify a filter that searches for group identifiers.
+   See ldap_filter for more options. */ 
+
+{ "ldap_group_scope", "sub", STRINGLIST("sub", "one", "base") }
+/* Specify search scope for ldap_group_filter. */
+
+{ "ldap_id", NULL, STRING }
+/* SASL authentication ID for the LDAP server */
+
+{ "ldap_mech", NULL, STRING }
+/* SASL mechanism for LDAP authentication */
+
+{ "ldap_member_attribute", NULL, STRING }
+/* See ldap_member_method. */
+
+{ "ldap_member_base", "", STRING }
+/* LDAP base dn for ldap_member_filter. */
+
+{ "ldap_member_filter", "(member=%D)", STRING }
+/* Specify a filter for "ldap_member_method: filter".  
+   See ldap_filter for more options. */ 
+
+{ "ldap_member_method", "attribute", STRINGLIST("attribute", "filter") }
+/* Specify a group method.  The "attribute" method retrieves groups from 
+   a multi-valued attributed specified in ldap_member_attribute.  
+   The "filter" method uses a filter, ldap_member_filter, to find groups; 
+   ldap_member_attribute is a single-value attribute group name. */
+
+{ "ldap_member_scope", "sub", STRINGLIST("sub", "one", "base") }
+/* Specify search scope for ldap_member_filter. */
+
+{ "ldap_password", NULL, STRING }
+/* Password for the connection to the LDAP server (SASL and simple bind).  
+   Do not use for anonymous simple binds */
+
+{ "ldap_realm", NULL, STRING }
+/* SASL realm for LDAP authentication */
+
+{ "ldap_referrals", 0, SWITCH }
+/* Specify whether or not the client should follow referrals. */
+
+{ "ldap_restart", 1, SWITCH }
+/* Specify whether or not LDAP I/O operations are automatically restarted
+   if they abort prematurely. */
 
 { "ldap_sasl", 1, SWITCH }
 /* Use SASL for LDAP binds in the LDAP PTS module. */
 
 { "ldap_sasl_authc", NULL, STRING }
-/* Force the use of a particular SASL authentication ID for the LDAP server */
+/* Depricated.  Use ldap_id */
 
 { "ldap_sasl_authz", NULL, STRING }
-/* Force the use of a particular SASL authorization ID for the LDAP server */
+/* Depricated.  Use ldap_authz */
 
 { "ldap_sasl_mech", NULL, STRING }
-/* Force the use of a particular SASL mechanism for LDAP authentication */
+/* Depricated.  Use ldap_mech */
 
 { "ldap_sasl_password", NULL, STRING }
-/* Password for the LDAP SASL mechanism (if needed) */
+/* Depricated.  User ldap_password */
 
 { "ldap_sasl_realm", NULL, STRING }
-/* Force the use of a particular SASL realm for LDAP authentication */
+/* Depricated.  Use ldap_realm */
+
+{ "ldap_scope", "sub", STRINGLIST("sub", "one", "base") }
+/* Specify search scope. */
+
+{ "ldap_servers", "ldap://localhost/", STRING }
+/* Depricated.  Use ldap_uri */
+
+{ "ldap_size_limit", 1, INT }
+/* Specify a number of entries for a search request to return. */
+
+{ "ldap_start_tls", 0, SWITCH }
+/* Use StartTLS extended operation.  Do not use ldaps: ldap_uri when
+   this option is enabled. */
+
+{ "ldap_time_limit", 5, INT }
+/* Specify a number of seconds for a search request to complete. */
+
+{ "ldap_timeout", 5, INT }
+/* Specify a number of seconds a search can take before timing out. */
+
+{ "ldap_tls_cacert_dir", NULL, STRING }
+/* Path to directory with CA (Certificate Authority) certificates. */
+
+{ "ldap_tls_cacert_file", NULL, STRING }
+/* File containing CA (Certificate Authority) certificate(s). */
 
-{ "ldap_member_attribute", "memberOf", STRING }
-/* The multi-valued attribute name for an entity that lists its groups. */
+{ "ldap_tls_cert", NULL, STRING }
+/* File containing the client certificate. */
+
+{ "ldap_tls_check_peer", 0, SWITCH }
+/* Require and verify server certificate.  If this option is yes,
+   you must specify ldap_tls_cacert_file or ldap_tls_cacert_dir. */
+
+{ "ldap_tls_ciphers", NULL, STRING }
+/* List of SSL/TLS ciphers to allow.  The format of the string is
+   described in ciphers(1). */
+
+{ "ldap_tls_key", NULL, STRING }
+/* File containing the private client key. */
+
+{ "ldap_uri", NULL, STRING }
+/* Contains a list of the URLs of all the LDAP servers when using the
+   LDAP PTS module. */
+
+{ "ldap_version", 3, INT }
+/* Specify the LDAP protocol version.  If ldap_start_tls and/or
+   ldap_use_sasl are enabled, ldap_version will be automatiacally
+   set to 3. */
 
 { "lmtp_downcase_rcpt", 0, SWITCH }
 /* If enabled, lmtpd will convert the recipient address to lowercase
    (up to a '+' character, if present). */
+
 { "lmtp_over_quota_perm_failure", 0, SWITCH }
 /* If enabled, lmtpd returns a permanent failure code when a user's
    mailbox is over quota.  By default, the failure is temporary,
@@ -469,6 +580,9 @@
 /* A list of users and groups that are allowed to proxy for other
    users, seperated by spaces.  Any user listed in this will be
    allowed to login for any other user: use with caution. */ 
+
+{ "ptloader_sock", "/ptclient/ptsock", STRING }
+/* Unix domain socket that ptloader listens on. */
 
 { "ptscache_db", "berkeley", STRINGLIST("berkeley", "skiplist")}
 /* The cyrusdb backend to use for the pts cache. */
Index: lib/libcyr_cfg.c
===================================================================
RCS file: /cvs/src/cyrus/lib/libcyr_cfg.c,v
retrieving revision 1.4
diff -u -r1.4 libcyr_cfg.c
--- lib/libcyr_cfg.c	20 Jan 2004 01:11:03 -0000	1.4
+++ lib/libcyr_cfg.c	17 Feb 2004 19:11:37 -0000
@@ -91,6 +91,10 @@
       (union cyrus_config_value)((const char *)"berkeley"),
       CYRUS_OPT_STRING },
 
+    { CYRUSOPT_PTLOADER_SOCK,
+      (union cyrus_config_value)((const char *)"/ptclient/ptsock"),
+      CYRUS_OPT_STRING },
+
     { CYRUSOPT_VIRTDOMAINS,
       (union cyrus_config_value)((int)0),
       CYRUS_OPT_SWITCH },
Index: lib/libcyr_cfg.h
===================================================================
RCS file: /cvs/src/cyrus/lib/libcyr_cfg.h,v
retrieving revision 1.4
diff -u -r1.4 libcyr_cfg.h
--- lib/libcyr_cfg.h	20 Jan 2004 01:11:04 -0000	1.4
+++ lib/libcyr_cfg.h	17 Feb 2004 19:11:42 -0000
@@ -87,6 +87,8 @@
     CYRUSOPT_FULLDIRHASH,
     /* Database for use by AUTH_PTS */
     CYRUSOPT_PTSCACHE_DB,
+    /* ptloader socket for use by AUTH_PTS */
+    CYRUSOPT_PTLOADER_SOCK,
     /* Virtual Domains (OFF) */
     CYRUSOPT_VIRTDOMAINS,
 
