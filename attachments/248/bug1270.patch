---------------------
PatchSet 5626
Date: 2004/01/22 21:17:07
Author: ken3
Log:
fixed bug #1270.  don't lock the mailbox until we have the message staged

Members: 
	imap/append.c:1.103->1.104 
	imap/append.h:1.25->1.26 
	imap/imapd.c:1.450->1.451 
	imap/lmtpd.c:1.126->1.127 
	imap/mailbox.c:1.152->1.153 
	imap/mailbox.h:1.80->1.81 
	imap/nntpd.c:1.11->1.12 
	imap/seen_local.c:1.41->1.42 

Index: imap/append.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/append.c,v
retrieving revision 1.103
retrieving revision 1.104
diff -u -u -r1.103 -r1.104
--- imap/append.c	20 Jan 2004 01:10:55 -0000	1.103
+++ imap/append.c	22 Jan 2004 21:17:07 -0000	1.104
@@ -1,5 +1,5 @@
 /* append.c -- Routines for appending messages to a mailbox
- * $Id: append.c,v 1.103 2004/01/20 01:10:55 ken3 Exp $
+ * $Id: append.c,v 1.104 2004/01/22 21:17:07 ken3 Exp $
  *
  * Copyright (c)1998, 2000 Carnegie Mellon University.  All rights reserved.
  *
@@ -204,11 +204,13 @@
 	return r;
     }
 
-    r = quota_read(&as->m.quota, NULL, 0);
+    as->tid = NULL;
+    r = quota_read(&as->m.quota, &as->tid, 1);
     if (!r) {
 	if (as->m.quota.limit >= 0 && quotacheck >= 0 &&
 	    as->m.quota.used + quotacheck > 
 	    ((unsigned) as->m.quota.limit * QUOTA_UNITS)) {
+	    quota_abort(&as->tid);
 	    mailbox_close(&as->m);
 	    r = IMAP_QUOTA_EXCEEDED;
 	}
@@ -249,7 +251,6 @@
 		  unsigned long *num)
 {
     int r = 0;
-    struct txn *tid = NULL;
     
     if (as->s == APPEND_DONE) return 0;
 
@@ -304,23 +305,12 @@
 	return r;
     }
 
-    /* Write out quota file */
-    r = quota_read(&as->m.quota, &tid, 1);
-    if (!r) {
-	if (as->m.quota.limit >= 0 && quotacheck >= 0 &&
-	    as->m.quota.used + quotacheck > 
-	    ((unsigned) as->m.quota.limit * QUOTA_UNITS)) {
-	    quota_abort(&tid);
-	    append_abort(as);
-	    return IMAP_QUOTA_EXCEEDED;
-	}
-
-	as->m.quota.used += as->quota_used;
-	r = quota_write(&as->m.quota, &tid);
-	if (!r) quota_commit(&tid);
-    }
-    else if (r == IMAP_QUOTAROOT_NONEXISTENT) r = 0;
-    if (r) {
+    /* Write out updated quota usage */
+    as->m.quota.used += as->quota_used;
+    r = quota_write(&as->m.quota, &as->tid);
+    if (!r) quota_commit(&as->tid);
+    else {
+	quota_abort(&as->tid);
 	syslog(LOG_ERR,
 	       "LOSTQUOTA: unable to record use of %u bytes in quota file %s",
 	       as->quota_used, as->m.quota.root);
@@ -375,6 +365,9 @@
     mailbox_unlock_header(&as->m);
     mailbox_close(&as->m);
 
+    /* unlock quota */
+    quota_abort(&as->tid);
+
     if (as->seen_msgrange) {
 	free(as->seen_msgrange);
     }
@@ -400,7 +393,7 @@
  * so it can double as the spool file
  */
 FILE *append_newstage(const char *mailboxname, time_t internaldate,
-		      struct stagemsg **stagep)
+		      int msgnum, struct stagemsg **stagep)
 {
     struct stagemsg *stage;
     char stagedir[MAX_MAILBOX_PATH+1], stagefile[MAX_MAILBOX_PATH+1];
@@ -414,8 +407,8 @@
     stage->parts = xzmalloc(5 * (MAX_MAILBOX_PATH+1) * sizeof(char));
     stage->partend = stage->parts + 5 * (MAX_MAILBOX_PATH+1) * sizeof(char);
 
-    snprintf(stage->fname, sizeof(stage->fname), "%d-%d",
-	     (int) getpid(), (int) internaldate);
+    snprintf(stage->fname, sizeof(stage->fname), "%d-%d-%d",
+	     (int) getpid(), (int) internaldate, msgnum);
 
     r = mboxlist_findstage(mailboxname, stagedir, sizeof(stagedir));
     if (r) {
@@ -458,10 +451,8 @@
  * is multiple partitions.
  */
 int append_fromstage(struct appendstate *as,
-		     struct protstream *messagefile,
-		     unsigned long size, time_t internaldate,
-		     const char **flag, int nflags,
-		     struct stagemsg *stage)
+		     struct stagemsg *stage, time_t internaldate,
+		     const char **flag, int nflags, int nolink)
 {
     struct mailbox *mailbox = &as->m;
     struct index_record message_index;
@@ -477,7 +468,6 @@
 
     assert(stage != NULL && stage->parts[0] != '\0');
     assert(mailbox->format == MAILBOX_FORMAT_NORMAL);
-    assert(size != 0);
 
     zero_index(message_index);
 
@@ -507,7 +497,7 @@
 	   make sure not to overwrite stage->partend */
 
 	/* create the new staging file from the first stage part */
-	r = mailbox_copyfile(stage->parts, stagefile);
+	r = mailbox_copyfile(stage->parts, stagefile, 0);
 	if (r) {
 	    /* maybe the directory doesn't exist? */
 	    char stagedir[MAX_MAILBOX_PATH+1];
@@ -520,7 +510,7 @@
 	    } else {
 		syslog(LOG_NOTICE, "created stage directory %s",
 		       stagedir);
-		r = mailbox_copyfile(stage->parts, stagefile);
+		r = mailbox_copyfile(stage->parts, stagefile, 0);
 	    }
 	}
 	if (r) {
@@ -563,7 +553,7 @@
 			      fname + strlen(fname),
 			      sizeof(fname) - strlen(fname));
 
-    r = mailbox_copyfile(p, fname);
+    r = mailbox_copyfile(p, fname, nolink);
     destfile = fopen(fname, "r");
     if (!r && destfile) {
 	/* ok, we've successfully created the file */
@@ -852,7 +842,7 @@
 	    mailbox_message_get_fname(mailbox, copymsg[msg].uid, fnamebuf,
 				      sizeof(fnamebuf));
 	    /* Link/copy message file */
-	    r = mailbox_copyfile(fnamebuf, fname);
+	    r = mailbox_copyfile(fnamebuf, fname, 0);
 	    if (r) goto fail;
 
 	    /* Write out cache info, copy other info */
Index: imap/append.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/append.h,v
retrieving revision 1.25
retrieving revision 1.26
diff -u -u -r1.25 -r1.26
--- imap/append.h	20 Jan 2004 01:10:55 -0000	1.25
+++ imap/append.h	22 Jan 2004 21:17:07 -0000	1.26
@@ -1,5 +1,5 @@
 /* append.h -- Description of messages to be copied 
- * $Id: append.h,v 1.25 2004/01/20 01:10:55 ken3 Exp $ 
+ * $Id: append.h,v 1.26 2004/01/22 21:17:07 ken3 Exp $ 
  *
  * Copyright (c) 1998, 2000 Carnegie Mellon University.  All rights reserved.
  *
@@ -90,6 +90,9 @@
 
     /* the amount of quota we've used so far in this append */
     int quota_used;
+
+    /* txn for updating quota */
+    struct txn *tid;
 };
 
 /* add helper function to determine uid range appended? */
@@ -117,14 +120,12 @@
 
 /* creates a new stage and returns stage file corresponding to mailboxname */
 extern FILE *append_newstage(const char *mailboxname, time_t internaldate,
-			     struct stagemsg **stagep);
+			     int msgnum, struct stagemsg **stagep);
 
 /* adds a new mailbox to the stage initially created by append_newstage() */
 extern int append_fromstage(struct appendstate *mailbox,
-			    struct protstream *messagefile,
-			    unsigned long size, time_t internaldate,
-			    const char **flag, int nflags,
-			    struct stagemsg *stage);
+			    struct stagemsg *stage, time_t internaldate,
+			    const char **flag, int nflags, int nolink);
 
 /* removes the stage (frees memory, deletes the staging files) */
 extern int append_removestage(struct stagemsg *stage);
Index: imap/imapd.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/imapd.c,v
retrieving revision 1.450
retrieving revision 1.451
diff -u -u -r1.450 -r1.451
--- imap/imapd.c	20 Jan 2004 01:10:56 -0000	1.450
+++ imap/imapd.c	22 Jan 2004 21:17:07 -0000	1.451
@@ -38,7 +38,7 @@
  * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
-/* $Id: imapd.c,v 1.450 2004/01/20 01:10:56 ken3 Exp $ */
+/* $Id: imapd.c,v 1.451 2004/01/22 21:17:07 ken3 Exp $ */
 
 #include <config.h>
 
@@ -2150,23 +2150,26 @@
     int nflags = 0, flagalloc = 0;
     static struct buf arg;
     char *p;
-    time_t internaldate;
-    unsigned size = 0;
+    time_t internaldate, now = time(NULL);
+    unsigned size, totalsize = 0;
     int sawdigit = 0;
     int isnowait = 0;
-    int r;
+    int r, i;
     char mailboxname[MAX_MAILBOX_NAME+1];
     struct appendstate mailbox;
     unsigned long uidvalidity;
-    unsigned long firstuid, num;
+    unsigned long firstuid, num = 0;
     const char *parseerr = NULL;
+    FILE *f;
+    int numalloc = 5;
+    struct stagemsg **stage = xmalloc(numalloc * sizeof(struct stagemsg *));
 
-    /* Set up the append */
+    /* See if we can append */
     r = (*imapd_namespace.mboxname_tointernal)(&imapd_namespace, name,
 					       imapd_userid, mailboxname);
     if (!r) {
-	r = append_setup(&mailbox, mailboxname, MAILBOX_FORMAT_NORMAL,
-			 imapd_userid, imapd_authstate, ACL_INSERT, size);
+	r = append_check(mailboxname, MAILBOX_FORMAT_NORMAL,
+			 imapd_authstate, ACL_INSERT, totalsize);
     }
     if (r) {
 	eatline(imapd_in, ' ');
@@ -2287,10 +2290,22 @@
 	    prot_flush(imapd_out);
 	}
 	
-	/* Perform the rest of the append */
-	if (!r) r = append_fromstream(&mailbox, imapd_in, size, internaldate, 
-				      (const char **) flag, nflags);
-
+	/* Stage the message */
+	if (num == numalloc) {
+	    numalloc *= 2;
+	    stage = xrealloc(stage, numalloc * sizeof(struct stagemsg *));
+	}
+	stage[num] = NULL;
+	f = append_newstage(mailboxname, now, num, &stage[num]);
+	if (f) {
+	    num++;
+	    totalsize += size;
+	    r = message_copy_strict(imapd_in, f, size);
+	    fclose(f);
+	} else {
+	    r = IMAP_IOERROR;
+	}
+	
 	/* if we see a SP, we're trying to append more than one message */
 
 	/* Parse newline terminating command */
@@ -2310,11 +2325,27 @@
 	}
     }
 
+    /* Append from the stage(s) */
     if (!r) {
-	r = append_commit(&mailbox, size, &uidvalidity, &firstuid, &num);
-    } else {
-	append_abort(&mailbox);
+	r = append_setup(&mailbox, mailboxname, MAILBOX_FORMAT_NORMAL,
+			 imapd_userid, imapd_authstate, ACL_INSERT, totalsize);
+	for (i = 0; !r && i < num; i++) {
+	    r = append_fromstage(&mailbox, stage[i], internaldate, 
+				 (const char **) flag, nflags, 0);
+	}
+
+	if (!r) {
+	    r = append_commit(&mailbox, totalsize, &uidvalidity, &firstuid, &num);
+	} else {
+	    append_abort(&mailbox);
+	}
+    }
+
+    /* Cleanup the stage(s) */
+    for (i = 0; i < num; i++) {
+	append_removestage(stage[i]);
     }
+    free(stage);
 
     if (imapd_mailbox) {
 	index_check(imapd_mailbox, 0, 0);
Index: imap/lmtpd.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/lmtpd.c,v
retrieving revision 1.126
retrieving revision 1.127
diff -u -u -r1.126 -r1.127
--- imap/lmtpd.c	20 Jan 2004 01:10:58 -0000	1.126
+++ imap/lmtpd.c	22 Jan 2004 21:17:08 -0000	1.127
@@ -1,6 +1,6 @@
 /* lmtpd.c -- Program to deliver mail to a mailbox
  *
- * $Id: lmtpd.c,v 1.126 2004/01/20 01:10:58 ken3 Exp $
+ * $Id: lmtpd.c,v 1.127 2004/01/22 21:17:08 ken3 Exp $
  * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -1073,13 +1073,8 @@
 
     if (!r) {
 	prot_rewind(msg);
-	if (stage) {
-	    r = append_fromstage(&as, msg, size, now, 
-				 (const char **) flag, nflags, stage);
-	} else {
-	    r = append_fromstream(&as, msg, size, now, 
-				  (const char **) flag, nflags);
-	}
+	r = append_fromstage(&as, stage, now,
+			     (const char **) flag, nflags, !singleinstance);
 	if (!r) append_commit(&as, quotaoverride ? -1 : 0, NULL, &uid, NULL);
 	else append_abort(&as);
     }
@@ -1398,17 +1393,19 @@
 
 FILE *spoolfile(message_data_t *msgdata)
 {
-    /* if we have a single recipient OR are using single-instance store,
-     * spool to the stage of the first recipient
-     */
-    if ((msg_getnumrcpt(msgdata) == 1) || singleinstance) {
+    int i, n;
+    time_t now = time(NULL);
+    FILE *f = NULL;
+
+    /* spool to the stage of one of the recipients */
+    n = msg_getnumrcpt(msgdata);
+    for (i = 0; !f && (i < n); i++) {
 	int r = 0;
 	char *rcpt, *plus, *user = NULL, *domain = NULL;
 	char namebuf[MAX_MAILBOX_PATH+1], mailboxname[MAX_MAILBOX_PATH+1];
-	time_t now = time(NULL);
 
 	/* build the mailboxname from the recipient address */
-	user = rcpt = xstrdup(msg_getrcpt(msgdata, 0));
+	user = rcpt = xstrdup(msg_getrcpt(msgdata, i));
 	if (config_virtdomains && (domain = strchr(rcpt, '@'))) {
 	    *domain = '\0';
 	}
@@ -1460,19 +1457,15 @@
 	free(rcpt);
 
 	if (!r) {
-	    FILE *f;
 	    struct stagemsg *stage = NULL;
 
 	    /* setup stage for later use by deliver() */
-	    f = append_newstage(mailboxname, now, &stage);
+	    f = append_newstage(mailboxname, now, 0, &stage);
 	    msg_setrock(msgdata, (void*) stage);
-
-	    return f;
 	}
     }
 
-    /* spool to /tmp (no single-instance store) */
-    return tmpfile();
+    return f;
 }
 
 void removespool(message_data_t *msgdata)
Index: imap/mailbox.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/mailbox.c,v
retrieving revision 1.152
retrieving revision 1.153
diff -u -u -r1.152 -r1.153
--- imap/mailbox.c	20 Jan 2004 01:10:58 -0000	1.152
+++ imap/mailbox.c	22 Jan 2004 21:17:09 -0000	1.153
@@ -1,5 +1,5 @@
 /* mailbox.c -- Mailbox manipulation routines
- * $Id: mailbox.c,v 1.152 2004/01/20 01:10:58 ken3 Exp $
+ * $Id: mailbox.c,v 1.153 2004/01/22 21:17:09 ken3 Exp $
  * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -2297,13 +2297,13 @@
     strlcpy(newfnametail, FNAME_INDEX, sizeof(newfname) - newfname_len);
     unlink(newfname);		/* Make link() possible */
 
-    r = mailbox_copyfile(oldfname, newfname);
+    r = mailbox_copyfile(oldfname, newfname, 0);
 
     strlcpy(oldfnametail, FNAME_CACHE, sizeof(oldfname) - oldfname_len);
     strlcpy(newfnametail, FNAME_CACHE, sizeof(newfname) - newfname_len);
     unlink(newfname);
 
-    if (!r) r = mailbox_copyfile(oldfname, newfname);
+    if (!r) r = mailbox_copyfile(oldfname, newfname, 0);
     if (r) {
 	mailbox_close(newmailbox);
 	return r;
@@ -2333,7 +2333,7 @@
 
 	strcpy(newfnametail, oldfnametail);
 
-	r = mailbox_copyfile(oldfname, newfname);
+	r = mailbox_copyfile(oldfname, newfname, 0);
 	if (r) break;
     }
     if (!r) r = seen_copy(oldmailbox, newmailbox);
@@ -2524,7 +2524,7 @@
 				      oldfnametail,
 				      sizeof(oldfname) - strlen(oldfname));
 	    strcpy(newfnametail, oldfnametail);
-	    r = mailbox_copyfile(oldfname, newfname);
+	    r = mailbox_copyfile(oldfname, newfname, 0);
 	    if (r) break;
 	}
     }
@@ -2555,7 +2555,7 @@
 	        sizeof(newfname) - (newfname_len - 1));
 
 	unlink(newfname);		/* Make link() possible */
-	r = mailbox_copyfile(oldfname, newfname);
+	r = mailbox_copyfile(oldfname, newfname, 0);
 
 	fn_len = strlen(FNAME_CACHE);
 	if((oldfname_len - 1) + fn_len > sizeof(oldfname))
@@ -2577,7 +2577,7 @@
 	        sizeof(newfname) - (newfname_len - 1));
 
 	unlink(newfname);
-	if (!r) r = mailbox_copyfile(oldfname, newfname);
+	if (!r) r = mailbox_copyfile(oldfname, newfname, 0);
 
 	if (r) {
 	    mailbox_close(&newmailbox);
@@ -2644,9 +2644,7 @@
 /*
  * Copy (or link) the file 'from' to the file 'to'
  */
-int mailbox_copyfile(from, to)
-const char *from;
-const char *to;
+int mailbox_copyfile(const char *from, const char *to, int nolink)
 {
     int srcfd, destfd;
     struct stat sbuf;
@@ -2654,13 +2652,15 @@
     unsigned long src_size = 0;
     int n;
 
-    if (link(from, to) == 0) return 0;
-    if (errno == EEXIST) {
-	if (unlink(to) == -1) {
-	    syslog(LOG_ERR, "IOERROR: unlinking to recreate %s: %m", to);
-	    return IMAP_IOERROR;
-	}
+    if (!nolink) {
 	if (link(from, to) == 0) return 0;
+	if (errno == EEXIST) {
+	    if (unlink(to) == -1) {
+		syslog(LOG_ERR, "IOERROR: unlinking to recreate %s: %m", to);
+		return IMAP_IOERROR;
+	    }
+	    if (link(from, to) == 0) return 0;
+	}
     }
     
     destfd = open(to, O_RDWR|O_TRUNC|O_CREAT, 0666);
Index: imap/mailbox.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/mailbox.h,v
retrieving revision 1.80
retrieving revision 1.81
diff -u -u -r1.80 -r1.81
--- imap/mailbox.h	20 Jan 2004 01:11:00 -0000	1.80
+++ imap/mailbox.h	22 Jan 2004 21:17:09 -0000	1.81
@@ -1,5 +1,5 @@
 /* mailbox.h -- Mailbox format definitions
- * $Id: mailbox.h,v 1.80 2004/01/20 01:11:00 ken3 Exp $
+ * $Id: mailbox.h,v 1.81 2004/01/22 21:17:09 ken3 Exp $
  *
  * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.
  *
@@ -319,7 +319,7 @@
 			bit32 *olduidvalidityp, bit32 *newuidvalidtyp,
 			struct mailbox *mailboxp);
 
-extern int mailbox_copyfile(const char *from, const char *to);
+extern int mailbox_copyfile(const char *from, const char *to, int nolink);
 extern void mailbox_hash_mbox(char *buf, size_t buf_len,
 			      const char *root, const char *name);
 
Index: imap/nntpd.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/nntpd.c,v
retrieving revision 1.11
retrieving revision 1.12
diff -u -u -r1.11 -r1.12
--- imap/nntpd.c	20 Jan 2004 01:11:01 -0000	1.11
+++ imap/nntpd.c	22 Jan 2004 21:17:09 -0000	1.12
@@ -38,7 +38,7 @@
  * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
  * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  *
- * $Id: nntpd.c,v 1.11 2004/01/20 01:11:01 ken3 Exp $
+ * $Id: nntpd.c,v 1.12 2004/01/22 21:17:09 ken3 Exp $
  */
 
 /*
@@ -2872,9 +2872,10 @@
 {
     struct stat sbuf;
     const char **body;
-    int r;
+    int r, i;
     time_t now = time(NULL);
     static int post_count = 0;
+    FILE *stagef = NULL;
 
     /* fill the cache */
     r = spool_fill_hdrcache(nntp_in, f, m->hdrcache);
@@ -2975,38 +2976,43 @@
 	}
     }
 
-    /* if we have a single recipient OR are using single-instance store,
-     * spool to the stage of the first recipient
-     */
-    if (m->rcpt_num == 1 || singleinstance) {
-	FILE *stagef;
+    fflush(f);
+    if (ferror(f)) {
+	return IMAP_IOERROR;
+    }
+
+    if (fstat(fileno(f), &sbuf) == -1) {
+	return IMAP_IOERROR;
+    }
+
+    /* spool to the stage of one of the recipients */
+    for (i = 0; !stagef && (i < m->rcpt_num); i++) {
+	stagef = append_newstage(m->rcpt[i], now, 0, &m->stage);
+    }
+
+    if (stagef) {
 	const char *base = 0;
 	unsigned long size = 0;
 	int n;
 
-	fflush(f);
-	/* make sure everything is happy before we start */
-	if (!ferror(f) && !fstat(fileno(f), &sbuf) &&
-	    (stagef = append_newstage(m->rcpt[0], now, &m->stage))) {
-
-	    /* copy the header from our tmpfile to the stage */
-	    map_refresh(fileno(f), 1, &base, &size, sbuf.st_size, "tmp", 0);
-	    n = retry_write(fileno(stagef), base, size);
-	    map_free(&base, &size);
-
-	    if (n == -1) {
-		/* close and remove the stage */
-		fclose(stagef);
-		append_removestage(m->stage);
-		m->stage = NULL;
-	    }
-	    else {
-		/* close the tmpfile and use the stage */
-		fclose(f);
-		f = stagef;
-	    }
+	/* copy the header from our tmpfile to the stage */
+	map_refresh(fileno(f), 1, &base, &size, sbuf.st_size, "tmp", 0);
+	n = retry_write(fileno(stagef), base, size);
+	map_free(&base, &size);
+
+	if (n == -1) {
+	    /* close and remove the stage */
+	    fclose(stagef);
+	    append_removestage(m->stage);
+	    return IMAP_IOERROR;
+	}
+	else {
+	    /* close the tmpfile and use the stage */
+	    fclose(f);
+	    f = stagef;
 	}
     }
+    /* else this is probably a remote group, so use the tmpfile */
 
     r = spool_copy_msg(nntp_in, f);
 
@@ -3111,12 +3117,14 @@
 
 	    if (!r) {
 		prot_rewind(msg->data);
-		if (msg->stage)
-		    r = append_fromstage(&as, msg->data, msg->size, now,
-					  (const char **) NULL, 0, msg->stage);
-		else
+		if (msg->stage) {
+		    r = append_fromstage(&as, msg->stage, now,
+					 (const char **) NULL, 0, !singleinstance);
+		} else {
+		    /* XXX should never get here */
 		    r = append_fromstream(&as, msg->data, msg->size, now,
 					  (const char **) NULL, 0);
+		}
 		if (!r) append_commit(&as, 0, NULL, &uid, NULL);
 		else append_abort(&as);
 	    }
Index: imap/seen_local.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/seen_local.c,v
retrieving revision 1.41
retrieving revision 1.42
diff -u -u -r1.41 -r1.42
--- imap/seen_local.c	22 Oct 2003 18:50:08 -0000	1.41
+++ imap/seen_local.c	22 Jan 2004 21:17:10 -0000	1.42
@@ -1,5 +1,5 @@
 /* seen_local.c -- Storage for /Recent and /Seen state on local filesystem
- * $Id: seen_local.c,v 1.41 2003/10/22 18:50:08 rjs3 Exp $
+ * $Id: seen_local.c,v 1.42 2004/01/22 21:17:10 ken3 Exp $
  * Copyright (c) 1998-2003 Carnegie Mellon University.  All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -445,7 +445,7 @@
     strcat(oldfname, FNAME_SEEN);
     strcpy(newfname, newmailbox->path);
     strcat(newfname, FNAME_SEEN);
-    return mailbox_copyfile(oldfname, newfname);
+    return mailbox_copyfile(oldfname, newfname, 0);
 }
 
 /*
