Index: imap/message.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/message.c,v
retrieving revision 1.97.2.4
diff -u -r1.97.2.4 message.c
--- imap/message.c	23 Jun 2004 20:15:15 -0000	1.97.2.4
+++ imap/message.c	25 Jun 2004 18:25:51 -0000
@@ -374,12 +374,14 @@
     return 0;
 }
 
-static void message_find_part(struct body *body, const char **content_types,
+static void message_find_part(struct body *body, const char *section,
+			      const char **content_types,
 			      const char *msg_base, unsigned long msg_len,
 			      struct bodypart ***parts, int *n)
 {
     int match;
     const char **type;
+    char nextsection[128];
 
     for (match = 0, type = content_types; !match && *type; type++) {
 	const char *subtype = strchr(*type, '/');
@@ -402,6 +404,7 @@
 	/* grow the array and add the new part */
 	*parts = xrealloc(*parts, (*n+2)*sizeof(struct bodypart *));
 	(*parts)[*n] = xmalloc(sizeof(struct bodypart));
+	strlcpy((*parts)[*n]->section, section, sizeof((*parts)[*n]->section));
 	(*parts)[*n]->content = msg_base + body->content_offset;
 	(*parts)[*n]->encoding = body->encoding;
 	(*parts)[*n]->size = body->content_size;
@@ -411,13 +414,15 @@
 	int i;
 
 	for (i = 0; i < body->numparts; i++) {
-	    message_find_part(&body->subpart[i], content_types,
+	    snprintf(nextsection, sizeof(nextsection), "%s.%d", section, i+1);
+	    message_find_part(&body->subpart[i], nextsection, content_types,
 			      msg_base, msg_len, parts, n);
 	}
     }
     else if (!strcmp(body->type, "MESSAGE") &&
 	     !strcmp(body->subtype, "RFC822")) {
-	message_find_part(body->subpart, content_types,
+	snprintf(nextsection, sizeof(nextsection), "%s.1", section);
+	message_find_part(body->subpart, nextsection, content_types,
 			  msg_base, msg_len, parts, n);
     }
 }
@@ -435,7 +440,8 @@
     int n = 0;  /* running count of the number of matching parts */
 
     *parts = NULL;
-    message_find_part(msg->body, content_types, msg->base, msg->len, parts, &n);
+    message_find_part(msg->body, "1", content_types,
+		      msg->base, msg->len, parts, &n);
 }
 
 /*
Index: imap/message.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/cyrus/imap/message.h,v
retrieving revision 1.6.4.3
diff -u -r1.6.4.3 message.h
--- imap/message.h	23 Jun 2004 20:15:16 -0000	1.6.4.3
+++ imap/message.h	25 Jun 2004 18:25:51 -0000
@@ -77,6 +77,7 @@
 };
 
 struct bodypart {
+    char section[128];
     const char *content;
     const char *encoding;
     unsigned long size;
Index: sieve/bc_eval.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/sieve/bc_eval.c,v
retrieving revision 1.2.2.3
diff -u -r1.2.2.3 bc_eval.c
--- sieve/bc_eval.c	25 Jun 2004 15:08:07 -0000	1.2.2.3
+++ sieve/bc_eval.c	25 Jun 2004 18:25:53 -0000
@@ -35,6 +35,7 @@
 #include "bytecode.h"
 
 #include "charset.h"
+#include "hash.h"
 #include "xmalloc.h"
 
 #include <string.h>
@@ -291,7 +292,8 @@
 }
 
 /* Evaluate a bytecode test */
-int eval_bc_test(sieve_interp_t *interp, void* m,
+int eval_bc_test(sieve_interp_t *interp,
+		 struct hash_table *body_cache, void* m,
 		 bytecode_input_t * bc, int * ip)
 {
     int res=0; 
@@ -314,7 +316,7 @@
 
     case BC_NOT:/*2*/
 	i+=1;
-	res = eval_bc_test(interp,m, bc, &i);
+	res = eval_bc_test(interp, body_cache, m, bc, &i);
 	if(res >= 0) res = !res; /* Only invert in non-error case */
 	break;
 
@@ -373,7 +375,7 @@
 	 * in the right place */
 	for (x=0; x<list_len && !res; x++) { 
 	    int tmp;
-	    tmp = eval_bc_test(interp,m,bc,&i);
+	    tmp = eval_bc_test(interp,body_cache,m,bc,&i);
 	    if(tmp < 0) {
 		res = tmp;
 		break;
@@ -393,7 +395,7 @@
 	/* return 1 unless you find one that isn't true, then return 0 */
 	for (x=0; x<list_len && res; x++) {
 	    int tmp;
-	    tmp = eval_bc_test(interp,m,bc,&i);
+	    tmp = eval_bc_test(interp,body_cache,m,bc,&i);
 	    if(tmp < 0) {
 		res = tmp;
 		break;
@@ -704,8 +706,6 @@
     {
 	sieve_bodypart_t ** val;
 	const char **content_types = NULL;
-	char *decbuf = NULL;
-	int alloced = 0;
 
 	int typesi=i+6;/* the i value for the begining of the content-types */
  	int datai=(ntohl(bc[typesi+1].value)/4);
@@ -762,14 +762,10 @@
 	    if (match == B_COUNT) {
 		count++;
 	    } else {
-		const char *content;
-		int size;
+		const char *content = val[y]->content;
+		int size = val[y]->size;
 
-		if (transform == B_RAW) {
-		    content = val[y]->content;
-		    size = val[y]->size;
-		}
-		else {
+		if (transform != B_RAW) {
 		    int encoding;
 
 		    /* XXX currently unknown encodings are processed as raw */
@@ -782,12 +778,22 @@
 		    else
 			encoding = ENCODING_NONE;
 
-		    content = charset_decode_mimebody(val[y]->content,
-						      val[y]->size, encoding,
-						      &decbuf, alloced, &size);
-		    if (content != val[y]->content && val[y]->size > alloced) {
-			/* (re)alloced decbuf, so adjust alloced */
-			alloced = val[y]->size;
+		    if (encoding != ENCODING_NONE) {
+			content = hash_lookup(val[y]->section, body_cache);
+			if (content) {
+			    /* already decoded this part */
+			    size = strlen(content);
+			}
+			else {
+			    /* decode this part and add it to the cache */
+			    char *decbuf = NULL;
+			    content = charset_decode_mimebody(val[y]->content,
+							      val[y]->size,
+							      encoding, &decbuf,
+							      0, &size);
+			    hash_insert(val[y]->section, (void *) content,
+					body_cache);
+			}
 		    }
 
 		    if (transform == B_BINARY) {
@@ -834,9 +840,6 @@
 	/* free the bodypart array */
 	if (val) free(val);
 
-	/* free the decode buffer */
-	if (decbuf) free(decbuf);
-     
 	if  (match == B_COUNT)
 	{
 	    sprintf(scount, "%u", count);
@@ -874,10 +877,9 @@
 
 /* The entrypoint for bytecode evaluation */
 int sieve_eval_bc(sieve_interp_t *i, const void *bc_in, unsigned int bc_len,
-		  void *m, sieve_imapflags_t * imapflags,
-		  action_list_t *actions,
-		  notify_list_t *notify_list,
-		  const char **errmsg) 
+		  struct hash_table *body_cache, void *m,
+		  sieve_imapflags_t * imapflags, action_list_t *actions,
+		  notify_list_t *notify_list, const char **errmsg) 
 {
     const char *data;
     unsigned int ip = 0, ip_max = (bc_len/sizeof(bytecode_input_t));
@@ -988,7 +990,7 @@
 	    int result;
 	   
 	    ip+=2;
-	    result=eval_bc_test(i, m, bc, &ip);
+	    result=eval_bc_test(i, body_cache, m, bc, &ip);
 	    
 	    if (result<0) {
 		*errmsg = "Invalid test";
Index: sieve/script.c
===================================================================
RCS file: /afs/andrew/system/cvs/src/sieve/script.c,v
retrieving revision 1.59.2.4
diff -u -r1.59.2.4 script.c
--- sieve/script.c	23 Jun 2004 20:15:18 -0000	1.59.2.4
+++ sieve/script.c	25 Jun 2004 18:25:53 -0000
@@ -38,6 +38,7 @@
 #include <unistd.h>
 #include <assert.h>
 
+#include "hash.h"
 #include "xmalloc.h"
 
 #include "md5global.h"
@@ -811,10 +812,9 @@
 
 /* execute some bytecode */
 int sieve_eval_bc(sieve_interp_t *i, const void *bc_in, unsigned int bc_len,
-		  void *m, sieve_imapflags_t * imapflags,
-		  action_list_t *actions,
-		  notify_list_t *notify_list,
-		  const char **errmsg);
+		  struct hash_table *body_cache, void *m,
+		  sieve_imapflags_t * imapflags, action_list_t *actions,
+		  notify_list_t *notify_list, const char **errmsg);
 
 int sieve_execute_bytecode(sieve_bytecode_t *bc, sieve_interp_t *interp,
 			   void *script_context, void *message_context) 
@@ -827,6 +827,7 @@
     char actions_string[ACTIONS_STRING_LEN] = "";
     const char *errmsg = NULL;
     sieve_imapflags_t imapflags;
+    struct hash_table body_cache;
     
     if (!interp) return SIEVE_FAIL;
 
@@ -855,9 +856,17 @@
 			      actions, notify_list, lastaction, 0,
 			      actions_string, errmsg);
     }
+
+    /* build a hash table to cache decoded body parts */
+    construct_hash_table(&body_cache, 10, 1);
     
-    if (sieve_eval_bc(interp, bc->data, bc->len, message_context, 
-		      &imapflags, actions, notify_list, &errmsg) < 0)
+    ret = sieve_eval_bc(interp, bc->data, bc->len,
+			&body_cache, message_context,
+			&imapflags, actions, notify_list, &errmsg);
+
+    free_hash_table(&body_cache, free);
+
+    if (ret < 0)
     {
 	ret = SIEVE_RUN_ERROR;
 	return do_sieve_error(ret, interp, script_context,
Index: sieve/sieve_interface.h
===================================================================
RCS file: /afs/andrew/system/cvs/src/sieve/sieve_interface.h,v
retrieving revision 1.19.2.2
diff -u -r1.19.2.2 sieve_interface.h
--- sieve/sieve_interface.h	23 Jun 2004 20:15:19 -0000	1.19.2.2
+++ sieve/sieve_interface.h	25 Jun 2004 18:25:53 -0000
@@ -53,7 +53,9 @@
 			       const char *field,
 			       const char ***contents);
 
+/* MUST keep this struct sync'd with bodypart in imap/message.h */
 typedef struct sieve_bodypart {
+    char section[128];
     const char *content;
     const char *encoding;
     unsigned long size;
