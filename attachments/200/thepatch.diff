diff -r -C 10 cyrus-sasl-2.1.14.orig/lib/checkpw.c cyrus-sasl-2.1.14/lib/checkpw.c
*** cyrus-sasl-2.1.14.orig/lib/checkpw.c	Wed Mar 19 19:25:27 2003
--- cyrus-sasl-2.1.14/lib/checkpw.c	Thu Jul  3 17:36:06 2003
***************
*** 86,105 ****
--- 86,110 ----
  
  #if defined(HAVE_PWCHECK) || defined(HAVE_SASLAUTHD)
  # include <errno.h>
  # include <sys/types.h>
  # include <sys/socket.h>
  # include <sys/un.h>
  # ifdef HAVE_UNISTD_H
  #  include <unistd.h>
  # endif
  
+ /* cleartext password formats */
+ #define PASSWORD_FORMAT_CLEARTEXT 1
+ #define PASSWORD_FORMAT_CRYPT 2
+ #define PASSWORD_FORMAT_CRYPTTRAD 3
+ 
  extern int errno;
  #endif
  
  
  /* we store the following secret to check plaintext passwords:
   *
   * <salt> \0 <secret>
   *
   * where <secret> = MD5(<salt>, "sasldb", <pass>)
   */
***************
*** 121,158 ****
      _sasl_MD5Update(&ctx, "sasldb", 6);
      _sasl_MD5Update(&ctx, passwd, passlen);
      memcpy((*secret)->data, salt, 16);
      (*secret)->data[16] = '\0';
      _sasl_MD5Final((*secret)->data + 17, &ctx);
      (*secret)->len = sec_len;
      
      return SASL_OK;
  }
  
  /* erase & dispose of a sasl_secret_t
   */
  static int auxprop_verify_password(sasl_conn_t *conn,
  				   const char *userstr,
  				   const char *passwd,
  				   const char *service __attribute__((unused)),
  				   const char *user_realm __attribute__((unused)))
  {
      int ret = SASL_FAIL;
      char *userid = NULL;
      char *realm = NULL;
      int result = SASL_OK;
      sasl_server_conn_t *sconn = (sasl_server_conn_t *)conn;
      const char *password_request[] = { SASL_AUX_PASSWORD,
  				       "*cmusaslsecretPLAIN",
  				       NULL };
      struct propval auxprop_values[3];
!     
      if (!conn || !userstr)
  	return SASL_BADPARAM;
  
      /* We need to clear any previous results and re-canonify to 
       * ensure correctness */
  
      prop_clear(sconn->sparams->propctx, 0);
  	
      /* ensure its requested */
      result = prop_request(sconn->sparams->propctx, password_request);
--- 126,221 ----
      _sasl_MD5Update(&ctx, "sasldb", 6);
      _sasl_MD5Update(&ctx, passwd, passlen);
      memcpy((*secret)->data, salt, 16);
      (*secret)->data[16] = '\0';
      _sasl_MD5Final((*secret)->data + 17, &ctx);
      (*secret)->len = sec_len;
      
      return SASL_OK;
  }
  
+ /* weeds out crypt(3) password's salt */
+ int get_salt (char *dest, char *src, int format) {
+ 	/* how many characters is salt long? */
+ 	int num;
+ 
+ 	if (format == PASSWORD_FORMAT_CRYPT) {
+ 		if (src[1] == '1')
+ 			num = 12;	// md5 crypt
+ 		else if (src[1] == '2')
+ 			num = 16;	// blowfish crypt
+ 		else
+ 			num = 2;	// traditional crypt
+ 	}
+ 	else if (format == PASSWORD_FORMAT_CRYPTTRAD) {
+ 		num = 2;
+ 	}
+ 
+ 	/* weed it out ! */
+ 	strncpy(dest, src, num);
+ 
+ 	/* terminate string */
+ 	dest[num] = '\0';
+ 
+ 	return 1;
+ }
+ 
  /* erase & dispose of a sasl_secret_t
   */
  static int auxprop_verify_password(sasl_conn_t *conn,
  				   const char *userstr,
  				   const char *passwd,
  				   const char *service __attribute__((unused)),
  				   const char *user_realm __attribute__((unused)))
  {
      int ret = SASL_FAIL;
      char *userid = NULL;
      char *realm = NULL;
      int result = SASL_OK;
      sasl_server_conn_t *sconn = (sasl_server_conn_t *)conn;
      const char *password_request[] = { SASL_AUX_PASSWORD,
  				       "*cmusaslsecretPLAIN",
  				       NULL };
      struct propval auxprop_values[3];
! 
!     /* for password format check */
!     sasl_getopt_t *getopt;
!     void *context;
!     const char *p = NULL;
!     char pass_format_str[11];
!     /*
!      * MD5: 12 char salt
!      * BLOWFISH: 16 char salt
!      */
!     char salt[17];
!     int password_format;
! 
! 
! 	/* check for password format */
! 	if (_sasl_getcallback(conn, SASL_CB_GETOPT, &getopt, &context) == SASL_OK) {
! 		getopt(context, NULL, "password_format", &p, NULL);
! 	}
! 	if (p) {
! 		strncpy(pass_format_str, p, 9);
! 
! 		if (strncmp(pass_format_str, "crypt", 11) == 0)
! 			password_format = PASSWORD_FORMAT_CRYPT;
! 		else if (strncmp(pass_format_str, "crypt_trad", 11) == 0)
! 			password_format = PASSWORD_FORMAT_CRYPTTRAD;
! 		else
! 			password_format = PASSWORD_FORMAT_CLEARTEXT;
! 
! 	} else {
! 		password_format = PASSWORD_FORMAT_CLEARTEXT;
! 	}
! 	
! 	
      if (!conn || !userstr)
  	return SASL_BADPARAM;
  
      /* We need to clear any previous results and re-canonify to 
       * ensure correctness */
  
      prop_clear(sconn->sparams->propctx, 0);
  	
      /* ensure its requested */
      result = prop_request(sconn->sparams->propctx, password_request);
***************
*** 177,227 ****
          
      /* It is possible for us to get useful information out of just
       * the lookup, so we won't check that we have a password until now */
      if(!passwd) {
  	ret = SASL_BADPARAM;
  	goto done;
      }
  
      /* At the point this has been called, the username has been canonified
       * and we've done the auxprop lookup.  This should be easy. */
-     if(auxprop_values[0].name
-        && auxprop_values[0].values
-        && auxprop_values[0].values[0]
-        && !strcmp(auxprop_values[0].values[0], passwd)) {
- 	/* We have a plaintext version and it matched! */
- 	return SASL_OK;
-     } else if(auxprop_values[1].name
- 	      && auxprop_values[1].values
- 	      && auxprop_values[1].values[0]) {
- 	const char *db_secret = auxprop_values[1].values[0];
- 	sasl_secret_t *construct;
- 	
- 	ret = _sasl_make_plain_secret(db_secret, passwd,
- 				      strlen(passwd),
- 				      &construct);
- 	if (ret != SASL_OK) {
- 	    goto done;
- 	}
  
! 	if (!memcmp(db_secret, construct->data, construct->len)) {
! 	    /* password verified! */
! 	    ret = SASL_OK;
! 	} else {
! 	    /* passwords do not match */
! 	    ret = SASL_BADAUTH;
! 	}
! 
! 	sasl_FREE(construct);
!     } else {
  	/* passwords do not match */
! 	ret = SASL_BADAUTH;
      }
  
   done:
      if (userid) sasl_FREE(userid);
      if (realm)  sasl_FREE(realm);
  
      /* We're not going to erase the property here because other people
       * may want it */
      return ret;
  }
--- 240,324 ----
          
      /* It is possible for us to get useful information out of just
       * the lookup, so we won't check that we have a password until now */
      if(!passwd) {
  	ret = SASL_BADPARAM;
  	goto done;
      }
  
      /* At the point this has been called, the username has been canonified
       * and we've done the auxprop lookup.  This should be easy. */
  
!     /* check password, but with specified password format */
!     if (password_format == PASSWORD_FORMAT_CRYPT) {
! 	    get_salt(salt, auxprop_values[0].values[0], PASSWORD_FORMAT_CRYPT);
! 
! 	    /* compare passwords */
! 	    if (auxprop_values[0].name &&
! 	        auxprop_values[0].values &&
! 		auxprop_values[0].values[0] &&
! 		strcmp(crypt(passwd, salt), auxprop_values[0].values[0]) == 0
! 	       ) {
! 		    return SASL_OK;
! 		 }
!     }
!     else if (password_format == PASSWORD_FORMAT_CRYPTTRAD) {
! 	    get_salt(salt, auxprop_values[0].values[0], PASSWORD_FORMAT_CRYPTTRAD);
! 	    
! 	    /* compare passwords */
! 	    if (auxprop_values[0].name &&
! 	        auxprop_values[0].values &&
! 		auxprop_values[0].values[0] &&
! 		strcmp(crypt(passwd, salt), auxprop_values[0].values[0]) == 0
! 	       ) {
! 		    return SASL_OK;
! 		 }
!     }
!     else if (password_format == PASSWORD_FORMAT_CLEARTEXT) {
! 	    
! 	    /* compare passwords */
! 	    if (auxprop_values[0].name &&
! 	        auxprop_values[0].values &&
! 		auxprop_values[0].values[0] &&
! 		strcmp(auxprop_values[0].values[0], passwd) == 0
! 	       ) {
! 		    return SASL_OK;
! 		 }
!     }
!     /* original SASL checks continue here */
!     else if (auxprop_values[1].name &&
! 	     auxprop_values[1].values &&
! 	     auxprop_values[1].values[0]) {
! 
! 	    const char *db_secret = auxprop_values[1].values[0];
! 	    sasl_secret_t *construct;
! 
! 	    ret = _sasl_make_plain_secret(db_secret, passwd,
! 			    strlen(passwd), &construct);
! 
! 	    if (ret != SASL_OK) {
! 		    goto done;
!             }
! 	    
! 	    if (!memcmp(db_secret, construct->data, construct->len)) {
! 		    /* password verified! */
! 		    ret = SASL_OK;
! 	    } else {
! 		    /* passwords do not match */
! 		    ret = SASL_BADAUTH;
! 	    }
! 		    
! 	    sasl_FREE(construct);
!     }
!     else {
  	/* passwords do not match */
!         ret = SASL_BADAUTH;
      }
  
   done:
      if (userid) sasl_FREE(userid);
      if (realm)  sasl_FREE(realm);
  
      /* We're not going to erase the property here because other people
       * may want it */
      return ret;
  }
