diff -ru /home/hmh/src/debian/upstream-cvs/cyrus-imapd/master/master.c ./master/master.c
--- /home/hmh/src/debian/upstream-cvs/cyrus-imapd/master/master.c	2003-02-24 08:47:52.000000000 -0300
+++ ./master/master.c	2003-03-18 08:51:12.000000000 -0300
@@ -124,8 +124,18 @@
 };
 static struct event *schedule = NULL;
 
+enum {
+    SERVICE_STATE_UNKNOWN = 0,  /* duh */
+    SERVICE_STATE_INIT    = 1,  /* Service forked */
+    SERVICE_STATE_READY   = 2,  /* Service told us it is ready */
+    SERVICE_STATE_BUSY    = 3,  /* Service told us it is not ready */
+    SERVICE_STATE_DEAD    = 4   /* We received a sigchld from this service */
+};
+
 struct centry {
     pid_t pid;
+    int service_state; /* SERVICE_STATE_* */
+    int janitor_passes;
     struct service *s;
     struct centry *next;
 };
@@ -243,6 +253,8 @@
     t = cfreelist;
     cfreelist = cfreelist->next;
 
+    t->janitor_passes = 0;
+
     return t;
 }
 
@@ -513,7 +525,6 @@
     static char name_env[100];
     struct centry *c;
     time_t now = time(NULL);
-    int msg;
     
     /* update our fork rate */
     if(now - s->last_interval_start >= FORKRATE_INTERVAL) {
@@ -598,9 +609,6 @@
 
 	execv(path, s->exec);
 	syslog(LOG_ERR, "couldn't exec %s: %m", path);
-	if (write(STATUS_FD, &msg, sizeof(msg)) != sizeof(msg)) {
-	    syslog(LOG_ERR, "unable to tell master %x: %m", msg);
-	}
 	exit(EX_OSERR);
 
     default:			/* parent */
@@ -612,6 +620,7 @@
 	/* add to child table */
 	c = get_centry();
 	c->pid = p;
+	c->service_state = SERVICE_STATE_INIT;
 	c->s = s;
 	c->next = ctable[p % child_table_size];
 	ctable[p % child_table_size] = c;
@@ -701,6 +710,7 @@
 		/* add to child table */
 		c = get_centry();
 		c->pid = p;
+		c->service_state = SERVICE_STATE_INIT;
 		c->s = NULL;
 		c->next = ctable[p % child_table_size];
 		ctable[p % child_table_size] = c;
@@ -740,50 +750,76 @@
 		   pid, WTERMSIG(status));
 	}
 
+
 	/* account for the child */
 	c = ctable[pid % child_table_size];
+	while (c && c->pid != pid) c = c->next;
+	
 	if (c && c->pid == pid) {
-	    /* first thing in the linked list */
-
 	    /* decrement active count for service */
-	    if (c->s) c->s->nactive--;
-
-	    ctable[pid % child_table_size] = c->next;
-	    c->next = cfreelist;
-	    cfreelist = c;
+	    if (c->s) {
+		c->s->nactive--;
+		switch (c->service_state) {
+		case SERVICE_STATE_READY:
+		    c->s->ready_workers--;
+		    if (WIFSIGNALED(status) ||
+			(WIFEXITED(status) && WEXITSTATUS(status))) {
+			syslog(LOG_WARNING, "available child %d terminated abnormally",
+			       pid);
+		    }
+		    break;
+
+		case SERVICE_STATE_DEAD:
+		    /* uh? either we got duplicate signals, or we are now MT */
+		    syslog(LOG_WARNING, "receiving duplicate signals from child %d, service %s", pid, c->s->name);
+		    break;
+		}
+	    }
+	    c->service_state = SERVICE_STATE_DEAD;
 	} else {
-	    /* not the first thing in the linked list */
+	    /* weird. Are we multithreaded now? we don't know this child */
+	    syslog(LOG_WARNING, "receiving signals from unregistered children. Handling it anyway");
+	    c = get_centry();
+	    c->pid = pid;
+	    c->service_state = SERVICE_STATE_DEAD;
+	    c->s = NULL;	/* we don't know it yet */
+	    c->next = ctable[pid % child_table_size];
+	    ctable[pid % child_table_size] = c;
+	}
+    }
+}
 
-	    while (c->next) {
-		if (c->next->pid == pid) break;
-		c = c->next;
-	    }
-	    if (c->next) {
-		struct centry *t;
+void child_janitor(void)
+{
+	int i;
+	struct centry **p;
+	struct centry *c;
 
-		t = c->next;
-		/* decrement active count for service */
-		if (t->s) t->s->nactive--;
-
-		c->next = t->next; /* remove node */
-		t->next = cfreelist; /* add to freelist */
-		cfreelist = t;
-	    } else {
-		/* yikes! don't know about this child! */
-		syslog(LOG_ERR, "process %d not recognized", pid);
+	/* walk entire hash table */
+	for (i = 0; i < child_table_size - 1; i++) {
+	    p = &ctable[i];
+	    while (*p) {
+		c = *p;
+		if (c->service_state == SERVICE_STATE_DEAD && 
+		    ++c->janitor_passes > 3) {
+		    *p = c->next;
+		    c->next = cfreelist;
+		    cfreelist = c;
+		} else {
+		    p = &((*p)->next);
+		}
 	    }
 	}
-    }
 }
 
-static int gotsigchld = 0;
+static volatile int gotsigchld = 0;
 
 void sigchld_handler(int sig __attribute__((unused)))
 {
     gotsigchld = 1;
 }
 
-static int gotsighup = 0;
+static volatile int gotsighup = 0;
 
 void sighup_handler(int sig __attribute__((unused)))
 {
@@ -853,24 +889,67 @@
     }
 }
 
-void process_msg(struct service *s, int msg)
+void process_msg(struct service *s, struct notify_message *msg)
 {
-    switch (msg) {
+    struct centry * c;
+
+    /* Search hash table with linked list for pid */
+    c = ctable[msg->service_pid % child_table_size];
+    while (c && c->pid != msg->service_pid) c = c->next;
+
+    /* Did we find it? */
+    if (!c || c->pid != msg->service_pid) {
+	syslog(LOG_WARNING, "can't find pid %d to process message %d, service %s", 
+			msg->service_pid, msg->message, s->name);
+	/* resilience paranoia. Causes small performance loss when used */
+	c = get_centry();
+	c->s = s;
+	c->pid = msg->service_pid;
+	c->service_state = SERVICE_STATE_UNKNOWN;
+	c->next = ctable[c->pid % child_table_size];
+	ctable[c->pid % child_table_size] = c;
+    }
+
+    switch (msg->message) {
     case MASTER_SERVICE_AVAILABLE:
-	s->ready_workers++;
+	if (c->service_state != SERVICE_STATE_DEAD) {
+	    /* maybe we should also ignore SERVICE_STATE_UNKNOWN ? */
+	    c->service_state = SERVICE_STATE_READY;
+	    s->ready_workers++;
+	}
 	break;
 
     case MASTER_SERVICE_UNAVAILABLE:
-	s->ready_workers--;
+	if (c->service_state != SERVICE_STATE_DEAD) {
+	    c->service_state = SERVICE_STATE_BUSY;
+	    s->ready_workers--;
+	}
 	break;
 
     case MASTER_SERVICE_CONNECTION:
-	s->nconnections++;
+	switch (c->service_state) {
+	case SERVICE_STATE_DEAD:
+	    /* dead? ignore it */
+	    break;
+
+	case SERVICE_STATE_BUSY:
+	    s->nconnections++;
+	    break;
+
+	default:
+	   syslog(LOG_ERR, "non-busy child pid %d, service %s reported new connection",
+			   msg->service_pid, s->name);
+	   /* be resilient on face of a bogon source, so lets err to the side
+	    * of non-denial-of-service */
+	   c->service_state = SERVICE_STATE_BUSY;
+	   s->nconnections++;
+	   s->ready_workers--;
+	}
 	break;
-	
+
     default:
 	syslog(LOG_ERR, "unrecognized message for service '%s': %x", 
-	       s->name, msg);
+	       s->name, msg->message);
 	break;
     }
 
@@ -1626,5 +1705,6 @@
 		}
 	    }
 	}
+	child_janitor();
     }
 }
diff -ru /home/hmh/src/debian/upstream-cvs/cyrus-imapd/master/service.c ./master/service.c
--- /home/hmh/src/debian/upstream-cvs/cyrus-imapd/master/service.c	2003-03-04 01:06:51.000000000 -0300
+++ ./master/service.c	2003-03-18 08:41:48.000000000 -0300
@@ -74,13 +74,16 @@
 /* number of times this service has been used */
 static int use_count = 0;
 static int verbose = 0;
-static int gotalrm = 0;
+static volatile int gotalrm = 0;
 static int lockfd = -1;
 
 void notify_master(int fd, int msg)
 {
-    if (verbose) syslog(LOG_DEBUG, "telling master %d", msg);
-    if (write(fd, &msg, sizeof(msg)) != sizeof(msg)) {
+    struct notify_message notifymsg;
+    if (verbose) syslog(LOG_DEBUG, "telling master %x", msg);
+    notifymsg.message = msg;
+    notifymsg.service_pid = getpid();
+    if (write(fd, &notifymsg, sizeof(notifymsg)) != sizeof(notifymsg)) {
 	syslog(LOG_ERR, "unable to tell master %x: %m", msg);
     }
 }
diff -ru /home/hmh/src/debian/upstream-cvs/cyrus-imapd/master/service.h ./master/service.h
--- /home/hmh/src/debian/upstream-cvs/cyrus-imapd/master/service.h	2003-02-13 21:54:32.000000000 -0200
+++ ./master/service.h	2003-03-18 08:39:34.000000000 -0300
@@ -64,4 +64,9 @@
     REUSE_TIMEOUT = 60
 };
 
+struct notify_message {
+    int message;
+    pid_t service_pid;
+};
+
 #endif
