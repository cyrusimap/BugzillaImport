Index: gssapi.c
===================================================================
RCS file: /afs/andrew.cmu.edu/system/cvs/src/sasl/plugins/gssapi.c,v
retrieving revision 1.90
diff -u -r1.90 gssapi.c
--- gssapi.c	6 Jul 2004 21:55:47 -0000	1.90
+++ gssapi.c	15 Jul 2004 16:27:10 -0000
@@ -122,6 +122,23 @@
  * CyberSafe (http://www.cybersafe.com/) and SEAM.
  */
 
+#ifdef GSS_USE_MUTEXES
+#define GSS_LOCK_MUTEX(utils)  \
+    if(((sasl_utils_t *)(utils))->mutex_lock(gss_mutex) != 0) { \
+       return SASL_FAIL; \
+    }
+
+#define GSS_UNLOCK_MUTEX(utils) \
+    if(((sasl_utils_t *)(utils))->mutex_unlock(gss_mutex) != 0) { \
+        return SASL_FAIL; \
+    }
+
+static void *gss_mutex = NULL;
+#else
+#define GSS_LOCK_MUTEX(utils)
+#define GSS_UNLOCK_MUTEX(utils)
+#endif
+
 typedef struct context {
     int state;
     
@@ -164,9 +181,9 @@
 #define sasl_gss_log(x,y,z) sasl_gss_seterror_(x,y,z,1)
 #define sasl_gss_seterror(x,y,z) sasl_gss_seterror_(x,y,z,0)
 
-static void
+static int
 sasl_gss_seterror_(const sasl_utils_t *utils, OM_uint32 maj, OM_uint32 min,
-	int logonly)
+		   int logonly)
 {
     OM_uint32 maj_stat, min_stat;
     gss_buffer_desc msg;
@@ -176,19 +193,20 @@
     size_t len, curlen = 0;
     const char prefix[] = "GSSAPI Error: ";
     
-    if(!utils) return;
-    
     len = sizeof(prefix);
     ret = _plug_buf_alloc(utils, &out, &curlen, 256);
-    if(ret != SASL_OK) return;
+    if(ret != SASL_OK) return SASL_OK;
     
     strcpy(out, prefix);
     
     msg_ctx = 0;
     while (1) {
+	GSS_LOCK_MUTEX(utils);
 	maj_stat = gss_display_status(&min_stat, maj,
 				      GSS_C_GSS_CODE, GSS_C_NULL_OID,
 				      &msg_ctx, &msg);
+	GSS_UNLOCK_MUTEX(utils);
+	
 	if(GSS_ERROR(maj_stat)) {
 	    if (logonly) {
 		utils->log(utils->conn, SASL_LOG_FAIL,
@@ -199,7 +217,7 @@
 				"(could not get major error message)");
 	    }
 	    utils->free(out);
-	    return;
+	    return SASL_OK;
 	}
 	
 	len += len + msg.length;
@@ -207,12 +225,14 @@
 	
 	if(ret != SASL_OK) {
 	    utils->free(out);
-	    return;
+	    return SASL_OK;
 	}
 	
 	strcat(out, msg.value);
 	
+	GSS_LOCK_MUTEX(utils);
 	gss_release_buffer(&min_stat, &msg);
+	GSS_UNLOCK_MUTEX(utils);
 	
 	if (!msg_ctx)
 	    break;
@@ -224,16 +244,19 @@
     ret = _plug_buf_alloc(utils, &out, &curlen, len);
     if(ret != SASL_OK) {
 	utils->free(out);
-	return;
+	return SASL_NOMEM;
     }
     
     strcat(out, " (");
     
     msg_ctx = 0;
     while (1) {
+	GSS_LOCK_MUTEX(utils);
 	maj_stat = gss_display_status(&min_stat, min,
 				      GSS_C_MECH_CODE, GSS_C_NULL_OID,
 				      &msg_ctx, &msg);
+	GSS_UNLOCK_MUTEX(utils);
+	
 	if(GSS_ERROR(maj_stat)) {
 	    if (logonly) {
 		utils->log(utils->conn, SASL_LOG_FAIL,
@@ -244,20 +267,22 @@
 				"(could not get minor error message)");
 	    }
 	    utils->free(out);
-	    return;
+	    return SASL_OK;
 	}
 	
 	len += len + msg.length;
+
 	ret = _plug_buf_alloc(utils, &out, &curlen, len);
-	
 	if(ret != SASL_OK) {
 	    utils->free(out);
-	    return;
+	    return SASL_NOMEM;
 	}
 	
 	strcat(out, msg.value);
 	
+	GSS_LOCK_MUTEX(utils);
 	gss_release_buffer(&min_stat, &msg);
+	GSS_UNLOCK_MUTEX(utils);
 	
 	if (!msg_ctx)
 	    break;
@@ -267,7 +292,7 @@
     ret = _plug_buf_alloc(utils, &out, &curlen, len);
     if(ret != SASL_OK) {
 	utils->free(out);
-	return;
+	return SASL_NOMEM;
     }
     
     strcat(out, ")");
@@ -278,6 +303,8 @@
 	utils->seterror(utils->conn, 0, out);
     }
     utils->free(out);
+
+    return SASL_OK;
 }
 
 static int 
@@ -314,6 +341,7 @@
     output_token->value = NULL;
     output_token->length = 0;
     
+    GSS_LOCK_MUTEX(text->utils);
     maj_stat = gss_wrap (&min_stat,
 			 text->gss_ctx,
 			 privacy,
@@ -321,12 +349,16 @@
 			 input_token,
 			 NULL,
 			 output_token);
+    GSS_UNLOCK_MUTEX(text->utils);
     
     if (GSS_ERROR(maj_stat))
 	{
 	    sasl_gss_seterror(text->utils, maj_stat, min_stat);
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(text->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(text->utils);
+	    }
 	    return SASL_FAIL;
 	}
     
@@ -337,7 +369,9 @@
 			      &(text->encode_buf_len), output_token->length + 4);
 	
 	if (ret != SASL_OK) {
+	    GSS_LOCK_MUTEX(text->utils);
 	    gss_release_buffer(&min_stat, output_token);
+	    GSS_UNLOCK_MUTEX(text->utils);
 	    return ret;
 	}
 	
@@ -352,9 +386,11 @@
     
     *output = text->encode_buf;
     
-    if (output_token->value)
+    if (output_token->value) {
+	GSS_LOCK_MUTEX(text->utils);
 	gss_release_buffer(&min_stat, output_token);
-    
+	GSS_UNLOCK_MUTEX(text->utils);
+    } 
     return SASL_OK;
 }
 
@@ -395,18 +431,23 @@
     output_token->value = NULL;
     output_token->length = 0;
     
+    GSS_LOCK_MUTEX(text->utils);
     maj_stat = gss_unwrap (&min_stat,
 			   text->gss_ctx,
 			   input_token,
 			   output_token,
 			   NULL,
 			   NULL);
+    GSS_UNLOCK_MUTEX(text->utils);
     
     if (GSS_ERROR(maj_stat))
 	{
 	    sasl_gss_seterror(text->utils,maj_stat,min_stat);
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(text->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(text->utils);
+	    }
 	    return SASL_FAIL;
 	}
     
@@ -419,13 +460,17 @@
 				     &text->decode_once_buf_len,
 				     *outputlen);
 	    if(result != SASL_OK) {
+		GSS_LOCK_MUTEX(text->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(text->utils);
 		return result;
 	    }
 	    *output = text->decode_once_buf;
 	    memcpy(*output, output_token->value, *outputlen);
 	}
+	GSS_LOCK_MUTEX(text->utils);
 	gss_release_buffer(&min_stat, output_token);
+	GSS_UNLOCK_MUTEX(text->utils);
     }
     
     return SASL_OK;
@@ -447,7 +492,7 @@
     return ret;
 }
 
-static context_t *gss_new_context(const sasl_utils_t *utils)
+static context_t *sasl_gss_new_context(const sasl_utils_t *utils)
 {
     context_t *ret;
     
@@ -460,14 +505,17 @@
     return ret;
 }
 
-static void sasl_gss_free_context_contents(context_t *text)
+static int sasl_gss_free_context_contents(context_t *text)
 {
     OM_uint32 maj_stat, min_stat;
     
-    if (!text) return;
+    if (!text) return SASL_OK;
     
+    GSS_LOCK_MUTEX(text->utils);
+
     if (text->gss_ctx != GSS_C_NO_CONTEXT) {
-	maj_stat = gss_delete_sec_context (&min_stat,&text->gss_ctx,GSS_C_NO_BUFFER);
+	maj_stat = gss_delete_sec_context(&min_stat,&text->gss_ctx,
+					  GSS_C_NO_BUFFER);
 	text->gss_ctx = GSS_C_NO_CONTEXT;
     }
     
@@ -490,6 +538,8 @@
 	maj_stat = gss_release_cred(&min_stat, &text->client_creds);
 	text->client_creds = GSS_C_NO_CREDENTIAL;
     }
+
+    GSS_UNLOCK_MUTEX(text->utils);
     
     if (text->out_buf) {
 	text->utils->free(text->out_buf);
@@ -523,12 +573,21 @@
 	text->utils->free(text->authid);
 	text->authid = NULL;
     }
+
+    return SASL_OK;
+
 }
 
 static void gssapi_common_mech_dispose(void *conn_context,
 				       const sasl_utils_t *utils)
 {
     sasl_gss_free_context_contents((context_t *)(conn_context));
+#ifdef GSS_USE_MUTEXES
+    if (gss_mutex) {
+      utils->mutex_free(gss_mutex);
+      gss_mutex=NULL;
+    }
+#endif
     utils->free(conn_context);
 }
 
@@ -543,7 +602,7 @@
 {
     context_t *text;
     
-    text = gss_new_context(params->utils);
+    text = sasl_gss_new_context(params->utils);
     if (text == NULL) {
 	MEMERROR(params->utils);
 	return SASL_NOMEM;
@@ -604,10 +663,12 @@
 	    }
 	    sprintf(name_token.value,"%s@%s", params->service, params->serverFQDN);
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_import_name (&min_stat,
 					&name_token,
 					GSS_C_NT_HOSTBASED_SERVICE,
 					&text->server_name);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    params->utils->free(name_token.value);
 	    name_token.value = NULL;
@@ -619,10 +680,13 @@
 	    }
 	    
 	    if ( text->server_creds != GSS_C_NO_CREDENTIAL) {
+	    	GSS_LOCK_MUTEX(params->utils);
 		maj_stat = gss_release_cred(&min_stat, &text->server_creds);
+	    	GSS_UNLOCK_MUTEX(params->utils);
 		text->server_creds = GSS_C_NO_CREDENTIAL;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_acquire_cred(&min_stat, 
 					text->server_name,
 					GSS_C_INDEFINITE, 
@@ -631,6 +695,7 @@
 					&text->server_creds, 
 					NULL, 
 					NULL);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    if (GSS_ERROR(maj_stat)) {
 		sasl_gss_seterror(text->utils, maj_stat, min_stat);
@@ -645,6 +710,7 @@
 	}
 	
 	
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat =
 	    gss_accept_sec_context(&min_stat,
 				   &(text->gss_ctx),
@@ -657,12 +723,15 @@
 				   &out_flags,
 				   NULL,
 				   &(text->client_creds));
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	if (GSS_ERROR(maj_stat)) {
 	    sasl_gss_log(text->utils, maj_stat, min_stat);
 	    text->utils->seterror(text->utils->conn, SASL_NOLOG, "GSSAPI Failure: gss_accept_sec_context");
 	    if (output_token->value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(params->utils);
 	    }
 	    sasl_gss_free_context_contents(text);
 	    return SASL_BADAUTH;
@@ -673,7 +742,8 @@
 	    (!(out_flags & GSS_C_DELEG_FLAG) ||
 	     text->client_creds == GSS_C_NO_CREDENTIAL) ) 
 	{
-	    text->utils->seterror(text->utils->conn, SASL_LOG_WARN, "GSSAPI warning: no credentials were passed");
+	    text->utils->seterror(text->utils->conn, SASL_LOG_WARN,
+				  "GSSAPI warning: no credentials were passed");
 	    /* continue with authentication */
 	}
 	    
@@ -684,14 +754,18 @@
 		ret = _plug_buf_alloc(text->utils, &(text->out_buf),
 				      &(text->out_buf_len), *serveroutlen);
 		if(ret != SASL_OK) {
+		    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, output_token);
+		    GSS_UNLOCK_MUTEX(params->utils);
 		    return ret;
 		}
 		memcpy(text->out_buf, output_token->value, *serveroutlen);
 		*serverout = text->out_buf;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, output_token);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	} else {
 	    /* No output token, send an empty string */
 	    *serverout = GSSAPI_BLANK_STRING;
@@ -717,19 +791,27 @@
 	
 	/* We ignore whatever the client sent us at this stage */
 	
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat = gss_display_name (&min_stat,
 				     text->client_name,
 				     &name_token,
 				     NULL);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	if (GSS_ERROR(maj_stat)) {
 	    if (name_without_realm.value)
 		params->utils->free(name_without_realm.value);
 	    
-	    if (name_token.value)
+	    if (name_token.value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, &name_token);
-	    if (without)
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
+	    if (without) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_name(&min_stat, &without);
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
 	    SETERROR(text->utils, "GSSAPI Failure");
 	    sasl_gss_free_context_contents(text);
 	    return SASL_BADAUTH;
@@ -755,6 +837,7 @@
 	    
 	    name_without_realm.length = strlen( (char *) name_without_realm.value );
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_import_name (&min_stat,
 					&name_without_realm,
 	    /* Solaris 8/9 gss_import_name doesn't accept GSS_C_NULL_OID here,
@@ -765,35 +848,53 @@
 					GSS_C_NULL_OID,
 #endif
 					&without);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    if (GSS_ERROR(maj_stat)) {
 		params->utils->free(name_without_realm.value);
-		if (name_token.value)
+		if (name_token.value) {
+	    	    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, &name_token);
-		if (without)
+	    	    GSS_UNLOCK_MUTEX(params->utils);
+		}
+		if (without) {
+	    	    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_name(&min_stat, &without);
+	    	    GSS_UNLOCK_MUTEX(params->utils);
+		}
 		SETERROR(text->utils, "GSSAPI Failure");
 		sasl_gss_free_context_contents(text);
 		return SASL_BADAUTH;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_compare_name(&min_stat,
 					text->client_name,
 					without,
 					&equal);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    if (GSS_ERROR(maj_stat)) {
 		params->utils->free(name_without_realm.value);
-		if (name_token.value)
+		if (name_token.value) {
+	    	    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, &name_token);
-		if (without)
+	    	    GSS_UNLOCK_MUTEX(params->utils);
+		}
+		if (without) {
+	    	    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_name(&min_stat, &without);
+	    	    GSS_UNLOCK_MUTEX(params->utils);
+		}
 		SETERROR(text->utils, "GSSAPI Failure");
 		sasl_gss_free_context_contents(text);
 		return SASL_BADAUTH;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_name(&min_stat,&without);
+	    GSS_UNLOCK_MUTEX(params->utils);
+
 	} else {
 	    equal = 0;
 	}
@@ -814,11 +915,14 @@
 	    }
 	}
 	
-	if (name_token.value)
+	if (name_token.value) {
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, &name_token);
-	if (name_without_realm.value)
+	    GSS_UNLOCK_MUTEX(params->utils);
+	}
+	if (name_without_realm.value) {
 	    params->utils->free(name_without_realm.value);
-	
+	}	
 	
 	/* we have to decide what sort of encryption/integrity/etc.,
 	   we support */
@@ -865,6 +969,7 @@
 	real_input_token.value = (void *)sasldata;
 	real_input_token.length = 4;
 	
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat = gss_wrap(&min_stat,
 			    text->gss_ctx,
 			    0, /* Just integrity checking here */
@@ -872,11 +977,15 @@
 			    input_token,
 			    NULL,
 			    output_token);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	if (GSS_ERROR(maj_stat)) {
 	    sasl_gss_seterror(text->utils, maj_stat, min_stat);
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
 	    sasl_gss_free_context_contents(text);
 	    return SASL_FAIL;
 	}
@@ -889,14 +998,18 @@
 		ret = _plug_buf_alloc(text->utils, &(text->out_buf),
 				      &(text->out_buf_len), *serveroutlen);
 		if(ret != SASL_OK) {
+		    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, output_token);
+		    GSS_UNLOCK_MUTEX(params->utils);
 		    return ret;
 		}
 		memcpy(text->out_buf, output_token->value, *serveroutlen);
 		*serverout = text->out_buf;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, output_token);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	}
 	
 	/* Wait for ssf request and authid */
@@ -911,12 +1024,14 @@
 	real_input_token.value = (void *)clientin;
 	real_input_token.length = clientinlen;
 	
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat = gss_unwrap(&min_stat,
 			      text->gss_ctx,
 			      input_token,
 			      output_token,
 			      NULL,
 			      NULL);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	if (GSS_ERROR(maj_stat)) {
 	    sasl_gss_seterror(text->utils, maj_stat, min_stat);
@@ -946,8 +1061,11 @@
 		     "protocol violation: client requested invalid layer");
 	    /* Mark that we attempted negotiation */
 	    oparams->mech_ssf = 2;
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
 	    sasl_gss_free_context_contents(text);
 	    return SASL_FAIL;
 	}
@@ -990,7 +1108,9 @@
 	} else {
 	    SETERROR(text->utils,
 		     "token too short");
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, output_token);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    sasl_gss_free_context_contents(text);
 	    return SASL_FAIL;
 	}	
@@ -1026,7 +1146,9 @@
 	    }    
 	}
 	
+	GSS_LOCK_MUTEX(params->utils);
 	gss_release_buffer(&min_stat, output_token);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	text->state = SASL_GSSAPI_STATE_AUTHENTICATED;
 	
@@ -1125,6 +1247,15 @@
     *out_version = SASL_SERVER_PLUG_VERSION;
     *pluglist = gssapi_server_plugins;
     *plugcount = 1;  
+
+#ifdef GSS_USE_MUTEXES
+    if (!gss_mutex) {
+       gss_mutex = utils->mutex_alloc();
+       if (!gss_mutex) {
+           return SASL_FAIL;
+       }
+    }
+#endif
     
     return SASL_OK;
 }
@@ -1138,7 +1269,7 @@
     context_t *text;
     
     /* holds state are in */
-    text = gss_new_context(params->utils);
+    text = sasl_gss_new_context(params->utils);
     if (text == NULL) {
 	MEMERROR(params->utils);
 	return SASL_NOMEM;
@@ -1234,10 +1365,12 @@
 	    
 	    sprintf(name_token.value,"%s@%s", params->service, params->serverFQDN);
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_import_name (&min_stat,
 					&name_token,
 					GSS_C_NT_HOSTBASED_SERVICE,
 					&text->server_name);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    params->utils->free(name_token.value);
 	    name_token.value = NULL;
@@ -1261,7 +1394,9 @@
 	     * and no input from the server.  However, thanks to Imap,
 	     * which discards our first output, this happens all the time.
 	     * Throw away the context and try again. */
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_delete_sec_context (&min_stat,&text->gss_ctx,GSS_C_NO_BUFFER);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    text->gss_ctx = GSS_C_NO_CONTEXT;
 	}
 	    
@@ -1282,6 +1417,7 @@
 	if (params->props.security_flags & SASL_SEC_PASS_CREDENTIALS)
 	    req_flags = req_flags |  GSS_C_DELEG_FLAG;
 
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat = gss_init_sec_context(&min_stat,
 					GSS_C_NO_CREDENTIAL,
 					&text->gss_ctx,
@@ -1295,11 +1431,15 @@
 					output_token,
 					&out_req_flags,
 					NULL);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	if (GSS_ERROR(maj_stat)) {
 	    sasl_gss_seterror(text->utils, maj_stat, min_stat);
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
 	    sasl_gss_free_context_contents(text);
 	    return SASL_FAIL;
 	}
@@ -1316,17 +1456,22 @@
 		ret = _plug_buf_alloc(text->utils, &(text->out_buf),
 				      &(text->out_buf_len), *clientoutlen);
 		if(ret != SASL_OK) {
+		    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, output_token);
+		    GSS_UNLOCK_MUTEX(params->utils);
 		    return ret;
 		}
 		memcpy(text->out_buf, output_token->value, *clientoutlen);
 		*clientout = text->out_buf;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, output_token);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	}
 	
 	if (maj_stat == GSS_S_COMPLETE) {
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_inquire_context(&min_stat,
 					   text->gss_ctx,
 					   &text->client_name,
@@ -1337,6 +1482,7 @@
 					   NULL,       /* flags */
 					   NULL,       /* local init */
 					   NULL);      /* open */
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    if (GSS_ERROR(maj_stat)) {
 		sasl_gss_seterror(text->utils, maj_stat, min_stat);
@@ -1345,14 +1491,19 @@
 	    }
 	    
 	    name_token.length = 0;
+	    GSS_LOCK_MUTEX(params->utils);
 	    maj_stat = gss_display_name(&min_stat,
 					text->client_name,
 					&name_token,
 					NULL);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    if (GSS_ERROR(maj_stat)) {
-		if (name_token.value)
+		if (name_token.value) {
+		    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, &name_token);
+		    GSS_UNLOCK_MUTEX(params->utils);
+		}
 		SETERROR(text->utils, "GSSAPI Failure");
 		sasl_gss_free_context_contents(text);
 		return SASL_FAIL;
@@ -1372,7 +1523,9 @@
 					 SASL_CU_AUTHID | SASL_CU_AUTHZID,
 					 oparams);
 	    }
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, &name_token);
+	    GSS_UNLOCK_MUTEX(params->utils);
 	    
 	    if (ret != SASL_OK) return ret;
 	    
@@ -1391,18 +1544,23 @@
 	real_input_token.value = (void *) serverin;
 	real_input_token.length = serverinlen;
 	
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat = gss_unwrap(&min_stat,
 			      text->gss_ctx,
 			      input_token,
 			      output_token,
 			      NULL,
 			      NULL);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	if (GSS_ERROR(maj_stat)) {
 	    sasl_gss_seterror(text->utils, maj_stat, min_stat);
 	    sasl_gss_free_context_contents(text);
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
 	    return SASL_FAIL;
 	}
 	
@@ -1477,7 +1635,9 @@
 	    }
 	}
 	
+	GSS_LOCK_MUTEX(params->utils);
 	gss_release_buffer(&min_stat, output_token);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	/* oparams->user is always set, due to canon_user requirements.
 	 * Make sure the client actually requested it though, by checking
@@ -1516,6 +1676,7 @@
         }
 	((unsigned char *)input_token->value)[0] = mychoice;
 	
+	GSS_LOCK_MUTEX(params->utils);
 	maj_stat = gss_wrap (&min_stat,
 			     text->gss_ctx,
 			     0, /* Just integrity checking here */
@@ -1523,14 +1684,18 @@
 			     input_token,
 			     NULL,
 			     output_token);
+	GSS_UNLOCK_MUTEX(params->utils);
 	
 	params->utils->free(input_token->value);
 	input_token->value = NULL;
 	
 	if (GSS_ERROR(maj_stat)) {
 	    sasl_gss_seterror(text->utils, maj_stat, min_stat);
-	    if (output_token->value)
+	    if (output_token->value) {
+		GSS_LOCK_MUTEX(params->utils);
 		gss_release_buffer(&min_stat, output_token);
+		GSS_UNLOCK_MUTEX(params->utils);
+	    }
 	    sasl_gss_free_context_contents(text);
 	    return SASL_FAIL;
 	}
@@ -1542,14 +1707,19 @@
 		ret = _plug_buf_alloc(text->utils, &(text->out_buf),
 				      &(text->out_buf_len), *clientoutlen);
 		if (ret != SASL_OK) {
+		    GSS_LOCK_MUTEX(params->utils);
 		    gss_release_buffer(&min_stat, output_token);
+		    GSS_UNLOCK_MUTEX(params->utils);
 		    return ret;
 		}
 		memcpy(text->out_buf, output_token->value, *clientoutlen);
 		*clientout = text->out_buf;
 	    }
 	    
+	    GSS_LOCK_MUTEX(params->utils);
 	    gss_release_buffer(&min_stat, output_token);
+	    GSS_UNLOCK_MUTEX(params->utils);
+
 	}
 	
 	text->state = SASL_GSSAPI_STATE_AUTHENTICATED;
@@ -1616,6 +1786,15 @@
     *out_version = SASL_CLIENT_PLUG_VERSION;
     *pluglist = gssapi_client_plugins;
     *plugcount = 1;
+
+#ifdef GSS_USE_MUTEXES
+    if(!gss_mutex) {
+      gss_mutex = utils->mutex_alloc();
+      if(!gss_mutex) {
+        return SASL_FAIL;
+      }
+    }
+#endif
     
     return SASL_OK;
 }
