Thu May 22 17:49:36 2003  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>

	* perl/sieve/lib/isieve.c: Include assert.h.
	[HAVE_SSL]: Include OpenSSL headers.
	(struct iseive_s): New members for STARTTLS support.
	(read_capability): Remember STARTTLS capability.
	(auth_starttls): New function.
	(do_referral) [HAVE_SSL]: Perform STARTTLS.
	[HAVE_SSL]: TLS support, copied from imclient.c with slight
	modifications for isieve types etc., removed debugging code.
	* perl/sieve/lib/isieve.h (auth_starttls): Declare.
	* perl/sieve/lib/request.c (handle_response): Handle optional SP
	string after OK response.
	(starttls): New function.
	* perl/sieve/lib/request.h (starttls): Declare it.
	* perl/sieve/managesieve/Makefile.PL (DEFINE): Define HAVE_SSL if
	available.
	* perl/sieve/managesieve/managesieve.xs (sieve_get_handle): Add
	tls_keyfile arg.
	Perform STARTTLS.
	* perl/sieve/scripts/installsieve.pl: Handle -tlskey, -notls
	switches.
	* perl/sieve/scripts/sieveshell.pl: Likewise.
	
Index: lib/isieve.c
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/lib/isieve.c,v
retrieving revision 1.24
diff -u -p -r1.24 isieve.c
--- lib/isieve.c	25 May 2002 19:57:50 -0000	1.24
+++ lib/isieve.c	22 May 2003 15:43:27 -0000
@@ -45,6 +45,8 @@
 #include <config.h>
 #endif
 
+#include <assert.h>
+
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
@@ -59,6 +61,15 @@
 #include <sasl/sasl.h>
 #include <sasl/saslutil.h>
 
+#ifdef HAVE_SSL
+#include <openssl/lhash.h>
+#include <openssl/bn.h>
+#include <openssl/err.h>
+#include <openssl/pem.h>
+#include <openssl/x509.h>
+#include <openssl/ssl.h>
+#endif /* HAVE_SSL */
+
 #include "isieve.h"
 #include "lex.h"
 #include "request.h"
@@ -77,13 +88,27 @@ struct iseive_s {
     sasl_callback_t *callbacks;
 
     int version;
+    int starttls;
+    char *tls_keyfile;
 
     struct protstream *pin;
     struct protstream *pout;
+
+#ifdef HAVE_SSL
+    SSL_CTX *tls_ctx;
+    SSL *tls_conn;
+#endif /* HAVE_SSL */
 };
 
 void fillin_interactions(sasl_interact_t *tlist);
 
+#ifdef HAVE_SSL
+static int isieve_starttls(isieve_t *obj, int verifydepth,
+			   char *var_tls_cert_file, char *var_tls_key_file,
+			   int *layer);
+#endif /* HAVE_SSL */
+
+
 /* we need this separate from the free() call so that we can reuse
  * the same memory for referrals */
 static void sieve_dispose(isieve_t *obj) 
@@ -261,7 +286,7 @@ char * read_capability(isieve_t *obj)
       } else if (strcasecmp(attr,"IMPLEMENTATION")==0) {
 
       } else if (strcasecmp(attr,"STARTTLS")==0) {
-	  /* TODO */
+	  obj->starttls = 1;
       } else if (val && strncmp(val,"SASL=",5)==0) {
 	  obj->version = OLD_VERSION;
 	  cap = (char *) xmalloc(strlen(val));
@@ -334,6 +359,35 @@ static int getauthline(isieve_t *obj, ch
   return STAT_CONT;
 }
 
+int auth_starttls(isieve_t *obj, char *tls_keyfile,
+		  char **mechlist, char **errstr)
+{
+  unsigned ext_ssf = 0;
+  int ret;
+  char *refer_to;
+
+  if (!obj->tls_keyfile) obj->tls_keyfile = tls_keyfile;
+
+  if (!obj->starttls || !obj->tls_keyfile) return 0;
+
+#ifdef HAVE_SSL
+  ret = starttls(obj->version, obj->pout, obj->pin, &refer_to, errstr);
+  /* xxx handle referrals */
+  if (ret != 0) return -1;
+
+  ret = isieve_starttls(obj, 0, tls_keyfile, tls_keyfile, &ext_ssf);
+  if (ret != 0) return -1;
+
+  prot_printf(obj->pout, "CAPABILITY\r\n");
+  prot_flush(obj->pout);
+  
+  if (*mechlist) free(*mechlist);
+  *mechlist = read_capability(obj);
+#endif /* HAVE_SSL */
+
+  return 0;
+}
+
 
 int auth_sasl(char *mechlist, isieve_t *obj, const char **mechusing,
 	      char **errstr)
@@ -486,6 +540,10 @@ int do_referral(isieve_t *obj, char *ref
     /* Authenticate */
     mechlist = read_capability(obj_new);
 
+    /* Perform STARTTLS */
+    ret = auth_starttls(obj, obj->tls_keyfile, &mechlist, &errstr);
+    if (ret) return STAT_NO;
+
     ret = auth_sasl(mechlist, obj_new, &mtried, &errstr);
     if(ret) return STAT_NO;
 
@@ -620,3 +678,342 @@ int isieve_get(isieve_t *obj,char *name,
 
     return ret;
 }
+
+/*************** All these functions help do the starttls; these are copied from imclient.c ********/
+#ifdef HAVE_SSL
+
+static int verify_depth;
+static int verify_error = X509_V_OK;
+
+#define CCERT_BUFSIZ 256
+static char peer_CN[CCERT_BUFSIZ];
+static char issuer_CN[CCERT_BUFSIZ];
+
+/*
+  * Set up the cert things on the server side. We do need both the
+  * private key (in key_file) and the cert (in cert_file).
+  * Both files may be identical.
+  *
+  * This function is taken from OpenSSL apps/s_cb.c
+  */
+
+static int set_cert_stuff(SSL_CTX * ctx, char *cert_file, char *key_file)
+{
+    if (cert_file != NULL) {
+	if (SSL_CTX_use_certificate_file(ctx, cert_file,
+					 SSL_FILETYPE_PEM) <= 0) {
+	  printf("[ unable to get certificate from '%s' ]\n", cert_file);
+	  return (0);
+	}
+	if (key_file == NULL)
+	    key_file = cert_file;
+	if (SSL_CTX_use_PrivateKey_file(ctx, key_file,
+					SSL_FILETYPE_PEM) <= 0) {
+	  printf("[ unable to get private key from '%s' ]\n", key_file);
+	  return (0);
+	}
+	/* Now we know that a key and cert have been set against
+         * the SSL context */
+	if (!SSL_CTX_check_private_key(ctx)) {
+	  printf("[ Private key does not match the certificate public key ]\n");
+	  return (0);
+	}
+    }
+    return (1);
+}
+
+/* taken from OpenSSL apps/s_cb.c */
+
+static int verify_callback(int ok, X509_STORE_CTX * ctx)
+{
+    char    buf[256];
+    X509   *err_cert;
+    int     err;
+    int     depth;
+
+    err_cert = X509_STORE_CTX_get_current_cert(ctx);
+    err = X509_STORE_CTX_get_error(ctx);
+    depth = X509_STORE_CTX_get_error_depth(ctx);
+
+    X509_NAME_oneline(X509_get_subject_name(err_cert), buf, 256);
+
+    /*    if (verbose==1)
+	  printf("Peer cert verify depth=%d %s\n", depth, buf);*/
+
+    if (!ok) {
+      printf("verify error:num=%d:%s\n", err,
+	     X509_verify_cert_error_string(err));
+	if (verify_depth >= depth) {
+	    ok = 1;
+	    verify_error = X509_V_OK;
+	} else {
+	    ok = 0;
+	    verify_error = X509_V_ERR_CERT_CHAIN_TOO_LONG;
+	}
+    }
+    switch (ctx->error) {
+    case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
+	X509_NAME_oneline(X509_get_issuer_name(ctx->current_cert), buf, 256);
+	printf("issuer= %s\n", buf);
+	break;
+    case X509_V_ERR_CERT_NOT_YET_VALID:
+    case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
+      printf("cert not yet valid\n");
+      break;
+    case X509_V_ERR_CERT_HAS_EXPIRED:
+    case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
+      printf("cert has expired\n");
+      break;
+    }
+
+    /*    if (verbose==1)
+	  printf("verify return:%d\n", ok);*/
+
+    return (ok);
+}
+
+
+/* taken from OpenSSL apps/s_cb.c */
+static RSA *tmp_rsa_cb(SSL *s __attribute__((unused)),
+		       int export __attribute__((unused)),
+		       int keylength)
+{
+    static RSA *rsa_tmp = NULL;
+
+    if (rsa_tmp == NULL) {
+	rsa_tmp = RSA_generate_key(keylength, RSA_F4, NULL, NULL);
+    }
+    return (rsa_tmp);
+}
+
+/*
+ * Seed the random number generator.
+ */
+static int tls_rand_init(void)
+{
+#ifdef EGD_SOCKET
+    return (RAND_egd(EGD_SOCKET));
+#else
+    /* otherwise let OpenSSL do it internally */
+    return 0;
+#endif
+}
+
+static char *var_tls_CAfile="";
+static char *var_tls_CApath="";
+ /*
+  * This is the setup routine for the SSL client. 
+  *
+  * The skeleton of this function is taken from OpenSSL apps/s_client.c.
+  */
+
+static int tls_init_clientengine(isieve_t *obj,
+				 int verifydepth, char *var_tls_cert_file, char *var_tls_key_file)
+{
+    int     off = 0;
+    int     verify_flags = SSL_VERIFY_NONE;
+    char   *CApath;
+    char   *CAfile;
+    char   *c_cert_file;
+    char   *c_key_file;
+
+    assert(obj);
+
+    SSL_load_error_strings();
+    SSLeay_add_ssl_algorithms();
+    if (tls_rand_init() == -1) {
+	printf("[ TLS engine: cannot seed PRNG ]\n");
+	return -1;
+    }
+
+    obj->tls_ctx = SSL_CTX_new(TLSv1_client_method());
+    if (obj->tls_ctx == NULL) {
+	return -1;
+    };
+
+    off |= SSL_OP_ALL;		/* Work around all known bugs */
+    SSL_CTX_set_options(obj->tls_ctx, off);
+    
+    /* debugging   SSL_CTX_set_info_callback(obj->tls_ctx, apps_ssl_info_callback); */
+
+    if (strlen(var_tls_CAfile) == 0)
+	CAfile = NULL;
+    else
+	CAfile = var_tls_CAfile;
+    if (strlen(var_tls_CApath) == 0)
+	CApath = NULL;
+    else
+	CApath = var_tls_CApath;
+
+    if (CAfile || CApath)
+	if ((!SSL_CTX_load_verify_locations(obj->tls_ctx, CAfile, CApath)) ||
+	    (!SSL_CTX_set_default_verify_paths(obj->tls_ctx))) {
+	    printf("[ TLS engine: cannot load CA data ]\n");
+	    return -1;
+	}
+    if (strlen(var_tls_cert_file) == 0)
+	c_cert_file = NULL;
+    else
+	c_cert_file = var_tls_cert_file;
+    if (strlen(var_tls_key_file) == 0)
+	c_key_file = NULL;
+    else
+	c_key_file = var_tls_key_file;
+
+    if (c_cert_file || c_key_file)
+	if (!set_cert_stuff(obj->tls_ctx, c_cert_file, c_key_file)) {
+	    printf("[ TLS engine: cannot load cert/key data ]\n");
+	    return -1;
+	}
+    SSL_CTX_set_tmp_rsa_callback(obj->tls_ctx, tmp_rsa_cb);
+
+    verify_depth = verifydepth;
+    SSL_CTX_set_verify(obj->tls_ctx, verify_flags, verify_callback);
+
+    return 0;
+}
+
+
+static int tls_start_clienttls(isieve_t *obj,
+			       unsigned *layer, char **authid, int fd)
+{
+    int     sts;
+    SSL_SESSION *session;
+    SSL_CIPHER *cipher;
+    X509   *peer;
+    const char *tls_protocol = NULL;
+    const char *tls_cipher_name = NULL;
+    int tls_cipher_usebits = 0;
+    int tls_cipher_algbits = 0;
+    char *tls_peer_CN = "";
+    char *tls_issuer_CN = NULL;
+
+    if (obj->tls_conn == NULL) {
+	obj->tls_conn = (SSL *) SSL_new(obj->tls_ctx);
+    }
+    if (obj->tls_conn == NULL) {
+	printf("Could not allocate 'con' with SSL_new()\n");
+	return -1;
+    }
+    SSL_clear(obj->tls_conn);
+
+    if (!SSL_set_fd(obj->tls_conn, fd)) {
+      printf("SSL_set_fd failed\n");
+      return -1;
+    }
+
+    /*SSL_set_read_ahead(obj->tls_conn, 1);*/
+
+    /*
+     * This is the actual handshake routine. It will do all the negotiations
+     * and will check the client cert etc.
+     */
+    SSL_set_connect_state(obj->tls_conn);
+
+
+    /*
+     * We do have an SSL_set_fd() and now suddenly a BIO_ routine is called?
+     * Well there is a BIO below the SSL routines that is automatically
+     * created for us, so we can use it for debugging purposes.
+     */
+    /*    if (verbose==1) */
+    /*    BIO_set_callback(SSL_get_rbio(obj->tls_conn), bio_dump_cb);*/
+
+    /* Dump the negotiation for loglevels 3 and 4 */
+
+    if ((sts = SSL_connect(obj->tls_conn)) <= 0) {
+	printf("[ SSL_connect error %d ]\n", sts); /* xxx get string error? */
+	session = SSL_get_session(obj->tls_conn);
+	if (session) {
+	    SSL_CTX_remove_session(obj->tls_ctx, session);
+	    printf("[ SSL session removed ]\n");
+	}
+	if (obj->tls_conn!=NULL)
+	    SSL_free(obj->tls_conn);
+	obj->tls_conn = NULL;
+	return -1;
+    }
+
+    /*
+     * Lets see, whether a peer certificate is availabe and what is
+     * the actual information. We want to save it for later use.
+     */
+    peer = SSL_get_peer_certificate(obj->tls_conn);
+    if (peer != NULL) {
+	X509_NAME_get_text_by_NID(X509_get_subject_name(peer),
+			  NID_commonName, peer_CN, CCERT_BUFSIZ);
+	tls_peer_CN = peer_CN;
+	X509_NAME_get_text_by_NID(X509_get_issuer_name(peer),
+			  NID_commonName, issuer_CN, CCERT_BUFSIZ);
+	/*	if (verbose==1)
+		printf("subject_CN=%s, issuer_CN=%s\n", peer_CN, issuer_CN);*/
+	tls_issuer_CN = issuer_CN;
+
+    }
+    tls_protocol = SSL_get_version(obj->tls_conn);
+    cipher = SSL_get_current_cipher(obj->tls_conn);
+    tls_cipher_name = SSL_CIPHER_get_name(cipher);
+    tls_cipher_usebits = SSL_CIPHER_get_bits(cipher,
+						 &tls_cipher_algbits);
+
+    if (layer!=NULL)
+      *layer = tls_cipher_usebits;
+
+    if (authid!=NULL)
+      *authid = tls_peer_CN;
+
+    /*    printf("TLS connection established: %s with cipher %s (%d/%d bits)\n",
+	   tls_protocol, tls_cipher_name,
+	   tls_cipher_usebits, tls_cipher_algbits);*/
+    return 0;
+}
+
+static int isieve_starttls(isieve_t *obj,
+			     int verifydepth __attribute__((unused)),
+			     char *var_tls_cert_file, 
+			     char *var_tls_key_file,
+			     int *layer __attribute__((unused)))
+{
+  int result;
+  unsigned ssf;
+  char *auth_id;
+  
+  result=tls_init_clientengine(obj, 10, var_tls_cert_file, var_tls_key_file);
+  if (result!=0)
+  {
+    printf("[ TLS engine failed ]\n");
+    return 1;
+  } else {
+    result=tls_start_clienttls(obj, &ssf, &auth_id, obj->sock);
+    
+    if (result!=0) {
+      printf("[ TLS negotiation did not succeed ]\n");
+      return 1;
+    }
+  }
+
+  /* turn non-blocking i/o back on */
+
+
+  /* TLS negotiation succeeded */
+
+  auth_id=""; /* xxx this really should be peer_CN or
+		 issuer_CN but I can't figure out which is
+		 which at the moment */
+
+  /* tell SASL about the negotiated layer */
+  result=sasl_setprop(obj->conn,
+		      SASL_SSF_EXTERNAL,
+		      &ssf);
+  if (result!=SASL_OK) return 1;
+  result=sasl_setprop(obj->conn,
+		      SASL_AUTH_EXTERNAL,
+		      auth_id);
+  if (result!=SASL_OK) return 1;
+
+  prot_settls (obj->pin,  obj->tls_conn);
+  prot_settls (obj->pout, obj->tls_conn);
+
+  return 0;
+}
+#endif /* HAVE_SSL */
Index: lib/isieve.h
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/lib/isieve.h,v
retrieving revision 1.9
diff -u -p -r1.9 isieve.h
--- lib/isieve.h	25 May 2002 19:57:50 -0000	1.9
+++ lib/isieve.h	22 May 2003 15:43:27 -0000
@@ -67,6 +67,7 @@ typedef enum {
     STAT_OK = 2
 } imt_stat;
 
+int auth_starttls(isieve_t *obj, char *tls_keyfile, char **mechlist, char **errstr);
 int auth_sasl(char *mechlist, isieve_t *obj, const char **mechusing, char **errstr);
 
 int isieve_logout(isieve_t **obj);
Index: lib/request.c
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/lib/request.c,v
retrieving revision 1.15
diff -u -p -r1.15 request.c
--- lib/request.c	25 May 2002 19:57:50 -0000	1.15
+++ lib/request.c	22 May 2003 15:43:27 -0000
@@ -168,22 +168,24 @@ int handle_response(int res,int version,
       /* SASL response */
       res = yylex(&state, pin);
       if(res == ' ') {
-	  if (yylex(&state, pin) != '(')
-	      parseerror("expected LPAREN");
-	  
-	  if (yylex(&state, pin)==TOKEN_SASL) {
-	      if (yylex(&state, pin)!=' ')
-		  parseerror("expected space");
-	      if (yylex(&state, pin)!=STRING)
-		  parseerror("expected string");
+	  res = yylex(&state, pin);
+	  if (res == '(') {
+	      if (yylex(&state, pin)==TOKEN_SASL) {
+	          if (yylex(&state, pin)!=' ')
+		      parseerror("expected space");
+	          if (yylex(&state, pin)!=STRING)
+		      parseerror("expected string");
 
-	      *refer_to = xstrdup(string_DATAPTR(state.str));
+	          *refer_to = xstrdup(string_DATAPTR(state.str));
 
-	      if (yylex(&state, pin)!=')')
-		  parseerror("expected RPAREN");
-	  } else {
-	      parseerror("unexpected response code with OK response");
+	          if (yylex(&state, pin) != ')')
+		      parseerror("expected RPAREN");
+		  res = yylex(&state, pin);
+		  if (res == ' ') res = yylex(&state, pin);
+	      }
 	  }
+	  if (res != STRING)
+	      parseerror("unexpected response code with OK response");
       } else if (version != OLD_VERSION && res == EOL) {
 	  return r;
       }
@@ -637,4 +639,32 @@ int getscriptvalue(int version, struct p
 
   return 0;
 
+}
+
+
+int starttls(int version, struct protstream *pout, struct protstream *pin,
+	     char **refer_to, char **errstrp)
+{
+  lexstate_t state;
+  int res;
+  int ret;
+  mystring_t *errstr;
+
+  prot_printf(pout, "STARTTLS\r\n");
+  prot_flush(pout);
+	    
+  res = yylex(&state, pin);
+
+  ret = handle_response(res, version, pin, refer_to, &errstr);
+
+  /* if command failed */
+  if(ret == -2 && *refer_to) {
+      return -2;
+  } else if (ret != 0) {
+      *errstrp = malloc(128);
+      snprintf(*errstrp, 127, 
+	       "Starttls: %s",string_DATAPTR(errstr));
+      return -1;
+  }
+  return 0;
 }
Index: lib/request.h
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/lib/request.h,v
retrieving revision 1.6
diff -u -p -r1.6 request.h
--- lib/request.h	25 May 2002 19:57:50 -0000	1.6
+++ lib/request.h	22 May 2003 15:43:27 -0000
@@ -91,5 +91,7 @@ int getscriptvalue(int version,struct pr
 
 void parseerror(char *str);
 
+int starttls(int version, struct protstream *pout, struct protstream *pin,
+	    char **refer_to, char **errstr);
 
 #endif
Index: managesieve/Makefile.PL
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/managesieve/Makefile.PL,v
retrieving revision 1.10
diff -u -p -r1.10 Makefile.PL
--- managesieve/Makefile.PL	22 Jul 2002 16:16:12 -0000	1.10
+++ managesieve/Makefile.PL	22 May 2003 15:43:27 -0000
@@ -46,6 +46,7 @@ my $SASL_INC = $ENV{SASL_INC};
 my $SASL_LIB = $ENV{SASL_LIB} || "-lsasl2";
 my $OPENSSL_INC = $ENV{OPENSSL_INC};
 my $OPENSSL_LIB = $ENV{OPENSSL_LIB};
+my $HAVE_SSL = $OPENSSL_LIB ? "-DHAVE_SSL" : '';
 
 $libs = "-lcyrus";
 
@@ -57,6 +58,6 @@ WriteMakefile(
     'VERSION_FROM' => 'managesieve.pm', # finds $VERSION
     'MYEXTLIB'  => '../lib/isieve.o ../lib/lex.o ../lib/mystring.o ../lib/request.o ../../../lib/libcyrus.a',
     'LIBS'	=> ["$SASL_LIB $OPENSSL_LIB -lssl -lcrypto"], 
-    'DEFINE'	=> '-DPERL_POLLUTE',     # e.g., '-DHAVE_SOMETHING' 
+    'DEFINE'	=> "-DPERL_POLLUTE $HAVE_SSL",     # e.g., '-DHAVE_SOMETHING' 
     'INC'	=> "-I../lib/ -I../../../lib/ $SASL_INC $OPENSSL_INC",
 );
Index: managesieve/managesieve.xs
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/managesieve/managesieve.xs,v
retrieving revision 1.19
diff -u -p -r1.19 managesieve.xs
--- managesieve/managesieve.xs	2 Dec 2002 20:48:38 -0000	1.19
+++ managesieve/managesieve.xs	22 May 2003 15:43:27 -0000
@@ -211,12 +211,13 @@ PROTOTYPES: ENABLE
 
 
 Sieveobj
-sieve_get_handle(servername, username_cb, authname_cb, password_cb, realm_cb)
+sieve_get_handle(servername, username_cb, authname_cb, password_cb, realm_cb, tls_keyfile)
   char *servername
   SV *username_cb
   SV *authname_cb
   SV *password_cb
   SV *realm_cb
+  char *tls_keyfile
 
   PREINIT:
   Sieveobj ret = NULL;
@@ -248,6 +249,8 @@ sieve_get_handle(servername, username_cb
   callbacks[3].context = password_cb;
   callbacks[4].id = SASL_CB_LIST_END;
 
+  if (!SvOK(ST(5))) tls_keyfile = NULL;
+
   /* map port -> num */
   serv = getservbyname("sieve", "tcp");
   if (serv == NULL) {
@@ -281,6 +284,11 @@ sieve_get_handle(servername, username_cb
   mlist = (char*) xstrdup(mechlist);
   if(!mlist) {
 	globalerr = "could not allocate memory for mech list";
+	XSRETURN_UNDEF;
+  }
+
+  if (auth_starttls(obj, tls_keyfile, &mlist, &ret->errstr) != 0) {
+	globalerr = "starttls failed";
 	XSRETURN_UNDEF;
   }
 
Index: scripts/installsieve.pl
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/scripts/installsieve.pl,v
retrieving revision 1.7
diff -u -p -r1.7 installsieve.pl
--- scripts/installsieve.pl	25 May 2002 19:57:52 -0000	1.7
+++ scripts/installsieve.pl	22 May 2003 15:43:27 -0000
@@ -46,6 +46,7 @@ use Cyrus::SIEVE::managesieve;
 use Getopt::Long;
 
 $username = "";
+$tls_keyfile = "";
 
 print "NOTE: This program is deprecated. Please use sieveshell\n";
 print "\n";
@@ -57,6 +58,8 @@ $ret = GetOptions("v|views:s" => \$views
 		  "a|activates:s" => \$activates,
 		  "d|deletes:s" => \$deletes,
 #		  "m|mechanism:s" => \$mech,
+    		  "t|tlskey:s" => \$tls_keyfile,
+		  "n|notls" => \$notls,
 		  "g|gets:s" => \$gets,
                   "u|username:s" => \$username,
 #		  "w|password:s" => \$pass
@@ -68,6 +71,10 @@ if (!$ret || $#ARGV != 0) { 
 
 $acapserver = $ARGV[0];
 
+if ($notls) {
+    $tls_keyfile = undef;
+}
+
 sub list_cb {
 
   my($name, $isactive) = @_ ;
@@ -115,11 +122,13 @@ sub show_help {
   print "  -g <name>    Get script <name> and save to disk\n";
   print "  -u <user>    Userid/Authname to use\n";
 #  print "  -w <passwd>  Specify password (Should only be used for automated scripts)\n";
+  print "  -t <keyfile> TLS keyfile to use\n";
+  print "  -n           Don't use TLS\n";
   print "\n";
 }
 
 #main code
-my $obj = sieve_get_handle($acapserver,"prompt","prompt","prompt","prompt");
+my $obj = sieve_get_handle($acapserver,"prompt","prompt","prompt","prompt", $tls_keyfile);
 
 if (!defined $obj) {
   die "Unable to connect to server";
Index: scripts/sieveshell.pl
===================================================================
RCS file: /cvs/src/cyrus/perl/sieve/scripts/sieveshell.pl,v
retrieving revision 1.19
diff -u -p -r1.19 sieveshell.pl
--- scripts/sieveshell.pl	2 Dec 2002 19:45:11 -0000	1.19
+++ scripts/sieveshell.pl	22 May 2003 15:43:27 -0000
@@ -62,6 +62,8 @@ my $deletehelp =     "delete <name>    -
 my $username = $ENV{USER};
 my $authname = $ENV{USER};
 my $realm = "";
+my $tls_keyfile = "";
+my $notls = 0;
 my $ex = "";
 my $help = 0;
 my $man = 0;
@@ -70,6 +72,8 @@ my $ret;
 GetOptions("a|authname:s" => \$authname,
     "u|username:s" => \$username,
     "r|realm:s" => \$realm,
+    "t|tlskey:s" => \$tls_keyfile,
+    "n|notls" => \$notls,
     "e|exec:s" => \$ex,
     "help|?" => \$help,
     man => \$man) or pod2usage(2);
@@ -82,6 +86,10 @@ if ($#ARGV != 0) { 
 
 my $acapserver = $ARGV[0];
 
+if ($notls) {
+    $tls_keyfile = undef;
+}
+
 my $filehandle;
 my $interactive;
 
@@ -148,7 +156,7 @@ sub prompt {
 
 sub show_help {
   print "Usage:\n";
-  print "  sieveshell [-u username] [-a authname] [-r realm] <server>\n";
+  print "  sieveshell [-u username] [-a authname] [-r realm] [-t keyfile] [-n] <server>\n";
   print "\n";
   print "help             - this screen\n";
   print "list             - list scripts on server\n";
@@ -170,7 +178,7 @@ sub getline {
 print "connecting to $acapserver\n";
 
 my $obj = sieve_get_handle($acapserver,
-			   "prompt", "prompt", "prompt", "prompt");
+			   "prompt", "prompt", "prompt", "prompt", $tls_keyfile);
 
 if (!defined $obj) {
     die "unable to connect to server";
@@ -290,7 +298,8 @@ sieveshell - remotely manipulate sieve s
 =head1 SYNOPSIS
 
 sieveshell [B<--user>=I<user>] [B<--authname>=I<authname>] 
-[B<--realm>=I<realm>] [B<--exec>=I<script>] I<server>
+[B<--realm>=I<realm>] [B<--tlskey>=I<keyfile] [B<--notls>]
+[B<--exec>=I<script>] I<server>
 
 sieveshell B<--help>
 
@@ -333,6 +342,14 @@ The user to use for authentication (defa
 =item B<-r> I<realm>, B<--realm>=I<realm> 
 
 The realm to attempt authentication in.
+
+=item B<-t> I<keyfile>, B<--tlskey>=I<keyfile>
+
+I<keyfile> contains the TLS public and private keys to use.
+
+=item B<-n>, B<--notls>
+
+Disable TLS.
 
 =item B<-e> I<script>, B<--exec>=I<script> 
 
